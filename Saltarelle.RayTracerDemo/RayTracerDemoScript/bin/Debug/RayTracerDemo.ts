///<reference path='mscorlib.ts'/>
class Color extends NObject
{
	R: number = 0;
	G: number = 0;
	B: number = 0;
	A: number = 0;
	static get BlueViolet(): Color
	{
		return new Color(255, 138, 43, 226);
	}
	static get Aquamarine(): Color
	{
		return new Color(255, 127, 255, 212);
	}
	constructor(a: number, r: number, g: number, b: number)
	{
		super();
		this.A = a;
		this.R = r;
		this.G = g;
		this.B = b;
	}
	static FromArgb(a: number, r: number, g: number, b: number): Color
	{
		return new Color(a, r, g, b);
	}
}
class Console extends NObject
{
	static WriteLine(msg: string): void
	{
		NConsole.Write(msg + "<br>");
	}
	static Write(msg: string): void
	{
	}
	constructor()
	{
		super();
	}
}
class Bitmap extends NObject
{
	private width: number = 0;
	private height: number = 0;
	private canvas: CanvasElement = null;
	private context: CanvasRenderingContext2D = null;
	private imagedata: ImageData = null;
	constructor(w: number, h: number)
	{
		super();
		this.width = w;
		this.height = h;
		this.canvas = <CanvasElement>Document.GetElementById("canvas");
		this.context = <CanvasRenderingContext2D>this.canvas.GetContext(CanvasContextId.Render2D);
		this.context.GlobalCompositeOperation = CompositeOperation.Copy;
		this.imagedata = this.context.CreateImageData(<number>w, 1.0);
	}
	SetPixel(x: number, y: number, c: Color): void
	{
		var num: number = x * 4;
		this.imagedata.Data.set_Item(<number>num, <number>c.R);
		this.imagedata.Data.set_Item(<number>(num + 1), <number>c.G);
		this.imagedata.Data.set_Item(<number>(num + 2), <number>c.B);
		this.imagedata.Data.set_Item(<number>(num + 3), <number>c.A);
		if (x === this.width - 1)
		{
			this.context.PutImageData(this.imagedata, 0.0, <number>y);
		}
	}
	Save(filename: string): void
	{
	}
}
class Stopwatch extends NObject
{
	private start_time: number = 0;
	get ElapsedMilliseconds(): number
	{
		return this.getTime() - this.start_time;
	}
	Restart(): void
	{
		this.start_time = this.getTime();
	}
	getTime(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class MersenneTwister extends NObject
{
	constructor(seed: number)
	{
		super();
	}
	genrand_real1(): number
	{
		return 0;
	}
}
class Random extends NObject
{
	private mt: MersenneTwister = null;
	constructor(seed: number)
	{
		super();
		this.mt = new MersenneTwister(seed);
	}
	NextDouble(): number
	{
		return <number>this.mt.genrand_real1();
	}
	Next(maxValue: number): number
	{
		var num: number = this.mt.genrand_real1();
		return Random.FloorInt(num * maxValue);
	}
	static FloorInt(value: number): number
	{
		return 0;
	}
}
class Vector3f extends NObject
{
	x: number = 0;
	y: number = 0;
	z: number = 0;
	constructor(x: number = 0, y: number = 0, z: number = 0)
	{
		super();
		this.x = x;
		this.y = y;
		this.z = z;
	}
	Dot(b: Vector3f): number
	{
		return this.x * b.x + this.y * b.y + this.z * b.z;
	}
	Normalise(): void
	{
		var num: number = <number>(1.0 / Math.sqrt(<number>this.Dot(this)));
		this.x = this.x * num;
		this.y = this.y * num;
		this.z = this.z * num;
	}
	Magnitude(): number
	{
		return <number>Math.sqrt(<number>(this.x * this.x + this.y * this.y + this.z * this.z));
	}
	static op_Subtraction(a: Vector3f, b: Vector3f): Vector3f
	{
		return new Vector3f(a.x - b.x, a.y - b.y, a.z - b.z);
	}
	static op_UnaryNegation(a: Vector3f): Vector3f
	{
		return new Vector3f(-a.x, -a.y, -a.z);
	}
	static op_Multiply(a: Vector3f, b: number): Vector3f
	{
		return new Vector3f(a.x * b, a.y * b, a.z * b);
	}
	static op_Division(a: Vector3f, b: number): Vector3f
	{
		return new Vector3f(a.x / b, a.y / b, a.z / b);
	}
	static op_Addition(a: Vector3f, b: Vector3f): Vector3f
	{
		return new Vector3f(a.x + b.x, a.y + b.y, a.z + b.z);
	}
	ReflectIn(normal: Vector3f): Vector3f
	{
		var vector3f: Vector3f = -this;
		return Vector3f.op_Subtraction(Vector3f.op_Multiply(normal, 2 * vector3f.Dot(normal)), vector3f);
	}
}
class Light extends NObject
{
	position: Vector3f = null;
	constructor(p: Vector3f)
	{
		super();
		this.position = p;
	}
}
class Ray extends NObject
{
	static WORLD_MAX: number = 1000;
	origin: Vector3f = null;
	direction: Vector3f = null;
	closestHitObject: RTObject = null;
	closestHitDistance: number = 0;
	hitPoint: Vector3f = null;
	constructor(o: Vector3f, d: Vector3f)
	{
		super();
		this.origin = o;
		this.direction = d;
		this.closestHitDistance = 1000;
		this.closestHitObject = null;
	}
}
class RTObject extends NObject
{
	color: Color = null;
	Intersect(ray: Ray): number
	{
		throw new NotSupportedException();
	}
	GetSurfaceNormalAtPoint(p: Vector3f): Vector3f
	{
		throw new NotSupportedException();
	}
	constructor()
	{
		super();
	}
}
class Sphere extends RTObject
{
	position: Vector3f = null;
	radius: number = 0;
	constructor(p: Vector3f, r: number, c: Color)
	{
		super();
		this.position = p;
		this.radius = r;
		this.color = c;
	}
	Intersect(ray: Ray): number
	{
		var vector3f: Vector3f = Vector3f.op_Subtraction(this.position, ray.origin);
		var num: number = vector3f.Dot(ray.direction);
		var num2: number = this.radius * this.radius + num * num - vector3f.x * vector3f.x - vector3f.y * vector3f.y - vector3f.z * vector3f.z;
		var result: number;
		if (num2 < 0)
		{
			result = -1;
		}
		else
		{
			num2 = num - <number>Math.sqrt(<number>num2);
			if (num2 < 0)
			{
				result = -1;
			}
			else
			{
				result = num2;
			}
		}
		return result;
	}
	GetSurfaceNormalAtPoint(p: Vector3f): Vector3f
	{
		var vector3f: Vector3f = Vector3f.op_Subtraction(p, this.position);
		vector3f.Normalise();
		return vector3f;
	}
}
class Plane extends RTObject
{
	normal: Vector3f = null;
	distance: number = 0;
	constructor(n: Vector3f, d: number, c: Color)
	{
		super();
		this.normal = n;
		this.distance = d;
		this.color = c;
	}
	Intersect(ray: Ray): number
	{
		var num: number = this.normal.Dot(ray.direction);
		var result: number;
		if (num === 0)
		{
			result = -1;
		}
		else
		{
			var num2: number = -(this.normal.Dot(ray.origin) - this.distance) / num;
			if (num2 < 0)
			{
				result = -1;
			}
			else
			{
				result = num2;
			}
		}
		return result;
	}
	GetSurfaceNormalAtPoint(p: Vector3f): Vector3f
	{
		return this.normal;
	}
}
class RayTracer extends NObject
{
	private static PI: number = 3.14159274;
	private static PI_X_2: number = 6.28318548;
	private static PI_OVER_2: number = 1.57079637;
	private static CANVAS_WIDTH: number = 640;
	private static CANVAS_HEIGHT: number = 480;
	private static TINY: number = 0.0001;
	private static MAX_DEPTH: number = 3;
	private static MATERIAL_DIFFUSE_COEFFICIENT: number = 0.5;
	private static MATERIAL_REFLECTION_COEFFICIENT: number = 0.5;
	private static MATERIAL_SPECULAR_COEFFICIENT: number = 2;
	private static MATERIAL_SPECULAR_POWER: number = 50;
	private static BG_COLOR: Color = Color.BlueViolet;
	private static eyePos: Vector3f = new Vector3f(0, 0, -5);
	private static screenTopLeftPos: Vector3f = new Vector3f(-6, 4, 0);
	private static screenBottomRightPos: Vector3f = new Vector3f(6, -4, 0);
	private static pixelWidth: number = 0;
	private static pixelHeight: number = 0;
	private static objects: List<RTObject> = null;
	private static lights: List<Light> = null;
	private static random: Random = null;
	private static stopwatch: Stopwatch = null;
	private static minSpeed: number = 0.0;
	private static maxSpeed: number = NNumber.get_MinValue();
	private static speedSamples: List<number> = null;
	private static Main(): void
	{
		RayTracer.objects = new List<RTObject>();
		RayTracer.lights = new List<Light>();
		RayTracer.random = new Random(1478650229);
		RayTracer.stopwatch = new Stopwatch();
		RayTracer.speedSamples = new List<number>();
		var bitmap: Bitmap = new Bitmap(640, 480);
		for (var i: number = 0; i < 30; i = i + 1)
		{
			var x: number = <number>(RayTracer.random.NextDouble() * 10.0) - 5;
			var y: number = <number>(RayTracer.random.NextDouble() * 10.0) - 5;
			var z: number = <number>(RayTracer.random.NextDouble() * 10.0);
			var c: Color = Color.FromArgb(255, RayTracer.random.Next(255), RayTracer.random.Next(255), RayTracer.random.Next(255));
			var item: Sphere = new Sphere(new Vector3f(x, y, z), <number>RayTracer.random.NextDouble(), c);
			RayTracer.objects.Add(item);
		}
		var item2: Plane = new Plane(new Vector3f(0, 1, 0), -10, Color.Aquamarine);
		RayTracer.objects.Add(item2);
		RayTracer.lights.Add(new Light(new Vector3f(2, 0, 0)));
		RayTracer.lights.Add(new Light(new Vector3f(0, 10, 7.5)));
		RayTracer.pixelWidth = (RayTracer.screenBottomRightPos.x - RayTracer.screenTopLeftPos.x) / 640;
		RayTracer.pixelHeight = (RayTracer.screenTopLeftPos.y - RayTracer.screenBottomRightPos.y) / 480;
		var dotPeriod: number = 48;
		NConsole.WriteLine("Rendering...\n");
		NConsole.WriteLine("|0%---100%|");
		RayTracer.RenderRow(bitmap, dotPeriod, 0);
		bitmap.Save("output.png");
	}
	private static RenderRow(canvas: Bitmap, dotPeriod: number, y: number): void
	{
		if (y < 480)
		{
			if (y % dotPeriod === 0)
			{
				NConsole.Write("*");
			}
			RayTracer.stopwatch.Restart();
			for (var i: number = 0; i < 640; i = i + 1)
			{
				var c: Color = RayTracer.RenderPixel(i, y);
				canvas.SetPixel(i, y, c);
			}
			var elapsedMilliseconds: number = RayTracer.stopwatch.get_ElapsedMilliseconds();
			var msPerPixel: number = <number>elapsedMilliseconds / 640.0;
			RayTracer.ReportSpeed(msPerPixel);
			RayTracer.SetTimeout(0, ()=>
			{
				RayTracer.RenderRow(canvas, dotPeriod, y + 1);
			});
		}
	}
	private static ReportSpeed(msPerPixel: number): void
	{
		RayTracer.minSpeed = Math.min(msPerPixel, RayTracer.minSpeed);
		RayTracer.maxSpeed = Math.max(msPerPixel, RayTracer.maxSpeed);
		RayTracer.speedSamples.Add(msPerPixel);
		var num: number = 0.0;
		var enumerator: IEnumerator<number> = RayTracer.speedSamples.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				var num2: number = enumerator.Current;
				num = num + num2;
			}
		}
		finally
		{
			if (enumerator !== null)
			{
				enumerator.Dispose();
			}
		}
		num = num / <number>RayTracer.speedSamples.Count;
		RayTracer.WriteSpeedText(NString.Format("min: {0:F3} ms/pixel, max: {1:F3} ms/pixel, avg: {2:F3} ms/pixel", [
			RayTracer.minSpeed, RayTracer.maxSpeed, num
		]));
	}
	private static WriteSpeedText(text: string): void
	{
	}
	private static SetTimeout(timeoutMs: number, action: () => void): void
	{
		action();
	}
	private static CheckIntersection(ray: Ray[]): void
	{
		var enumerator: IEnumerator<RTObject> = RayTracer.objects.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				var current: RTObject = enumerator.Current;
				var num: number = current.Intersect(ray[0]);
				if (num < ray[0].closestHitDistance && num > 0)
				{
					ray[0].closestHitObject = current;
					ray[0].closestHitDistance = num;
				}
			}
		}
		finally
		{
			if (enumerator !== null)
			{
				enumerator.Dispose();
			}
		}
		ray[0].hitPoint = Vector3f.op_Addition(ray[0].origin, Vector3f.op_Multiply(ray[0].direction, ray[0].closestHitDistance));
	}
	private static RenderPixel(x: number, y: number): Color
	{
		var x2: number = RayTracer.screenTopLeftPos.x + <number>x * RayTracer.pixelWidth;
		var y2: number = RayTracer.screenTopLeftPos.y - <number>y * RayTracer.pixelHeight;
		var vector3f: Vector3f = Vector3f.op_Subtraction(new Vector3f(x2, y2, 0), RayTracer.eyePos);
		vector3f.Normalise();
		var ray: Ray = new Ray(RayTracer.eyePos, vector3f);
		return RayTracer.Trace(ray, 0);
	}
	private static Trace(ray: Ray, traceDepth: number): Color
	{
		(()=>
		{
			var _p0 = [
				ray
			];
			var _r = RayTracer.CheckIntersection(_p0);
			ray = _p0[0];
			return _r;
		})();
		var result: Color;
		if (ray.closestHitDistance >= 1000 || ray.closestHitObject === null)
		{
			result = RayTracer.BG_COLOR;
		}
		else
		{
			var num: number = 0.15 * <number>ray.closestHitObject.color.R;
			var num2: number = 0.15 * <number>ray.closestHitObject.color.G;
			var num3: number = 0.15 * <number>ray.closestHitObject.color.B;
			var surfaceNormalAtPoint: Vector3f = ray.closestHitObject.GetSurfaceNormalAtPoint(ray.hitPoint);
			var vector3f: Vector3f = -ray.direction;
			var enumerator: IEnumerator<Light> = RayTracer.lights.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					var current: Light = enumerator.Current;
					var vector3f2: Vector3f = new Vector3f(0, 0, 0);
					vector3f2 = Vector3f.op_Subtraction(current.position, ray.hitPoint);
					var closestHitDistance: number = vector3f2.Magnitude();
					vector3f2.Normalise();
					var ray2: Ray = new Ray(Vector3f.op_Addition(ray.hitPoint, Vector3f.op_Multiply(vector3f2, 0.0001)), vector3f2);
					ray2.closestHitDistance = closestHitDistance;
					(()=>
					{
						var _p0 = [
							ray2
						];
						var _r = RayTracer.CheckIntersection(_p0);
						ray2 = _p0[0];
						return _r;
					})();
					if (ray2.closestHitObject === null)
					{
						var num4: number = surfaceNormalAtPoint.Dot(vector3f2);
						if (num4 > 0)
						{
							num = num + 0.5 * num4 * <number>ray.closestHitObject.color.R;
							num2 = num2 + 0.5 * num4 * <number>ray.closestHitObject.color.G;
							num3 = num3 + 0.5 * num4 * <number>ray.closestHitObject.color.B;
							var b: Vector3f = Vector3f.op_Subtraction(Vector3f.op_Multiply(surfaceNormalAtPoint, num4 * 2), vector3f2);
							var num5: number = vector3f.Dot(b);
							if (num5 > 0)
							{
								num5 = 2 * <number>Math.pow(<number>num5, 50.0);
								num = num + num5 * <number>ray.closestHitObject.color.R;
								num2 = num2 + num5 * <number>ray.closestHitObject.color.G;
								num3 = num3 + num5 * <number>ray.closestHitObject.color.B;
							}
						}
					}
				}
			}
			finally
			{
				if (enumerator !== null)
				{
					enumerator.Dispose();
				}
			}
			if (traceDepth < 3)
			{
				var vector3f3: Vector3f = ray.direction.ReflectIn(surfaceNormalAtPoint);
				var ray3: Ray = new Ray(Vector3f.op_Addition(ray.hitPoint, Vector3f.op_Multiply(vector3f3, 0.0001)), vector3f3);
				var color: Color = RayTracer.Trace(ray3, traceDepth + 1);
				num = num + 0.5 * <number>color.R;
				num2 = num2 + 0.5 * <number>color.G;
				num3 = num3 + 0.5 * <number>color.B;
			}
			if (num > 255)
			{
				num = 255;
			}
			if (num2 > 255)
			{
				num2 = 255;
			}
			if (num3 > 255)
			{
				num3 = 255;
			}
			result = Color.FromArgb(255, <number>num, <number>num2, <number>num3);
		}
		return result;
	}
	constructor()
	{
		super();
	}
}
class ActiveXObject extends NObject
{
	constructor(progId: string)
	{
		super();
	}
}
enum AllowedDropEffect
{
	None,
	Copy,
	CopyLink,
	CopyMove,
	Link,
	LinkMove,
	Move,
	All,
	Uninitialized
}
interface IGeometryUtils
{
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMPoint;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad;
	GetBoxQuads(): DOMQuad[];
	GetBoxQuads(options: BoxQuadOptions): DOMQuad[];
	GetBoxQuads(options?: BoxQuadOptions): DOMQuad[];
}
class EventTarget extends NObject
{
	constructor()
	{
		super();
	}
	AddEventListener(type: string, listener: IEventListener): void;
	AddEventListener(type: string, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	AddEventListener(type: string, listener: () => void): void;
	AddEventListener(type: string, listener: () => void, capture: boolean): void;
	AddEventListener(type: string, listener: (event: Event) => void): void;
	AddEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: string, listener: (target: EventTarget, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: EventTarget, event: Event) => void, capture: boolean): void;
	AddEventListener(type: string, listener: any, capture?: boolean, wantsUntrusted?: Nullable<boolean>): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			this.AddEventListener_2(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_3(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_4(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_5(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_6(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_7(type, listener);
			return;
		}
		this.AddEventListener_8(type, listener, capture);
	}
	private AddEventListener_0(type: string, listener: IEventListener): void
	{
	}
	private AddEventListener_1(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private AddEventListener_2(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	DispatchEvent(event: Event): boolean
	{
		return false;
	}
	RemoveEventListener(type: string, listener: IEventListener): void;
	RemoveEventListener(type: string, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: () => void): void;
	RemoveEventListener(type: string, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: string, listener: (event: Event) => void): void;
	RemoveEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: EventTarget, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: EventTarget, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: string, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		this.RemoveEventListener_7(type, listener, capture);
	}
	private RemoveEventListener_0(type: string, listener: IEventListener): void
	{
	}
	private RemoveEventListener_1(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private AddEventListener_3(type: string, listener: () => void): void
	{
	}
	private AddEventListener_4(type: string, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: string, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: string, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_5(type: string, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_6(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: string, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_7(type: string, listener: (target: EventTarget, event: Event) => void): void
	{
	}
	private AddEventListener_8(type: string, listener: (target: EventTarget, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: string, listener: (target: EventTarget, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: string, listener: (target: EventTarget, event: Event) => void, capture: boolean): void
	{
	}
}
class XmlNode extends EventTarget
{
	static ATTRIBUTE_NODE: number = 2;
	static CDATA_SECTION_NODE: number = 4;
	static COMMENT_NODE: number = 8;
	static DOCUMENT_FRAGMENT_NODE: number = 11;
	static DOCUMENT_NODE: number = 9;
	static DOCUMENT_POSITION_CONTAINED_BY: number = 16;
	static DOCUMENT_POSITION_CONTAINS: number = 8;
	static DOCUMENT_POSITION_DISCONNECTED: number = 1;
	static DOCUMENT_POSITION_FOLLOWING: number = 4;
	static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number = 32;
	static DOCUMENT_POSITION_PRECEDING: number = 2;
	static DOCUMENT_TYPE_NODE: number = 10;
	static ELEMENT_NODE: number = 1;
	static ENTITY_NODE: number = 6;
	static ENTITY_REFERENCE_NODE: number = 5;
	static NOTATION_NODE: number = 12;
	static PROCESSING_INSTRUCTION_NODE: number = 7;
	static TEXT_NODE: number = 3;
	get BaseURI(): string
	{
		return null;
	}
	get ChildNodes(): XmlNodeList
	{
		return null;
	}
	get FirstChild(): XmlNode
	{
		return null;
	}
	get LastChild(): XmlNode
	{
		return null;
	}
	get LocalName(): string
	{
		return null;
	}
	get NamespaceURI(): string
	{
		return null;
	}
	get NextSibling(): XmlNode
	{
		return null;
	}
	get NodeName(): string
	{
		return null;
	}
	get NodeType(): XmlNodeType
	{
		return <XmlNodeType>0;
	}
	set NodeValue(value: string)
	{
	}
	get NodeValue(): string
	{
		return null;
	}
	get OwnerDocument(): DocumentBase
	{
		return null;
	}
	get ParentElement(): XmlElement
	{
		return null;
	}
	get ParentNode(): XmlNode
	{
		return null;
	}
	get Prefix(): string
	{
		return null;
	}
	get PreviousSibling(): XmlNode
	{
		return null;
	}
	set TextContent(value: string)
	{
	}
	get TextContent(): string
	{
		return null;
	}
	get InnerText(): string
	{
		return null;
	}
	get OuterXml(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlNode, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlNodeEvents, listener: () => void): void;
	new AddEventListener(type: XmlNodeEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlNodeEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void;
	new AddEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlNodeEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	AppendChild(node: XmlNode): XmlNode
	{
		return null;
	}
	CloneNode(): XmlNode;
	CloneNode(deep: boolean): XmlNode;
	CloneNode(deep?: boolean): XmlNode
	{
		if (arguments.length === 0)
		{
			return this.CloneNode_0();
		}
		return this.CloneNode_1(deep);
	}
	private CloneNode_0(): XmlNode
	{
		return null;
	}
	private CloneNode_1(deep: boolean): XmlNode
	{
		return null;
	}
	CompareDocumentPosition(other: XmlNode): DocumentPosition
	{
		return <DocumentPosition>0;
	}
	Contains(other: XmlNode): boolean
	{
		return false;
	}
	GetUserData(key: string): any
	{
		return null;
	}
	HasAttributes(): boolean
	{
		return false;
	}
	HasChildNodes(): boolean
	{
		return false;
	}
	InsertBefore(node: XmlNode, child: XmlNode): XmlNode
	{
		return null;
	}
	IsDefaultNamespace(namespace: string): boolean
	{
		return false;
	}
	IsEqualNode(node: XmlNode): boolean
	{
		return false;
	}
	LookupNamespaceURI(prefix: string): string
	{
		return null;
	}
	LookupPrefix(namespace: string): string
	{
		return null;
	}
	Normalize(): void
	{
	}
	RemoveChild(child: XmlNode): XmlNode
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: XmlNode, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ReplaceChild(node: XmlNode, child: XmlNode): XmlNode
	{
		return null;
	}
}
class XmlElement extends XmlNode implements IGeometryUtils
{
	get Attributes(): AttributeCollection
	{
		return null;
	}
	get ChildElementCount(): number
	{
		return 0;
	}
	get Children(): XmlElementCollection
	{
		return null;
	}
	get ClassList(): TokenList
	{
		return null;
	}
	get ClientHeight(): number
	{
		return 0;
	}
	get ClientLeft(): number
	{
		return 0;
	}
	get ClientTop(): number
	{
		return 0;
	}
	get ClientWidth(): number
	{
		return 0;
	}
	get FirstElementChild(): XmlElement
	{
		return null;
	}
	set Id(value: string)
	{
	}
	get Id(): string
	{
		return null;
	}
	set InnerHTML(value: string)
	{
	}
	get InnerHTML(): string
	{
		return null;
	}
	get LastElementChild(): XmlElement
	{
		return null;
	}
	get NextElementSibling(): XmlElement
	{
		return null;
	}
	set OnWheel(value: (event: Event) => void)
	{
	}
	get OnWheel(): (event: Event) => void
	{
		return null;
	}
	set OuterHTML(value: string)
	{
	}
	get OuterHTML(): string
	{
		return null;
	}
	get PreviousElementSibling(): XmlElement
	{
		return null;
	}
	get ScrollHeight(): number
	{
		return 0;
	}
	set ScrollLeft(value: number)
	{
	}
	get ScrollLeft(): number
	{
		return 0;
	}
	get ScrollLeftMax(): number
	{
		return 0;
	}
	set ScrollTop(value: number)
	{
	}
	get ScrollTop(): number
	{
		return 0;
	}
	get ScrollTopMax(): number
	{
		return 0;
	}
	get ScrollWidth(): number
	{
		return 0;
	}
	get ShadowRoot(): ShadowRoot
	{
		return null;
	}
	get TagName(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlElementEvents, listener: () => void): void;
	new AddEventListener(type: XmlElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void): void;
	new AddEventListener(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlElementEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMPoint
	{
		if (arguments.length === 2 && (point === null || point instanceof DOMPointInit) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertPointFromNode_0(point, from);
		}
		return this.ConvertPointFromNode_1(point, from, options);
	}
	private ConvertPointFromNode_0(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint
	{
		return null;
	}
	private ConvertPointFromNode_1(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint
	{
		return null;
	}
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (quad === null || quad instanceof DOMQuad) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertQuadFromNode_0(quad, from);
		}
		return this.ConvertQuadFromNode_1(quad, from, options);
	}
	private ConvertQuadFromNode_0(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertQuadFromNode_1(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (rect === null || rect instanceof DOMRectReadOnly) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertRectFromNode_0(rect, from);
		}
		return this.ConvertRectFromNode_1(rect, from, options);
	}
	private ConvertRectFromNode_0(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertRectFromNode_1(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	CreateShadowRoot(): ShadowRoot
	{
		return null;
	}
	GetAttribute(name: string): string
	{
		return null;
	}
	GetAttributeNode(name: string): XmlAttribute
	{
		return null;
	}
	GetAttributeNodeNS(namespaceURI: string, localName: string): XmlAttribute
	{
		return null;
	}
	GetAttributeNS(namespace: string, localName: string): string
	{
		return null;
	}
	GetBoundingClientRect(): DOMRect
	{
		return null;
	}
	GetBoxQuads(): DOMQuad[];
	GetBoxQuads(options: BoxQuadOptions): DOMQuad[];
	GetBoxQuads(options?: BoxQuadOptions): DOMQuad[]
	{
		if (arguments.length === 0)
		{
			return this.GetBoxQuads_0();
		}
		return this.GetBoxQuads_1(options);
	}
	private GetBoxQuads_0(): DOMQuad[]
	{
		return null;
	}
	private GetBoxQuads_1(options: BoxQuadOptions): DOMQuad[]
	{
		return null;
	}
	GetClientRects(): DOMRectList
	{
		return null;
	}
	GetElementsByClassName(classNames: string): XmlElementCollection
	{
		return null;
	}
	GetElementsByTagName(localName: string): XmlElementCollection
	{
		return null;
	}
	GetElementsByTagNameNS(namespace: string, localName: string): XmlElementCollection
	{
		return null;
	}
	HasAttribute(name: string): boolean
	{
		return false;
	}
	HasAttributeNS(namespace: string, localName: string): boolean
	{
		return false;
	}
	InsertAdjacentHTML(position: string, text: string): void
	{
	}
	QuerySelector(selectors: string): XmlElement
	{
		return null;
	}
	QuerySelectorAll(selectors: string): XmlNodeList
	{
		return null;
	}
	ReleaseCapture(): void
	{
	}
	Remove(): void
	{
	}
	RemoveAttribute(name: string): void
	{
	}
	RemoveAttributeNode(oldAttr: XmlAttribute): XmlAttribute
	{
		return null;
	}
	RemoveAttributeNS(namespace: string, localName: string): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlElementEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void): void;
	new RemoveEventListener(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlElementEvents, listener: (target: XmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ScrollIntoView(): void;
	ScrollIntoView(top: boolean): void;
	ScrollIntoView(top?: boolean): void
	{
		if (arguments.length === 0)
		{
			this.ScrollIntoView_0();
			return;
		}
		this.ScrollIntoView_1(top);
	}
	private ScrollIntoView_0(): void
	{
	}
	private ScrollIntoView_1(top: boolean): void
	{
	}
	SetAttribute(name: string, value: string): void
	{
	}
	SetAttributeNode(newAttr: XmlAttribute): XmlAttribute
	{
		return null;
	}
	SetAttributeNodeNS(newAttr: XmlAttribute): XmlAttribute
	{
		return null;
	}
	SetAttributeNS(namespace: string, name: string, value: string): void
	{
	}
	SetCapture(): void;
	SetCapture(retargetToElement: boolean): void;
	SetCapture(retargetToElement?: boolean): void
	{
		if (arguments.length === 0)
		{
			this.SetCapture_0();
			return;
		}
		this.SetCapture_1(retargetToElement);
	}
	private SetCapture_0(): void
	{
	}
	private SetCapture_1(retargetToElement: boolean): void
	{
	}
}
class Element extends XmlElement
{
	set AccessKey(value: string)
	{
	}
	get AccessKey(): string
	{
		return null;
	}
	get AccessKeyLabel(): string
	{
		return null;
	}
	set ClassName(value: string)
	{
	}
	get ClassName(): string
	{
		return null;
	}
	set ContentEditable(value: string)
	{
	}
	get ContentEditable(): string
	{
		return null;
	}
	get ContextMenu(): MenuElement
	{
		return null;
	}
	get Dataset(): DOMStringMap
	{
		return null;
	}
	set Dir(value: string)
	{
	}
	get Dir(): string
	{
		return null;
	}
	set Draggable(value: boolean)
	{
	}
	get Draggable(): boolean
	{
		return false;
	}
	set Hidden(value: boolean)
	{
	}
	get Hidden(): boolean
	{
		return false;
	}
	get IsContentEditable(): boolean
	{
		return false;
	}
	set ItemId(value: string)
	{
	}
	get ItemId(): string
	{
		return null;
	}
	get ItemProp(): DOMSettableTokenList
	{
		return null;
	}
	get ItemRef(): DOMSettableTokenList
	{
		return null;
	}
	set ItemScope(value: boolean)
	{
	}
	get ItemScope(): boolean
	{
		return false;
	}
	get ItemType(): DOMSettableTokenList
	{
		return null;
	}
	set ItemValue(value: any)
	{
	}
	get ItemValue(): any
	{
		return null;
	}
	set Lang(value: string)
	{
	}
	get Lang(): string
	{
		return null;
	}
	get OffsetHeight(): number
	{
		return 0;
	}
	get OffsetLeft(): number
	{
		return 0;
	}
	get OffsetParent(): Element
	{
		return null;
	}
	get OffsetTop(): number
	{
		return 0;
	}
	get OffsetWidth(): number
	{
		return 0;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnBlur(value: (event: Event) => void)
	{
	}
	get OnBlur(): (event: Event) => void
	{
		return null;
	}
	set OnCanplay(value: (event: Event) => void)
	{
	}
	get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	set OnChange(value: (event: Event) => void)
	{
	}
	get OnChange(): (event: Event) => void
	{
		return null;
	}
	set OnClick(value: (event: Event) => void)
	{
	}
	get OnClick(): (event: Event) => void
	{
		return null;
	}
	set OnContextmenu(value: (event: Event) => void)
	{
	}
	get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	set OnCopy(value: (event: Event) => void)
	{
	}
	get OnCopy(): (event: Event) => void
	{
		return null;
	}
	set OnCut(value: (event: Event) => void)
	{
	}
	get OnCut(): (event: Event) => void
	{
		return null;
	}
	set OnDblclick(value: (event: Event) => void)
	{
	}
	get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	set OnDrag(value: (event: Event) => void)
	{
	}
	get OnDrag(): (event: Event) => void
	{
		return null;
	}
	set OnDragend(value: (event: Event) => void)
	{
	}
	get OnDragend(): (event: Event) => void
	{
		return null;
	}
	set OnDragenter(value: (event: Event) => void)
	{
	}
	get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	set OnDragleave(value: (event: Event) => void)
	{
	}
	get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	set OnDragover(value: (event: Event) => void)
	{
	}
	get OnDragover(): (event: Event) => void
	{
		return null;
	}
	set OnDragstart(value: (event: Event) => void)
	{
	}
	get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	set OnDrop(value: (event: Event) => void)
	{
	}
	get OnDrop(): (event: Event) => void
	{
		return null;
	}
	set OnDurationchange(value: (event: Event) => void)
	{
	}
	get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	set OnEmptied(value: (event: Event) => void)
	{
	}
	get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnFocus(value: (event: Event) => void)
	{
	}
	get OnFocus(): (event: Event) => void
	{
		return null;
	}
	set OnInput(value: (event: Event) => void)
	{
	}
	get OnInput(): (event: Event) => void
	{
		return null;
	}
	set OnInvalid(value: (event: Event) => void)
	{
	}
	get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	set OnKeydown(value: (event: Event) => void)
	{
	}
	get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	set OnKeypress(value: (event: Event) => void)
	{
	}
	get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	set OnKeyup(value: (event: Event) => void)
	{
	}
	get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadeddata(value: (event: Event) => void)
	{
	}
	get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnMousedown(value: (event: Event) => void)
	{
	}
	get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	set OnMouseenter(value: (event: Event) => void)
	{
	}
	get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	set OnMouseleave(value: (event: Event) => void)
	{
	}
	get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	set OnMousemove(value: (event: Event) => void)
	{
	}
	get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	set OnMouseout(value: (event: Event) => void)
	{
	}
	get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	set OnMouseover(value: (event: Event) => void)
	{
	}
	get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	set OnMouseup(value: (event: Event) => void)
	{
	}
	get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	set OnPaste(value: (event: Event) => void)
	{
	}
	get OnPaste(): (event: Event) => void
	{
		return null;
	}
	set OnPause(value: (event: Event) => void)
	{
	}
	get OnPause(): (event: Event) => void
	{
		return null;
	}
	set OnPlay(value: (event: Event) => void)
	{
	}
	get OnPlay(): (event: Event) => void
	{
		return null;
	}
	set OnPlaying(value: (event: Event) => void)
	{
	}
	get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	set OnPointercancel(value: (event: Event) => void)
	{
	}
	get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	set OnPointerdown(value: (event: Event) => void)
	{
	}
	get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	set OnPointerenter(value: (event: Event) => void)
	{
	}
	get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	set OnPointerleave(value: (event: Event) => void)
	{
	}
	get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	set OnPointermove(value: (event: Event) => void)
	{
	}
	get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	set OnPointerout(value: (event: Event) => void)
	{
	}
	get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	set OnPointerover(value: (event: Event) => void)
	{
	}
	get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	set OnPointerup(value: (event: Event) => void)
	{
	}
	get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnRatechange(value: (event: Event) => void)
	{
	}
	get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	set OnReset(value: (event: Event) => void)
	{
	}
	get OnReset(): (event: Event) => void
	{
		return null;
	}
	set OnScroll(value: (event: Event) => void)
	{
	}
	get OnScroll(): (event: Event) => void
	{
		return null;
	}
	set OnSeeked(value: (event: Event) => void)
	{
	}
	get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	set OnSeeking(value: (event: Event) => void)
	{
	}
	get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	set OnSelect(value: (event: Event) => void)
	{
	}
	get OnSelect(): (event: Event) => void
	{
		return null;
	}
	set OnShow(value: (event: Event) => void)
	{
	}
	get OnShow(): (event: Event) => void
	{
		return null;
	}
	set OnStalled(value: (event: Event) => void)
	{
	}
	get OnStalled(): (event: Event) => void
	{
		return null;
	}
	set OnSubmit(value: (event: Event) => void)
	{
	}
	get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	set OnSuspend(value: (event: Event) => void)
	{
	}
	get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	set OnTimeupdate(value: (event: Event) => void)
	{
	}
	get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	set OnTouchcancel(value: (event: Event) => void)
	{
	}
	get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	set OnTouchend(value: (event: Event) => void)
	{
	}
	get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	set OnTouchenter(value: (event: Event) => void)
	{
	}
	get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	set OnTouchleave(value: (event: Event) => void)
	{
	}
	get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	set OnTouchmove(value: (event: Event) => void)
	{
	}
	get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	set OnTouchstart(value: (event: Event) => void)
	{
	}
	get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	set OnVolumechange(value: (event: Event) => void)
	{
	}
	get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	set OnWaiting(value: (event: Event) => void)
	{
	}
	get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	set Scrollgrab(value: boolean)
	{
	}
	get Scrollgrab(): boolean
	{
		return false;
	}
	set Spellcheck(value: boolean)
	{
	}
	get Spellcheck(): boolean
	{
		return false;
	}
	get Style(): Style
	{
		return null;
	}
	set TabIndex(value: number)
	{
	}
	get TabIndex(): number
	{
		return 0;
	}
	set Title(value: string)
	{
	}
	get Title(): string
	{
		return null;
	}
	ID: string = null;
	new get Children(): ElementCollection
	{
		return null;
	}
	new get FirstElementChild(): Element
	{
		return null;
	}
	new get LastElementChild(): Element
	{
		return null;
	}
	new get NextElementSibling(): Element
	{
		return null;
	}
	new get ParentElement(): Element
	{
		return null;
	}
	new get PreviousElementSibling(): Element
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ElementEvents, listener: () => void): void;
	AddEventListener(type: ElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ElementEvents, listener: (target: Element, event: Event) => void): void;
	AddEventListener(type: ElementEvents, listener: (target: Element, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ElementEvents, listener: IEventListener): void;
	AddEventListener(type: ElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: Element, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: Element, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ElementEvents, listener: (target: Element, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ElementEvents, listener: (target: Element, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: Element, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: Element, event: Event) => void, capture: boolean): void
	{
	}
	Blur(): void
	{
	}
	Click(): void
	{
	}
	Focus(): void
	{
	}
	RemoveEventListener(type: ElementEvents, listener: () => void): void;
	RemoveEventListener(type: ElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ElementEvents, listener: (target: Element, event: Event) => void): void;
	RemoveEventListener(type: ElementEvents, listener: (target: Element, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: Element, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: Element, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ElementEvents, listener: (target: Element, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ElementEvents, listener: (target: Element, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: Element, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: Element, event: Event) => void, capture: boolean): void
	{
	}
	As<TElement>(): TElement
	{
		return <TElement>(<any>null);
	}
	AppendChild(element: Element): Element
	{
		return null;
	}
	new CloneNode(): Element;
	new CloneNode(deep: boolean): Element;
	new CloneNode(deep?: boolean): Element
	{
		if (arguments.length === 0)
		{
			return this.CloneNode_0();
		}
		return this.CloneNode_1(deep);
	}
	private new CloneNode_0(): Element
	{
		return null;
	}
	private new CloneNode_1(deep: boolean): Element
	{
		return null;
	}
	new GetElementsByClassName(classNames: string): ElementCollection
	{
		return null;
	}
	new GetElementsByTagName(localName: string): ElementCollection
	{
		return null;
	}
	new GetElementsByTagNameNS(namespace: string, localName: string): ElementCollection
	{
		return null;
	}
	InsertBefore(node: Element, child: Element): Element
	{
		return null;
	}
	new QuerySelector(selectors: string): Element
	{
		return null;
	}
	new QuerySelectorAll(selectors: string): ElementNodeList
	{
		return null;
	}
	RemoveChild(element: Element): Element
	{
		return null;
	}
}
class AnchorElement extends Element
{
	set Charset(value: string)
	{
	}
	get Charset(): string
	{
		return null;
	}
	set Coords(value: string)
	{
	}
	get Coords(): string
	{
		return null;
	}
	set Download(value: string)
	{
	}
	get Download(): string
	{
		return null;
	}
	set Hash(value: string)
	{
	}
	get Hash(): string
	{
		return null;
	}
	set Host(value: string)
	{
	}
	get Host(): string
	{
		return null;
	}
	set Hostname(value: string)
	{
	}
	get Hostname(): string
	{
		return null;
	}
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	set Hreflang(value: string)
	{
	}
	get Hreflang(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Origin(): string
	{
		return null;
	}
	set Password(value: string)
	{
	}
	get Password(): string
	{
		return null;
	}
	set Pathname(value: string)
	{
	}
	get Pathname(): string
	{
		return null;
	}
	set Ping(value: string)
	{
	}
	get Ping(): string
	{
		return null;
	}
	set Port(value: string)
	{
	}
	get Port(): string
	{
		return null;
	}
	set Protocol(value: string)
	{
	}
	get Protocol(): string
	{
		return null;
	}
	set Rel(value: string)
	{
	}
	get Rel(): string
	{
		return null;
	}
	get RelList(): TokenList
	{
		return null;
	}
	set Rev(value: string)
	{
	}
	get Rev(): string
	{
		return null;
	}
	set Search(value: string)
	{
	}
	get Search(): string
	{
		return null;
	}
	set SearchParams(value: URLSearchParams)
	{
	}
	get SearchParams(): URLSearchParams
	{
		return null;
	}
	set Shape(value: string)
	{
	}
	get Shape(): string
	{
		return null;
	}
	set Target(value: string)
	{
	}
	get Target(): string
	{
		return null;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set Username(value: string)
	{
	}
	get Username(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AnchorElementEvents, listener: () => void): void;
	AddEventListener(type: AnchorElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AnchorElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AnchorElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void): void;
	AddEventListener(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AnchorElementEvents, listener: IEventListener): void;
	AddEventListener(type: AnchorElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AnchorElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AnchorElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AnchorElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AnchorElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AnchorElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AnchorElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AnchorElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AnchorElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AnchorElementEvents, listener: () => void): void;
	RemoveEventListener(type: AnchorElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AnchorElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AnchorElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void): void;
	RemoveEventListener(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AnchorElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: AnchorElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AnchorElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AnchorElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AnchorElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AnchorElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AnchorElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AnchorElementEvents, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AnchorElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AnchorElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AnchorElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AnchorElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum AnchorElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Event extends NObject
{
	static ALT_MASK: number = 1;
	static AT_TARGET: number = 2;
	static BUBBLING_PHASE: number = 3;
	static CAPTURING_PHASE: number = 1;
	static CONTROL_MASK: number = 2;
	static META_MASK: number = 8;
	static NONE: number = 0;
	static SHIFT_MASK: number = 4;
	get Bubbles(): boolean
	{
		return false;
	}
	get Cancelable(): boolean
	{
		return false;
	}
	get CurrentTarget(): EventTarget
	{
		return null;
	}
	get DefaultPrevented(): boolean
	{
		return false;
	}
	get EventPhase(): EventPhase
	{
		return EventPhase.None;
	}
	get ExplicitOriginalTarget(): EventTarget
	{
		return null;
	}
	get IsTrusted(): boolean
	{
		return false;
	}
	get OriginalTarget(): EventTarget
	{
		return null;
	}
	get Target(): EventTarget
	{
		return null;
	}
	get TimeStamp(): number
	{
		return 0;
	}
	get Type(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: EventInit);
	constructor(type?: string, eventInitDict?: EventInit)
	{
		super();
		if (arguments.length === 0)
		{
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			this.constructor_1(type);
			return;
		}
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: EventInit): void
	{
	}
	GetPreventDefault(): boolean
	{
		return false;
	}
	InitEvent(type: string, bubbles: boolean, cancelable: boolean): void
	{
	}
	PreventDefault(): void
	{
	}
	StopImmediatePropagation(): void
	{
	}
	StopPropagation(): void
	{
	}
}
class AnimationEvent extends Event
{
	get AnimationName(): string
	{
		return null;
	}
	get ElapsedTime(): number
	{
		return 0.0;
	}
	get PseudoElement(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: AnimationEventInit);
	constructor(type?: string, eventInitDict?: AnimationEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: AnimationEventInit): void
	{
	}
}
class EventInit extends NObject
{
	Bubbles: boolean = false;
	Cancelable: boolean = false;
	constructor()
	{
		super();
	}
}
class AnimationEventInit extends EventInit
{
	AnimationName: string = null;
	ElapsedTime: number = 0;
	PseudoElement: string = null;
	constructor()
	{
		super();
	}
}
class AppletElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Alt(value: string)
	{
	}
	get Alt(): string
	{
		return null;
	}
	set Archive(value: string)
	{
	}
	get Archive(): string
	{
		return null;
	}
	set Code(value: string)
	{
	}
	get Code(): string
	{
		return null;
	}
	set CodeBase(value: string)
	{
	}
	get CodeBase(): string
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set Hspace(value: number)
	{
	}
	get Hspace(): number
	{
		return 0;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Object(value: string)
	{
	}
	get Object(): string
	{
		return null;
	}
	set Vspace(value: number)
	{
	}
	get Vspace(): number
	{
		return 0;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AppletElementEvents, listener: () => void): void;
	AddEventListener(type: AppletElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AppletElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AppletElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void): void;
	AddEventListener(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AppletElementEvents, listener: IEventListener): void;
	AddEventListener(type: AppletElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AppletElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AppletElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AppletElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AppletElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AppletElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AppletElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AppletElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AppletElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AppletElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AppletElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AppletElementEvents, listener: () => void): void;
	RemoveEventListener(type: AppletElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AppletElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AppletElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void): void;
	RemoveEventListener(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AppletElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: AppletElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AppletElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AppletElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AppletElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AppletElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AppletElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AppletElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AppletElementEvents, listener: (target: AppletElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AppletElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AppletElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AppletElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AppletElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum AppletElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class AreaElement extends Element
{
	set Alt(value: string)
	{
	}
	get Alt(): string
	{
		return null;
	}
	set Coords(value: string)
	{
	}
	get Coords(): string
	{
		return null;
	}
	set Download(value: string)
	{
	}
	get Download(): string
	{
		return null;
	}
	set Hash(value: string)
	{
	}
	get Hash(): string
	{
		return null;
	}
	set Host(value: string)
	{
	}
	get Host(): string
	{
		return null;
	}
	set Hostname(value: string)
	{
	}
	get Hostname(): string
	{
		return null;
	}
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	set NoHref(value: boolean)
	{
	}
	get NoHref(): boolean
	{
		return false;
	}
	get Origin(): string
	{
		return null;
	}
	set Password(value: string)
	{
	}
	get Password(): string
	{
		return null;
	}
	set Pathname(value: string)
	{
	}
	get Pathname(): string
	{
		return null;
	}
	set Ping(value: string)
	{
	}
	get Ping(): string
	{
		return null;
	}
	set Port(value: string)
	{
	}
	get Port(): string
	{
		return null;
	}
	set Protocol(value: string)
	{
	}
	get Protocol(): string
	{
		return null;
	}
	set Rel(value: string)
	{
	}
	get Rel(): string
	{
		return null;
	}
	get RelList(): TokenList
	{
		return null;
	}
	set Search(value: string)
	{
	}
	get Search(): string
	{
		return null;
	}
	set SearchParams(value: URLSearchParams)
	{
	}
	get SearchParams(): URLSearchParams
	{
		return null;
	}
	set Shape(value: string)
	{
	}
	get Shape(): string
	{
		return null;
	}
	set Target(value: string)
	{
	}
	get Target(): string
	{
		return null;
	}
	set Username(value: string)
	{
	}
	get Username(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AreaElementEvents, listener: () => void): void;
	AddEventListener(type: AreaElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AreaElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AreaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void): void;
	AddEventListener(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AreaElementEvents, listener: IEventListener): void;
	AddEventListener(type: AreaElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AreaElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AreaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AreaElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AreaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AreaElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AreaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AreaElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AreaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AreaElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AreaElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AreaElementEvents, listener: () => void): void;
	RemoveEventListener(type: AreaElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AreaElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AreaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void): void;
	RemoveEventListener(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AreaElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: AreaElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AreaElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AreaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AreaElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AreaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AreaElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AreaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AreaElementEvents, listener: (target: AreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AreaElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AreaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AreaElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AreaElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum AreaElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class AttributeCollection extends NObject
{
	get_Item(index: number): XmlAttribute
	{
		return null;
	}
	get_Item(name: string): XmlAttribute
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<XmlAttribute>
	{
		return null;
	}
	GetNamedItem(name: string): XmlAttribute
	{
		return null;
	}
	GetNamedItemNS(namespaceURI: string, localName: string): XmlAttribute
	{
		return null;
	}
	Item(index: number): XmlAttribute
	{
		return null;
	}
	RemoveNamedItem(name: string): XmlAttribute
	{
		return null;
	}
	RemoveNamedItemNS(namespaceURI: string, localName: string): XmlAttribute
	{
		return null;
	}
	SetNamedItem(arg: XmlAttribute): XmlAttribute
	{
		return null;
	}
	SetNamedItemNS(arg: XmlAttribute): XmlAttribute
	{
		return null;
	}
}
class MediaElement extends Element
{
	static HAVE_CURRENT_DATA: number = 2;
	static HAVE_ENOUGH_DATA: number = 4;
	static HAVE_FUTURE_DATA: number = 3;
	static HAVE_METADATA: number = 1;
	static HAVE_NOTHING: number = 0;
	static NETWORK_EMPTY: number = 0;
	static NETWORK_IDLE: number = 1;
	static NETWORK_LOADING: number = 2;
	static NETWORK_NO_SOURCE: number = 3;
	set Autoplay(value: boolean)
	{
	}
	get Autoplay(): boolean
	{
		return false;
	}
	get Buffered(): TimeRanges
	{
		return null;
	}
	set Controls(value: boolean)
	{
	}
	get Controls(): boolean
	{
		return false;
	}
	set CrossOrigin(value: MediaCrossOriginPolicy)
	{
	}
	get CrossOrigin(): MediaCrossOriginPolicy
	{
		return MediaCrossOriginPolicy.Anonymous;
	}
	get CurrentSrc(): string
	{
		return null;
	}
	set CurrentTime(value: number)
	{
	}
	get CurrentTime(): number
	{
		return 0.0;
	}
	set DefaultMuted(value: boolean)
	{
	}
	get DefaultMuted(): boolean
	{
		return false;
	}
	set DefaultPlaybackRate(value: number)
	{
	}
	get DefaultPlaybackRate(): number
	{
		return 0.0;
	}
	get Duration(): number
	{
		return 0.0;
	}
	get Ended(): boolean
	{
		return false;
	}
	get Error(): MediaError
	{
		return null;
	}
	set Loop(value: boolean)
	{
	}
	get Loop(): boolean
	{
		return false;
	}
	set Muted(value: boolean)
	{
	}
	get Muted(): boolean
	{
		return false;
	}
	get NetworkState(): MediaElementNetworkState
	{
		return MediaElementNetworkState.Empty;
	}
	get Paused(): boolean
	{
		return false;
	}
	set PlaybackRate(value: number)
	{
	}
	get PlaybackRate(): number
	{
		return 0.0;
	}
	get Played(): TimeRanges
	{
		return null;
	}
	set Preload(value: MediaPreload)
	{
	}
	get Preload(): MediaPreload
	{
		return MediaPreload.None;
	}
	get ReadyState(): MediaElementReadyState
	{
		return MediaElementReadyState.HaveNothing;
	}
	get Seekable(): TimeRanges
	{
		return null;
	}
	get Seeking(): boolean
	{
		return false;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	get TextTracks(): TextTrackList
	{
		return null;
	}
	set Volume(value: number)
	{
	}
	get Volume(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MediaElementEvents, listener: () => void): void;
	AddEventListener(type: MediaElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void): void;
	AddEventListener(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaElementEvents, listener: IEventListener): void;
	AddEventListener(type: MediaElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaElement, event: Event) => void, capture: boolean): void
	{
	}
	AddTextTrack(kind: TextTrackKind): TextTrack;
	AddTextTrack(kind: TextTrackKind, label: string): TextTrack;
	AddTextTrack(kind: TextTrackKind, label: string, language: string): TextTrack;
	AddTextTrack(kind: TextTrackKind, label?: string, language?: string): TextTrack
	{
		if (arguments.length === 1 && (kind === null || kind.constructor === Number))
		{
			return this.AddTextTrack_0(kind);
		}
		if (arguments.length === 2 && (kind === null || kind.constructor === Number) && (label === null || label.constructor === String))
		{
			return this.AddTextTrack_1(kind, label);
		}
		return this.AddTextTrack_2(kind, label, language);
	}
	private AddTextTrack_0(kind: TextTrackKind): TextTrack
	{
		return null;
	}
	private AddTextTrack_1(kind: TextTrackKind, label: string): TextTrack
	{
		return null;
	}
	private AddTextTrack_2(kind: TextTrackKind, label: string, language: string): TextTrack
	{
		return null;
	}
	CanPlayType(type: string): MediaPlayability
	{
		return MediaPlayability.Probably;
	}
	Load(): void
	{
	}
	Pause(): void
	{
	}
	Play(): void
	{
	}
	RemoveEventListener(type: MediaElementEvents, listener: () => void): void;
	RemoveEventListener(type: MediaElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void): void;
	RemoveEventListener(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaElementEvents, listener: (target: MediaElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaElement, event: Event) => void, capture: boolean): void
	{
	}
}
class AudioElement extends MediaElement
{
	constructor();
	constructor(src: string);
	constructor(src?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(src);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(src: string): void
	{
	}
	AddEventListener(type: AudioElementEvents, listener: () => void): void;
	AddEventListener(type: AudioElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void): void;
	AddEventListener(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioElementEvents, listener: IEventListener): void;
	AddEventListener(type: AudioElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AudioElementEvents, listener: () => void): void;
	RemoveEventListener(type: AudioElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void): void;
	RemoveEventListener(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioElementEvents, listener: (target: AudioElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum AudioElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class BarProp extends NObject
{
	set Visible(value: boolean)
	{
	}
	get Visible(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
}
class BaseElement extends Element
{
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	set Target(value: string)
	{
	}
	get Target(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: BaseElementEvents, listener: () => void): void;
	AddEventListener(type: BaseElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: BaseElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: BaseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void): void;
	AddEventListener(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: BaseElementEvents, listener: IEventListener): void;
	AddEventListener(type: BaseElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: BaseElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: BaseElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: BaseElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: BaseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: BaseElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: BaseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: BaseElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: BaseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: BaseElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: BaseElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: BaseElementEvents, listener: () => void): void;
	RemoveEventListener(type: BaseElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: BaseElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: BaseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void): void;
	RemoveEventListener(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BaseElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: BaseElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: BaseElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: BaseElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: BaseElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: BaseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: BaseElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: BaseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: BaseElementEvents, listener: (target: BaseElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: BaseElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: BaseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: BaseElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: BaseElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum BaseElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class BeforeUnloadEvent extends Event
{
	set ReturnValue(value: string)
	{
	}
	get ReturnValue(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class BodyElement extends Element
{
	set ALink(value: string)
	{
	}
	get ALink(): string
	{
		return null;
	}
	set Background(value: string)
	{
	}
	get Background(): string
	{
		return null;
	}
	set BgColor(value: string)
	{
	}
	get BgColor(): string
	{
		return null;
	}
	set Link(value: string)
	{
	}
	get Link(): string
	{
		return null;
	}
	set OnAfterprint(value: (event: Event) => void)
	{
	}
	get OnAfterprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeprint(value: (event: Event) => void)
	{
	}
	get OnBeforeprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeunload(value: (event: Event) => string)
	{
	}
	get OnBeforeunload(): (event: Event) => string
	{
		return null;
	}
	set OnHashchange(value: (event: Event) => void)
	{
	}
	get OnHashchange(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnOffline(value: (event: Event) => void)
	{
	}
	get OnOffline(): (event: Event) => void
	{
		return null;
	}
	set OnOnline(value: (event: Event) => void)
	{
	}
	get OnOnline(): (event: Event) => void
	{
		return null;
	}
	set OnPagehide(value: (event: Event) => void)
	{
	}
	get OnPagehide(): (event: Event) => void
	{
		return null;
	}
	set OnPageshow(value: (event: Event) => void)
	{
	}
	get OnPageshow(): (event: Event) => void
	{
		return null;
	}
	set OnPopstate(value: (event: Event) => void)
	{
	}
	get OnPopstate(): (event: Event) => void
	{
		return null;
	}
	set OnResize(value: (event: Event) => void)
	{
	}
	get OnResize(): (event: Event) => void
	{
		return null;
	}
	set OnUnload(value: (event: Event) => void)
	{
	}
	get OnUnload(): (event: Event) => void
	{
		return null;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	set VLink(value: string)
	{
	}
	get VLink(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: BodyElementEvents, listener: () => void): void;
	AddEventListener(type: BodyElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: BodyElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: BodyElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void): void;
	AddEventListener(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: BodyElementEvents, listener: IEventListener): void;
	AddEventListener(type: BodyElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: BodyElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: BodyElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: BodyElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: BodyElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: BodyElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: BodyElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: BodyElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: BodyElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: BodyElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: BodyElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: BodyElementEvents, listener: () => void): void;
	RemoveEventListener(type: BodyElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: BodyElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: BodyElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void): void;
	RemoveEventListener(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BodyElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: BodyElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: BodyElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: BodyElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: BodyElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: BodyElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: BodyElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: BodyElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: BodyElementEvents, listener: (target: BodyElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: BodyElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: BodyElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: BodyElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: BodyElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum BodyElementEvents
{
	Abort,
	Afterprint,
	Beforeprint,
	Beforeunload,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Hashchange,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Message,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Offline,
	Online,
	Pagehide,
	Pageshow,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Popstate,
	Progress,
	Ratechange,
	Reset,
	Resize,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Unload,
	Volumechange,
	Waiting,
	Wheel
}
class BoxQuadOptions extends NObject
{
	Box: CSSBoxType = 0;
	RelativeTo: TypeOption<XmlText, Element, DocumentBase> = null;
	constructor()
	{
		super();
	}
}
class BRElement extends Element
{
	set Clear(value: string)
	{
	}
	get Clear(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: BRElementEvents, listener: () => void): void;
	AddEventListener(type: BRElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: BRElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: BRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: BRElementEvents, listener: (target: BRElement, event: Event) => void): void;
	AddEventListener(type: BRElementEvents, listener: (target: BRElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: BRElementEvents, listener: IEventListener): void;
	AddEventListener(type: BRElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: BRElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: BRElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: BRElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: BRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: BRElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: BRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: BRElementEvents, listener: (target: BRElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: BRElementEvents, listener: (target: BRElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: BRElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: BRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: BRElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: BRElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: BRElementEvents, listener: () => void): void;
	RemoveEventListener(type: BRElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: BRElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: BRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BRElementEvents, listener: (target: BRElement, event: Event) => void): void;
	RemoveEventListener(type: BRElementEvents, listener: (target: BRElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BRElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: BRElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: BRElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: BRElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: BRElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: BRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: BRElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: BRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: BRElementEvents, listener: (target: BRElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: BRElementEvents, listener: (target: BRElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: BRElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: BRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: BRElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: BRElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum BRElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ButtonElement extends Element
{
	set Autofocus(value: boolean)
	{
	}
	get Autofocus(): boolean
	{
		return false;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Form(): FormElement
	{
		return null;
	}
	set FormAction(value: string)
	{
	}
	get FormAction(): string
	{
		return null;
	}
	set FormEnctype(value: string)
	{
	}
	get FormEnctype(): string
	{
		return null;
	}
	set FormMethod(value: string)
	{
	}
	get FormMethod(): string
	{
		return null;
	}
	set FormNoValidate(value: boolean)
	{
	}
	get FormNoValidate(): boolean
	{
		return false;
	}
	set FormTarget(value: string)
	{
	}
	get FormTarget(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ButtonElementEvents, listener: () => void): void;
	AddEventListener(type: ButtonElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ButtonElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ButtonElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void): void;
	AddEventListener(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ButtonElementEvents, listener: IEventListener): void;
	AddEventListener(type: ButtonElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ButtonElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ButtonElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ButtonElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ButtonElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ButtonElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ButtonElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ButtonElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ButtonElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	RemoveEventListener(type: ButtonElementEvents, listener: () => void): void;
	RemoveEventListener(type: ButtonElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ButtonElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ButtonElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void): void;
	RemoveEventListener(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ButtonElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ButtonElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ButtonElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ButtonElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ButtonElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ButtonElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ButtonElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ButtonElementEvents, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ButtonElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ButtonElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ButtonElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ButtonElement, event: Event) => void, capture: boolean): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
}
enum ButtonElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class CanvasElement extends Element
{
	set Height(value: number)
	{
	}
	get Height(): number
	{
		return 0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: CanvasElementEvents, listener: () => void): void;
	AddEventListener(type: CanvasElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: CanvasElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: CanvasElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void): void;
	AddEventListener(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: CanvasElementEvents, listener: IEventListener): void;
	AddEventListener(type: CanvasElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: CanvasElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: CanvasElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: CanvasElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: CanvasElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: CanvasElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: CanvasElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: CanvasElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: CanvasElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void
	{
	}
	GetContext(contextId: string): CanvasRenderingContext;
	GetContext(contextId: string, contextOptions: any): CanvasRenderingContext;
	GetContext(contextId: CanvasContextId): CanvasRenderingContext;
	GetContext(contextId: CanvasContextId, contextOptions: any): CanvasRenderingContext;
	GetContext(contextId: any, contextOptions?: any): CanvasRenderingContext
	{
		if (arguments.length === 1 && (contextId === null || contextId.constructor === String))
		{
			return this.GetContext_0(contextId);
		}
		if (arguments.length === 2 && (contextId === null || contextId.constructor === String) && (contextOptions === null || contextOptions.constructor === Object))
		{
			return this.GetContext_1(contextId, contextOptions);
		}
		if (arguments.length === 1 && (contextId === null || contextId.constructor === Number))
		{
			return this.GetContext_2(contextId);
		}
		return this.GetContext_3(contextId, contextOptions);
	}
	private GetContext_0(contextId: string): CanvasRenderingContext
	{
		return null;
	}
	private GetContext_1(contextId: string, contextOptions: any): CanvasRenderingContext
	{
		return null;
	}
	RemoveEventListener(type: CanvasElementEvents, listener: () => void): void;
	RemoveEventListener(type: CanvasElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: CanvasElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: CanvasElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void): void;
	RemoveEventListener(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: CanvasElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: CanvasElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: CanvasElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: CanvasElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: CanvasElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: CanvasElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: CanvasElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: CanvasElementEvents, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: CanvasElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: CanvasElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: CanvasElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: CanvasElement, event: Event) => void, capture: boolean): void
	{
	}
	ToBlob(callback: (arg: Blob) => void): void;
	ToBlob(callback: (arg: Blob) => void, type: string, encoderOptions: any): void;
	ToBlob(callback: (arg: Blob) => void, type?: string, encoderOptions?: any): void
	{
		if (arguments.length === 1)
		{
			this.ToBlob_0(callback);
			return;
		}
		this.ToBlob_1(callback, type, encoderOptions);
	}
	private ToBlob_0(callback: (arg: Blob) => void): void
	{
	}
	private ToBlob_1(callback: (arg: Blob) => void, type: string, encoderOptions: any): void
	{
	}
	ToDataURL(): string;
	ToDataURL(type: string, encoderOptions: any): string;
	ToDataURL(type?: string, encoderOptions?: any): string
	{
		if (arguments.length === 0)
		{
			return this.ToDataURL_0();
		}
		return this.ToDataURL_1(type, encoderOptions);
	}
	private ToDataURL_0(): string
	{
		return null;
	}
	private ToDataURL_1(type: string, encoderOptions: any): string
	{
		return null;
	}
	private GetContext_2(contextId: CanvasContextId): CanvasRenderingContext
	{
		return null;
	}
	private GetContext_3(contextId: CanvasContextId, contextOptions: any): CanvasRenderingContext
	{
		return null;
	}
}
enum CanvasElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class CaretPosition extends NObject
{
	get Offset(): number
	{
		return 0;
	}
	get OffsetNode(): XmlNode
	{
		return null;
	}
	constructor()
	{
		super();
	}
	GetClientRect(): DOMRect
	{
		return null;
	}
}
class ClipboardEvent extends Event
{
	get ClipboardData(): DataTransfer
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: ClipboardEventInit);
	constructor(type?: string, eventInitDict?: ClipboardEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: ClipboardEventInit): void
	{
	}
}
class ClipboardEventInit extends EventInit
{
	Data: string = null;
	DataType: string = null;
	constructor()
	{
		super();
	}
}
class CloseEvent extends Event
{
	get Code(): number
	{
		return 0;
	}
	get Reason(): string
	{
		return null;
	}
	get WasClean(): boolean
	{
		return false;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: CloseEventInit);
	constructor(type?: string, eventInitDict?: CloseEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: CloseEventInit): void
	{
	}
	InitCloseEvent(type: string, canBubble: boolean, cancelable: boolean, wasClean: boolean, code: number, reason: string): void
	{
	}
}
class CloseEventInit extends EventInit
{
	Code: number = 0;
	Reason: string = null;
	WasClean: boolean = false;
	constructor()
	{
		super();
	}
}
class CommandEvent extends Event
{
	get Command(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	InitCommandEvent(type: string, canBubble: boolean, cancelable: boolean, command: string): void
	{
	}
}
class UIEvent extends Event
{
	static SCROLL_PAGE_DOWN: number = 32768;
	static SCROLL_PAGE_UP: number = -32768;
	set CancelBubble(value: boolean)
	{
	}
	get CancelBubble(): boolean
	{
		return false;
	}
	get Detail(): number
	{
		return 0;
	}
	get IsChar(): boolean
	{
		return false;
	}
	get LayerX(): number
	{
		return 0;
	}
	get LayerY(): number
	{
		return 0;
	}
	get PageX(): number
	{
		return 0;
	}
	get PageY(): number
	{
		return 0;
	}
	get RangeOffset(): number
	{
		return 0;
	}
	get RangeParent(): XmlNode
	{
		return null;
	}
	get View(): WindowInstance
	{
		return null;
	}
	get Which(): number
	{
		return 0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: UIEventInit);
	constructor(type?: string, eventInitDict?: UIEventInit)
	{
		super();
		if (arguments.length === 0)
		{
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			this.constructor_1(type);
			return;
		}
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: UIEventInit): void
	{
	}
	InitUIEvent(aType: string, aCanBubble: boolean, aCancelable: boolean, aView: WindowInstance, aDetail: number): void
	{
	}
}
class CompositionEvent extends UIEvent
{
	get Data(): string
	{
		return null;
	}
	get Locale(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	InitCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: WindowInstance, dataArg: string, localeArg: string): void
	{
	}
}
class ContentElement extends Element
{
	set Select(value: string)
	{
	}
	get Select(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ContentElementEvents, listener: () => void): void;
	AddEventListener(type: ContentElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ContentElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ContentElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void): void;
	AddEventListener(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ContentElementEvents, listener: IEventListener): void;
	AddEventListener(type: ContentElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ContentElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ContentElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ContentElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ContentElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ContentElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ContentElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ContentElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ContentElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ContentElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ContentElement, event: Event) => void, capture: boolean): void
	{
	}
	GetDistributedNodes(): XmlNodeList
	{
		return null;
	}
	RemoveEventListener(type: ContentElementEvents, listener: () => void): void;
	RemoveEventListener(type: ContentElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ContentElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ContentElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void): void;
	RemoveEventListener(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ContentElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ContentElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ContentElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ContentElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ContentElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ContentElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ContentElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ContentElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ContentElementEvents, listener: (target: ContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ContentElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ContentElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ContentElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ContentElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ContentElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ConvertCoordinateOptions extends NObject
{
	FromBox: CSSBoxType = 0;
	ToBox: CSSBoxType = 0;
	constructor()
	{
		super();
	}
}
class Counter extends NObject
{
	get Identifier(): string
	{
		return null;
	}
	get ListStyle(): string
	{
		return null;
	}
	get Separator(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class CSS extends NObject
{
	constructor()
	{
		super();
	}
	static Escape(ident: string): string
	{
		return null;
	}
	static Supports(conditionText: string): boolean;
	static Supports(property: string, value: string): boolean;
	static Supports(conditionTextOrProperty: string, value?: string): boolean
	{
		if (arguments.length === 1 && (conditionTextOrProperty === null || conditionTextOrProperty.constructor === String))
		{
			return CSS.Supports_0(conditionTextOrProperty);
		}
		return CSS.Supports_1(conditionTextOrProperty, value);
	}
	private static Supports_0(conditionText: string): boolean
	{
		return false;
	}
	private static Supports_1(property: string, value: string): boolean
	{
		return false;
	}
}
enum CSSBoxType
{
	Margin,
	Border,
	Padding,
	Content
}
class CSSValue extends NObject
{
	static CSS_CUSTOM: number = 3;
	static CSS_INHERIT: number = 0;
	static CSS_PRIMITIVE_VALUE: number = 1;
	static CSS_VALUE_LIST: number = 2;
	set CssText(value: string)
	{
	}
	get CssText(): string
	{
		return null;
	}
	get CssValueType(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class CSSPrimitiveValue extends CSSValue
{
	static CSS_ATTR: number = 22;
	static CSS_CM: number = 6;
	static CSS_COUNTER: number = 23;
	static CSS_DEG: number = 11;
	static CSS_DIMENSION: number = 18;
	static CSS_EMS: number = 3;
	static CSS_EXS: number = 4;
	static CSS_GRAD: number = 13;
	static CSS_HZ: number = 16;
	static CSS_IDENT: number = 21;
	static CSS_IN: number = 8;
	static CSS_KHZ: number = 17;
	static CSS_MM: number = 7;
	static CSS_MS: number = 14;
	static CSS_NUMBER: number = 1;
	static CSS_PC: number = 10;
	static CSS_PERCENTAGE: number = 2;
	static CSS_PT: number = 9;
	static CSS_PX: number = 5;
	static CSS_RAD: number = 12;
	static CSS_RECT: number = 24;
	static CSS_RGBCOLOR: number = 25;
	static CSS_S: number = 15;
	static CSS_STRING: number = 19;
	static CSS_UNKNOWN: number = 0;
	static CSS_URI: number = 20;
	get PrimitiveType(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetCounterValue(): Counter
	{
		return null;
	}
	GetFloatValue(unitType: number): number
	{
		return 0.0;
	}
	GetRectValue(): Rect
	{
		return null;
	}
	GetRGBColorValue(): RGBColor
	{
		return null;
	}
	GetStringValue(): string
	{
		return null;
	}
	SetFloatValue(unitType: number, floatValue: number): void
	{
	}
	SetStringValue(stringType: number, stringValue: string): void
	{
	}
}
class CSSRule extends NObject
{
	static CHARSET_RULE: number = 2;
	static FONT_FACE_RULE: number = 5;
	static IMPORT_RULE: number = 3;
	static MEDIA_RULE: number = 4;
	static NAMESPACE_RULE: number = 10;
	static PAGE_RULE: number = 6;
	static STYLE_RULE: number = 1;
	set CssText(value: string)
	{
	}
	get CssText(): string
	{
		return null;
	}
	get ParentRule(): CSSRule
	{
		return null;
	}
	get ParentStyleSheet(): CSSStyleSheet
	{
		return null;
	}
	get Type(): CSSRuleType
	{
		return <CSSRuleType>0;
	}
	constructor()
	{
		super();
	}
}
enum CSSRuleType
{
	Charset = 2,
	FontFace = 5,
	Import = 3,
	Media,
	Namespace = 10,
	Page = 6,
	Style = 1
}
class StyleSheet extends NObject
{
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Href(): string
	{
		return null;
	}
	get Media(): MediaList
	{
		return null;
	}
	get OwnerNode(): XmlNode
	{
		return null;
	}
	get ParentStyleSheet(): StyleSheet
	{
		return null;
	}
	get Title(): string
	{
		return null;
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class CSSStyleSheet extends StyleSheet
{
	get CssRules(): CSSRule[]
	{
		return null;
	}
	get OwnerRule(): CSSRule
	{
		return null;
	}
	constructor()
	{
		super();
	}
	DeleteRule(index: number): void
	{
	}
	InsertRule(rule: string, index: number): number
	{
		return 0;
	}
}
class CSSValueList extends CSSValue
{
	get_Item(index: number): CSSValue
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<CSSValue>
	{
		return null;
	}
	Item(index: number): CSSValue
	{
		return null;
	}
}
class CustomEvent extends Event
{
	get Detail(): any
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: CustomEventInit);
	constructor(type?: string, eventInitDict?: CustomEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: CustomEventInit): void
	{
	}
	InitCustomEvent(type: string, canBubble: boolean, cancelable: boolean, detail: any): void
	{
	}
}
class CustomEventInit extends EventInit
{
	Detail: any = null;
	constructor()
	{
		super();
	}
}
class DataElement extends Element
{
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DataElementEvents, listener: () => void): void;
	AddEventListener(type: DataElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DataElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DataElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DataElementEvents, listener: (target: DataElement, event: Event) => void): void;
	AddEventListener(type: DataElementEvents, listener: (target: DataElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DataElementEvents, listener: IEventListener): void;
	AddEventListener(type: DataElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DataElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DataElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DataElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DataElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DataElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DataElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DataElementEvents, listener: (target: DataElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DataElementEvents, listener: (target: DataElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DataElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DataElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DataElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DataElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DataElementEvents, listener: () => void): void;
	RemoveEventListener(type: DataElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DataElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DataElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DataElementEvents, listener: (target: DataElement, event: Event) => void): void;
	RemoveEventListener(type: DataElementEvents, listener: (target: DataElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DataElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: DataElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DataElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DataElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DataElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DataElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DataElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DataElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DataElementEvents, listener: (target: DataElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DataElementEvents, listener: (target: DataElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DataElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DataElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DataElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DataElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum DataElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class DataListElement extends Element
{
	get Options(): ElementCollection
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DataListElementEvents, listener: () => void): void;
	AddEventListener(type: DataListElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DataListElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DataListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void): void;
	AddEventListener(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DataListElementEvents, listener: IEventListener): void;
	AddEventListener(type: DataListElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DataListElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DataListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DataListElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DataListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DataListElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DataListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DataListElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DataListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DataListElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DataListElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DataListElementEvents, listener: () => void): void;
	RemoveEventListener(type: DataListElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DataListElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DataListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void): void;
	RemoveEventListener(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DataListElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: DataListElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DataListElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DataListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DataListElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DataListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DataListElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DataListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DataListElementEvents, listener: (target: DataListElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DataListElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DataListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DataListElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DataListElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum DataListElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class DataTransfer extends NObject
{
	set DropEffect(value: DropEffect)
	{
	}
	get DropEffect(): DropEffect
	{
		return DropEffect.None;
	}
	set EffectAllowed(value: AllowedDropEffect)
	{
	}
	get EffectAllowed(): AllowedDropEffect
	{
		return AllowedDropEffect.None;
	}
	get Files(): FileList
	{
		return null;
	}
	get Types(): DOMStringList
	{
		return null;
	}
	get Items(): DataTransferItemList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddElement(element: Element): void
	{
	}
	ClearData(): void;
	ClearData(format: string): void;
	ClearData(format?: string): void
	{
		if (arguments.length === 0)
		{
			this.ClearData_0();
			return;
		}
		this.ClearData_1(format);
	}
	private ClearData_0(): void
	{
	}
	private ClearData_1(format: string): void
	{
	}
	GetData(format: string): string
	{
		return null;
	}
	SetData(format: string, data: string): void
	{
	}
	SetDragImage(image: Element, x: number, y: number): void
	{
	}
}
class DataTransferItem extends NObject
{
	get Kind(): DataTransferItemKind
	{
		return DataTransferItemKind.String;
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	GetAsFile(): File
	{
		return null;
	}
	GetAsString(callback: (arg: string) => void): void
	{
	}
}
enum DataTransferItemKind
{
	String,
	File
}
class DataTransferItemList extends NObject
{
	get_Item(index: number): DataTransferItem
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Add(data: File): DataTransferItem;
	Add(data: string, type: string): DataTransferItem;
	Add(data: any, type?: string): DataTransferItem
	{
		if (arguments.length === 1 && (data === null || data instanceof File))
		{
			return this.Add_0(data);
		}
		return this.Add_1(data, type);
	}
	private Add_0(data: File): DataTransferItem
	{
		return null;
	}
	private Add_1(data: string, type: string): DataTransferItem
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<DataTransferItem>
	{
		return null;
	}
	Remove(index: number): void
	{
	}
}
class DirectoryElement extends Element
{
	set Compact(value: boolean)
	{
	}
	get Compact(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DirectoryElementEvents, listener: () => void): void;
	AddEventListener(type: DirectoryElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DirectoryElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DirectoryElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void): void;
	AddEventListener(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DirectoryElementEvents, listener: IEventListener): void;
	AddEventListener(type: DirectoryElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DirectoryElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DirectoryElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DirectoryElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DirectoryElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DirectoryElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DirectoryElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DirectoryElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DirectoryElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DirectoryElementEvents, listener: () => void): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: DirectoryElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DirectoryElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DirectoryElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DirectoryElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DirectoryElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DirectoryElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DirectoryElementEvents, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DirectoryElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DirectoryElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DirectoryElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DirectoryElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum DirectoryElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class DivElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DivElementEvents, listener: () => void): void;
	AddEventListener(type: DivElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DivElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DivElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DivElementEvents, listener: (target: DivElement, event: Event) => void): void;
	AddEventListener(type: DivElementEvents, listener: (target: DivElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DivElementEvents, listener: IEventListener): void;
	AddEventListener(type: DivElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DivElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DivElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DivElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DivElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DivElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DivElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DivElementEvents, listener: (target: DivElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DivElementEvents, listener: (target: DivElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DivElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DivElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DivElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DivElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DivElementEvents, listener: () => void): void;
	RemoveEventListener(type: DivElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DivElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DivElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DivElementEvents, listener: (target: DivElement, event: Event) => void): void;
	RemoveEventListener(type: DivElementEvents, listener: (target: DivElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DivElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: DivElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DivElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DivElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DivElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DivElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DivElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DivElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DivElementEvents, listener: (target: DivElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DivElementEvents, listener: (target: DivElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DivElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DivElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DivElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DivElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum DivElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class DListElement extends Element
{
	set Compact(value: boolean)
	{
	}
	get Compact(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DListElementEvents, listener: () => void): void;
	AddEventListener(type: DListElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DListElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DListElementEvents, listener: (target: DListElement, event: Event) => void): void;
	AddEventListener(type: DListElementEvents, listener: (target: DListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DListElementEvents, listener: IEventListener): void;
	AddEventListener(type: DListElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DListElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DListElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DListElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DListElementEvents, listener: (target: DListElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DListElementEvents, listener: (target: DListElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DListElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DListElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DListElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DListElementEvents, listener: () => void): void;
	RemoveEventListener(type: DListElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DListElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DListElementEvents, listener: (target: DListElement, event: Event) => void): void;
	RemoveEventListener(type: DListElementEvents, listener: (target: DListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DListElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: DListElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DListElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DListElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DListElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DListElementEvents, listener: (target: DListElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DListElementEvents, listener: (target: DListElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DListElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DListElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DListElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum DListElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Document extends NObject
{
	static ATTRIBUTE_NODE: number = 2;
	static CDATA_SECTION_NODE: number = 4;
	static COMMENT_NODE: number = 8;
	static DOCUMENT_FRAGMENT_NODE: number = 11;
	static DOCUMENT_NODE: number = 9;
	static DOCUMENT_POSITION_CONTAINED_BY: number = 16;
	static DOCUMENT_POSITION_CONTAINS: number = 8;
	static DOCUMENT_POSITION_DISCONNECTED: number = 1;
	static DOCUMENT_POSITION_FOLLOWING: number = 4;
	static DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number = 32;
	static DOCUMENT_POSITION_PRECEDING: number = 2;
	static DOCUMENT_TYPE_NODE: number = 10;
	static ELEMENT_NODE: number = 1;
	static ENTITY_NODE: number = 6;
	static ENTITY_REFERENCE_NODE: number = 5;
	static NOTATION_NODE: number = 12;
	static PROCESSING_INSTRUCTION_NODE: number = 7;
	static TEXT_NODE: number = 3;
	static set AlinkColor(value: string)
	{
	}
	static get AlinkColor(): string
	{
		return null;
	}
	static get All(): any
	{
		return null;
	}
	static get Anchors(): ElementCollection
	{
		return null;
	}
	static get Applets(): ElementCollection
	{
		return null;
	}
	static get BaseURI(): string
	{
		return null;
	}
	static set BgColor(value: string)
	{
	}
	static get BgColor(): string
	{
		return null;
	}
	static set Body(value: Element)
	{
	}
	static get Body(): Element
	{
		return null;
	}
	static get CharacterSet(): string
	{
		return null;
	}
	static get ChildElementCount(): number
	{
		return 0;
	}
	static get ChildNodes(): XmlNodeList
	{
		return null;
	}
	static get CompatMode(): string
	{
		return null;
	}
	static get ContentType(): string
	{
		return null;
	}
	static set Cookie(value: string)
	{
	}
	static get Cookie(): string
	{
		return null;
	}
	static get DefaultView(): WindowInstance
	{
		return null;
	}
	static set DesignMode(value: string)
	{
	}
	static get DesignMode(): string
	{
		return null;
	}
	static set Dir(value: string)
	{
	}
	static get Dir(): string
	{
		return null;
	}
	static get Doctype(): DocumentType
	{
		return null;
	}
	static get DocumentURI(): string
	{
		return null;
	}
	static set Domain(value: string)
	{
	}
	static get Domain(): string
	{
		return null;
	}
	static get Embeds(): ElementCollection
	{
		return null;
	}
	static set FgColor(value: string)
	{
	}
	static get FgColor(): string
	{
		return null;
	}
	static get FirstChild(): XmlNode
	{
		return null;
	}
	static get Forms(): ElementCollection
	{
		return null;
	}
	static get Head(): HeadElement
	{
		return null;
	}
	static get Hidden(): boolean
	{
		return false;
	}
	static get Images(): ElementCollection
	{
		return null;
	}
	static get Implementation(): DOMImplementation
	{
		return null;
	}
	static get InputEncoding(): string
	{
		return null;
	}
	static get LastChild(): XmlNode
	{
		return null;
	}
	static get LastModified(): string
	{
		return null;
	}
	static get LastStyleSheetSet(): string
	{
		return null;
	}
	static set LinkColor(value: string)
	{
	}
	static get LinkColor(): string
	{
		return null;
	}
	static get Links(): ElementCollection
	{
		return null;
	}
	static get LocalName(): string
	{
		return null;
	}
	static get Location(): Location
	{
		return null;
	}
	static get NamespaceURI(): string
	{
		return null;
	}
	static get NextSibling(): XmlNode
	{
		return null;
	}
	static get NodeName(): string
	{
		return null;
	}
	static get NodeType(): XmlNodeType
	{
		return <XmlNodeType>0;
	}
	static set NodeValue(value: string)
	{
	}
	static get NodeValue(): string
	{
		return null;
	}
	static set OnAbort(value: (event: Event) => void)
	{
	}
	static get OnAbort(): (event: Event) => void
	{
		return null;
	}
	static set OnAfterscriptexecute(value: (event: Event) => void)
	{
	}
	static get OnAfterscriptexecute(): (event: Event) => void
	{
		return null;
	}
	static set OnBeforescriptexecute(value: (event: Event) => void)
	{
	}
	static get OnBeforescriptexecute(): (event: Event) => void
	{
		return null;
	}
	static set OnBlur(value: (event: Event) => void)
	{
	}
	static get OnBlur(): (event: Event) => void
	{
		return null;
	}
	static set OnCanplay(value: (event: Event) => void)
	{
	}
	static get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	static set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	static get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	static set OnChange(value: (event: Event) => void)
	{
	}
	static get OnChange(): (event: Event) => void
	{
		return null;
	}
	static set OnClick(value: (event: Event) => void)
	{
	}
	static get OnClick(): (event: Event) => void
	{
		return null;
	}
	static set OnContextmenu(value: (event: Event) => void)
	{
	}
	static get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	static set OnCopy(value: (event: Event) => void)
	{
	}
	static get OnCopy(): (event: Event) => void
	{
		return null;
	}
	static set OnCut(value: (event: Event) => void)
	{
	}
	static get OnCut(): (event: Event) => void
	{
		return null;
	}
	static set OnDblclick(value: (event: Event) => void)
	{
	}
	static get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	static set OnDrag(value: (event: Event) => void)
	{
	}
	static get OnDrag(): (event: Event) => void
	{
		return null;
	}
	static set OnDragend(value: (event: Event) => void)
	{
	}
	static get OnDragend(): (event: Event) => void
	{
		return null;
	}
	static set OnDragenter(value: (event: Event) => void)
	{
	}
	static get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	static set OnDragleave(value: (event: Event) => void)
	{
	}
	static get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	static set OnDragover(value: (event: Event) => void)
	{
	}
	static get OnDragover(): (event: Event) => void
	{
		return null;
	}
	static set OnDragstart(value: (event: Event) => void)
	{
	}
	static get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	static set OnDrop(value: (event: Event) => void)
	{
	}
	static get OnDrop(): (event: Event) => void
	{
		return null;
	}
	static set OnDurationchange(value: (event: Event) => void)
	{
	}
	static get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	static set OnEmptied(value: (event: Event) => void)
	{
	}
	static get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	static set OnEnded(value: (event: Event) => void)
	{
	}
	static get OnEnded(): (event: Event) => void
	{
		return null;
	}
	static set OnError(value: (event: Event) => void)
	{
	}
	static get OnError(): (event: Event) => void
	{
		return null;
	}
	static set OnFocus(value: (event: Event) => void)
	{
	}
	static get OnFocus(): (event: Event) => void
	{
		return null;
	}
	static set OnInput(value: (event: Event) => void)
	{
	}
	static get OnInput(): (event: Event) => void
	{
		return null;
	}
	static set OnInvalid(value: (event: Event) => void)
	{
	}
	static get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	static set OnKeydown(value: (event: Event) => void)
	{
	}
	static get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	static set OnKeypress(value: (event: Event) => void)
	{
	}
	static get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	static set OnKeyup(value: (event: Event) => void)
	{
	}
	static get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	static set OnLoad(value: (event: Event) => void)
	{
	}
	static get OnLoad(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadeddata(value: (event: Event) => void)
	{
	}
	static get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	static get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadstart(value: (event: Event) => void)
	{
	}
	static get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	static set OnMousedown(value: (event: Event) => void)
	{
	}
	static get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseenter(value: (event: Event) => void)
	{
	}
	static get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseleave(value: (event: Event) => void)
	{
	}
	static get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	static set OnMousemove(value: (event: Event) => void)
	{
	}
	static get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseout(value: (event: Event) => void)
	{
	}
	static get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseover(value: (event: Event) => void)
	{
	}
	static get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseup(value: (event: Event) => void)
	{
	}
	static get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	static set OnPaste(value: (event: Event) => void)
	{
	}
	static get OnPaste(): (event: Event) => void
	{
		return null;
	}
	static set OnPause(value: (event: Event) => void)
	{
	}
	static get OnPause(): (event: Event) => void
	{
		return null;
	}
	static set OnPlay(value: (event: Event) => void)
	{
	}
	static get OnPlay(): (event: Event) => void
	{
		return null;
	}
	static set OnPlaying(value: (event: Event) => void)
	{
	}
	static get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	static set OnPointercancel(value: (event: Event) => void)
	{
	}
	static get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerdown(value: (event: Event) => void)
	{
	}
	static get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerenter(value: (event: Event) => void)
	{
	}
	static get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerleave(value: (event: Event) => void)
	{
	}
	static get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	static set OnPointermove(value: (event: Event) => void)
	{
	}
	static get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerout(value: (event: Event) => void)
	{
	}
	static get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerover(value: (event: Event) => void)
	{
	}
	static get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerup(value: (event: Event) => void)
	{
	}
	static get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	static set OnProgress(value: (event: Event) => void)
	{
	}
	static get OnProgress(): (event: Event) => void
	{
		return null;
	}
	static set OnRatechange(value: (event: Event) => void)
	{
	}
	static get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	static set OnReadystatechange(value: (event: Event) => void)
	{
	}
	static get OnReadystatechange(): (event: Event) => void
	{
		return null;
	}
	static set OnReset(value: (event: Event) => void)
	{
	}
	static get OnReset(): (event: Event) => void
	{
		return null;
	}
	static set OnScroll(value: (event: Event) => void)
	{
	}
	static get OnScroll(): (event: Event) => void
	{
		return null;
	}
	static set OnSeeked(value: (event: Event) => void)
	{
	}
	static get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	static set OnSeeking(value: (event: Event) => void)
	{
	}
	static get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	static set OnSelect(value: (event: Event) => void)
	{
	}
	static get OnSelect(): (event: Event) => void
	{
		return null;
	}
	static set OnShow(value: (event: Event) => void)
	{
	}
	static get OnShow(): (event: Event) => void
	{
		return null;
	}
	static set OnStalled(value: (event: Event) => void)
	{
	}
	static get OnStalled(): (event: Event) => void
	{
		return null;
	}
	static set OnSubmit(value: (event: Event) => void)
	{
	}
	static get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	static set OnSuspend(value: (event: Event) => void)
	{
	}
	static get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	static set OnTimeupdate(value: (event: Event) => void)
	{
	}
	static get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchcancel(value: (event: Event) => void)
	{
	}
	static get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchend(value: (event: Event) => void)
	{
	}
	static get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchenter(value: (event: Event) => void)
	{
	}
	static get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchleave(value: (event: Event) => void)
	{
	}
	static get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchmove(value: (event: Event) => void)
	{
	}
	static get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchstart(value: (event: Event) => void)
	{
	}
	static get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	static set OnVolumechange(value: (event: Event) => void)
	{
	}
	static get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	static set OnWaiting(value: (event: Event) => void)
	{
	}
	static get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	static set OnWheel(value: (event: Event) => void)
	{
	}
	static get OnWheel(): (event: Event) => void
	{
		return null;
	}
	static get OwnerDocument(): DocumentBase
	{
		return null;
	}
	static get ParentNode(): XmlNode
	{
		return null;
	}
	static get Plugins(): ElementCollection
	{
		return null;
	}
	static get PreferredStyleSheetSet(): string
	{
		return null;
	}
	static get Prefix(): string
	{
		return null;
	}
	static get PreviousSibling(): XmlNode
	{
		return null;
	}
	static get ReadyState(): string
	{
		return null;
	}
	static get Referrer(): string
	{
		return null;
	}
	static get Scripts(): ElementCollection
	{
		return null;
	}
	static set SelectedStyleSheetSet(value: string)
	{
	}
	static get SelectedStyleSheetSet(): string
	{
		return null;
	}
	static get StyleSheets(): StyleSheetList
	{
		return null;
	}
	static get StyleSheetSets(): DOMStringList
	{
		return null;
	}
	static set TextContent(value: string)
	{
	}
	static get TextContent(): string
	{
		return null;
	}
	static set Title(value: string)
	{
	}
	static get Title(): string
	{
		return null;
	}
	static get URL(): string
	{
		return null;
	}
	static get VisibilityState(): VisibilityState
	{
		return VisibilityState.Hidden;
	}
	static set VlinkColor(value: string)
	{
	}
	static get VlinkColor(): string
	{
		return null;
	}
	static get ActiveElement(): Element
	{
		return null;
	}
	static get Children(): ElementCollection
	{
		return null;
	}
	static get CurrentScript(): Element
	{
		return null;
	}
	static get DocumentElement(): Element
	{
		return null;
	}
	static get FirstElementChild(): Element
	{
		return null;
	}
	static get LastElementChild(): Element
	{
		return null;
	}
	static get ParentElement(): Element
	{
		return null;
	}
	static AddEventListener(type: DocumentBaseEvents, listener: () => void): void;
	static AddEventListener(type: DocumentBaseEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: DocumentBaseEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void;
	static AddEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: DocumentBaseEvents, listener: IEventListener): void;
	static AddEventListener(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: () => void): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: IEventListener): void;
	static AddEventListener(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: DocumentBase, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: XmlNode, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: XmlNodeEvents, listener: () => void): void;
	static AddEventListener(type: XmlNodeEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: XmlNodeEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void;
	static AddEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: XmlNodeEvents, listener: IEventListener): void;
	static AddEventListener(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: () => void): void;
	static AddEventListener(type: string, listener: () => void, capture: boolean): void;
	static AddEventListener(type: string, listener: () => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: string, listener: (event: Event) => void): void;
	static AddEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: (event: Event) => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: any, listener: any, capture?: boolean, wantsUntrusted?: any): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_8(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_9(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_10(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_11(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_12(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_13(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_14(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_15(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_16(type, listener);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_17(type, listener);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_18(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_19(type, listener, capture);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_20(type, listener, capture);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_21(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_22(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_23(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			Document.AddEventListener_24(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_25(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_26(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_27(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_28(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_29(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_30(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.AddEventListener_31(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_32(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_33(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_34(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			Document.AddEventListener_35(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.AddEventListener_36(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.AddEventListener_37(type, listener, capture);
			return;
		}
		Document.AddEventListener_38(type, listener, capture, wantsUntrusted);
	}
	private static AddEventListener_0(type: DocumentBaseEvents, listener: () => void): void
	{
	}
	private static AddEventListener_1(type: DocumentBaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_2(type: DocumentBaseEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_3(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_4(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private static AddEventListener_5(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_6(type: DocumentBaseEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_7(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_8(type: DocumentInstanceEvents, listener: () => void): void
	{
	}
	private static AddEventListener_9(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_10(type: DocumentInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_11(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_12(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private static AddEventListener_13(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_14(type: DocumentInstanceEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_15(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_16(type: string, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private static AddEventListener_17(type: string, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private static AddEventListener_18(type: string, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private static AddEventListener_19(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_20(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_21(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_22(type: string, listener: IEventListener): void
	{
	}
	private static AddEventListener_23(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_24(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static AddEventListener_25(type: XmlNodeEvents, listener: () => void): void
	{
	}
	private static AddEventListener_26(type: XmlNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_27(type: XmlNodeEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_28(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_29(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private static AddEventListener_30(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_31(type: XmlNodeEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_32(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static AdoptNode(node: XmlNode): XmlNode
	{
		return null;
	}
	static AppendChild(node: XmlNode): XmlNode;
	static AppendChild(element: Element): XmlNode;
	static AppendChild(nodeOrElement: any): XmlNode
	{
		if (arguments.length === 1 && (nodeOrElement === null || nodeOrElement instanceof XmlNode))
		{
			return Document.AppendChild_0(nodeOrElement);
		}
		return Document.AppendChild_1(nodeOrElement);
	}
	private static AppendChild_0(node: XmlNode): XmlNode
	{
		return null;
	}
	static CaptureEvents(): void
	{
	}
	static CaretPositionFromPoint(x: number, y: number): CaretPosition
	{
		return null;
	}
	static Clear(): void
	{
	}
	static CloneNode(): XmlNode;
	static CloneNode(deep: boolean): XmlNode;
	static CloneNode(deep?: boolean): XmlNode
	{
		if (arguments.length === 0)
		{
			return Document.CloneNode_0();
		}
		return Document.CloneNode_1(deep);
	}
	private static CloneNode_0(): XmlNode
	{
		return null;
	}
	private static CloneNode_1(deep: boolean): XmlNode
	{
		return null;
	}
	static Close(): void
	{
	}
	static CompareDocumentPosition(other: XmlNode): DocumentPosition
	{
		return <DocumentPosition>0;
	}
	static Contains(other: XmlNode): boolean
	{
		return false;
	}
	static ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint;
	static ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint;
	static ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMPoint
	{
		if (arguments.length === 2 && (point === null || point instanceof DOMPointInit) && (from === null || from instanceof TypeOption))
		{
			return Document.ConvertPointFromNode_0(point, from);
		}
		return Document.ConvertPointFromNode_1(point, from, options);
	}
	private static ConvertPointFromNode_0(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint
	{
		return null;
	}
	private static ConvertPointFromNode_1(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint
	{
		return null;
	}
	static ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	static ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	static ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (quad === null || quad instanceof DOMQuad) && (from === null || from instanceof TypeOption))
		{
			return Document.ConvertQuadFromNode_0(quad, from);
		}
		return Document.ConvertQuadFromNode_1(quad, from, options);
	}
	private static ConvertQuadFromNode_0(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private static ConvertQuadFromNode_1(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	static ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	static ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	static ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (rect === null || rect instanceof DOMRectReadOnly) && (from === null || from instanceof TypeOption))
		{
			return Document.ConvertRectFromNode_0(rect, from);
		}
		return Document.ConvertRectFromNode_1(rect, from, options);
	}
	private static ConvertRectFromNode_0(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private static ConvertRectFromNode_1(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	static CreateAttribute(name: string): XmlAttribute
	{
		return null;
	}
	static CreateAttributeNS(namespace: string, name: string): XmlAttribute
	{
		return null;
	}
	static CreateCDATASection(data: string): XmlCDataSection
	{
		return null;
	}
	static CreateComment(data: string): XmlComment
	{
		return null;
	}
	static CreateDocumentFragment(): XmlDocumentFragment
	{
		return null;
	}
	static CreateEvent($interface: string): Event
	{
		return null;
	}
	static CreateExpression($expression: string, resolver: XPathNSResolver): XPathExpression
	{
		return null;
	}
	static CreateNodeIterator(root: XmlNode): NodeIterator;
	static CreateNodeIterator(root: XmlNode, whatToShow: NodeFilter): NodeIterator;
	static CreateNodeIterator(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): NodeIterator;
	static CreateNodeIterator(root: XmlNode, whatToShow?: NodeFilter, filter?: INodeFilter): NodeIterator
	{
		if (arguments.length === 1 && (root === null || root instanceof XmlNode))
		{
			return Document.CreateNodeIterator_0(root);
		}
		if (arguments.length === 2 && (root === null || root instanceof XmlNode) && (whatToShow === null || whatToShow.constructor === Number))
		{
			return Document.CreateNodeIterator_1(root, whatToShow);
		}
		return Document.CreateNodeIterator_2(root, whatToShow, filter);
	}
	private static CreateNodeIterator_0(root: XmlNode): NodeIterator
	{
		return null;
	}
	private static CreateNodeIterator_1(root: XmlNode, whatToShow: NodeFilter): NodeIterator
	{
		return null;
	}
	private static CreateNodeIterator_2(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): NodeIterator
	{
		return null;
	}
	static CreateNSResolver(nodeResolver: XmlNode): XPathNSResolver
	{
		return null;
	}
	static CreateProcessingInstruction(target: string, data: string): XmlProcessingInstruction
	{
		return null;
	}
	static CreateRange(): Range
	{
		return null;
	}
	static CreateTextNode(data: string): XmlText
	{
		return null;
	}
	static CreateTouch(): Touch;
	static CreateTouch(view: WindowInstance): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number): Touch;
	static CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number, force: number): Touch;
	static CreateTouch(view?: WindowInstance, target?: EventTarget, identifier?: number, pageX?: number, pageY?: number, screenX?: number, screenY?: number, clientX?: number, clientY?: number, radiusX?: number, radiusY?: number, rotationAngle?: number, force?: number): Touch
	{
		if (arguments.length === 0)
		{
			return Document.CreateTouch_0();
		}
		if (arguments.length === 1 && (view === null || view instanceof WindowInstance))
		{
			return Document.CreateTouch_1(view);
		}
		if (arguments.length === 2 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget))
		{
			return Document.CreateTouch_2(view, target);
		}
		if (arguments.length === 3 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number))
		{
			return Document.CreateTouch_3(view, target, identifier);
		}
		if (arguments.length === 4 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number))
		{
			return Document.CreateTouch_4(view, target, identifier, pageX);
		}
		if (arguments.length === 5 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number))
		{
			return Document.CreateTouch_5(view, target, identifier, pageX, pageY);
		}
		if (arguments.length === 6 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number))
		{
			return Document.CreateTouch_6(view, target, identifier, pageX, pageY, screenX);
		}
		if (arguments.length === 7 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number))
		{
			return Document.CreateTouch_7(view, target, identifier, pageX, pageY, screenX, screenY);
		}
		if (arguments.length === 8 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number))
		{
			return Document.CreateTouch_8(view, target, identifier, pageX, pageY, screenX, screenY, clientX);
		}
		if (arguments.length === 9 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number))
		{
			return Document.CreateTouch_9(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY);
		}
		if (arguments.length === 10 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number))
		{
			return Document.CreateTouch_10(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX);
		}
		if (arguments.length === 11 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number) && (radiusY === null || radiusY.constructor === Number))
		{
			return Document.CreateTouch_11(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY);
		}
		if (arguments.length === 12 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number) && (radiusY === null || radiusY.constructor === Number) && (rotationAngle === null || rotationAngle.constructor === Number))
		{
			return Document.CreateTouch_12(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY, rotationAngle);
		}
		return Document.CreateTouch_13(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY, rotationAngle, force);
	}
	private static CreateTouch_0(): Touch
	{
		return null;
	}
	private static CreateTouch_1(view: WindowInstance): Touch
	{
		return null;
	}
	private static CreateTouch_2(view: WindowInstance, target: EventTarget): Touch
	{
		return null;
	}
	private static CreateTouch_3(view: WindowInstance, target: EventTarget, identifier: number): Touch
	{
		return null;
	}
	private static CreateTouch_4(view: WindowInstance, target: EventTarget, identifier: number, pageX: number): Touch
	{
		return null;
	}
	private static CreateTouch_5(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number): Touch
	{
		return null;
	}
	private static CreateTouch_6(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number): Touch
	{
		return null;
	}
	private static CreateTouch_7(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch
	{
		return null;
	}
	private static CreateTouch_8(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number): Touch
	{
		return null;
	}
	private static CreateTouch_9(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number): Touch
	{
		return null;
	}
	private static CreateTouch_10(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number): Touch
	{
		return null;
	}
	private static CreateTouch_11(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number): Touch
	{
		return null;
	}
	private static CreateTouch_12(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number): Touch
	{
		return null;
	}
	private static CreateTouch_13(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number, force: number): Touch
	{
		return null;
	}
	static CreateTouchList(): TouchList;
	static CreateTouchList(touch: Touch, touches: Touch[]): TouchList;
	static CreateTouchList(touches: Touch[]): TouchList;
	static CreateTouchList(touchOrTouches?: any, touches?: Touch[]): TouchList
	{
		if (arguments.length === 0)
		{
			return Document.CreateTouchList_0();
		}
		if (arguments.length === 2 && (touchOrTouches === null || touchOrTouches instanceof Touch) && (touches === null || touches instanceof Array))
		{
			return Document.CreateTouchList_1(touchOrTouches, touches);
		}
		return Document.CreateTouchList_2(touchOrTouches);
	}
	private static CreateTouchList_0(): TouchList
	{
		return null;
	}
	private static CreateTouchList_1(touch: Touch, touches: Touch[]): TouchList
	{
		return null;
	}
	private static CreateTouchList_2(touches: Touch[]): TouchList
	{
		return null;
	}
	static CreateTreeWalker(root: XmlNode): TreeWalker;
	static CreateTreeWalker(root: XmlNode, whatToShow: NodeFilter): TreeWalker;
	static CreateTreeWalker(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): TreeWalker;
	static CreateTreeWalker(root: XmlNode, whatToShow?: NodeFilter, filter?: INodeFilter): TreeWalker
	{
		if (arguments.length === 1 && (root === null || root instanceof XmlNode))
		{
			return Document.CreateTreeWalker_0(root);
		}
		if (arguments.length === 2 && (root === null || root instanceof XmlNode) && (whatToShow === null || whatToShow.constructor === Number))
		{
			return Document.CreateTreeWalker_1(root, whatToShow);
		}
		return Document.CreateTreeWalker_2(root, whatToShow, filter);
	}
	private static CreateTreeWalker_0(root: XmlNode): TreeWalker
	{
		return null;
	}
	private static CreateTreeWalker_1(root: XmlNode, whatToShow: NodeFilter): TreeWalker
	{
		return null;
	}
	private static CreateTreeWalker_2(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): TreeWalker
	{
		return null;
	}
	static DispatchEvent(event: Event): boolean
	{
		return false;
	}
	static EnableStyleSheetsForSet(name: string): void
	{
	}
	static Evaluate($expression: string, contextNode: XmlNode, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult
	{
		return null;
	}
	static ExecCommand(commandId: string): boolean;
	static ExecCommand(commandId: string, showUI: boolean): boolean;
	static ExecCommand(commandId: string, showUI: boolean, value: string): boolean;
	static ExecCommand(commandId: string, showUI?: boolean, value?: string): boolean
	{
		if (arguments.length === 1 && (commandId === null || commandId.constructor === String))
		{
			return Document.ExecCommand_0(commandId);
		}
		if (arguments.length === 2 && (commandId === null || commandId.constructor === String) && (showUI === null || showUI.constructor === Boolean))
		{
			return Document.ExecCommand_1(commandId, showUI);
		}
		return Document.ExecCommand_2(commandId, showUI, value);
	}
	private static ExecCommand_0(commandId: string): boolean
	{
		return false;
	}
	private static ExecCommand_1(commandId: string, showUI: boolean): boolean
	{
		return false;
	}
	private static ExecCommand_2(commandId: string, showUI: boolean, value: string): boolean
	{
		return false;
	}
	static GetBoxQuads(): DOMQuad[];
	static GetBoxQuads(options: BoxQuadOptions): DOMQuad[];
	static GetBoxQuads(options?: BoxQuadOptions): DOMQuad[]
	{
		if (arguments.length === 0)
		{
			return Document.GetBoxQuads_0();
		}
		return Document.GetBoxQuads_1(options);
	}
	private static GetBoxQuads_0(): DOMQuad[]
	{
		return null;
	}
	private static GetBoxQuads_1(options: BoxQuadOptions): DOMQuad[]
	{
		return null;
	}
	static GetElementsByName(elementName: string): ElementNodeList
	{
		return null;
	}
	static GetItems(): ElementNodeList;
	static GetItems(typeNames: string): ElementNodeList;
	static GetItems(typeNames?: string): ElementNodeList
	{
		if (arguments.length === 0)
		{
			return Document.GetItems_0();
		}
		return Document.GetItems_1(typeNames);
	}
	private static GetItems_0(): ElementNodeList
	{
		return null;
	}
	private static GetItems_1(typeNames: string): ElementNodeList
	{
		return null;
	}
	static GetSelection(): Selection
	{
		return null;
	}
	static GetUserData(key: string): any
	{
		return null;
	}
	static HasAttributes(): boolean
	{
		return false;
	}
	static HasChildNodes(): boolean
	{
		return false;
	}
	static HasFocus(): boolean
	{
		return false;
	}
	static ImportNode(node: XmlNode): XmlNode;
	static ImportNode(node: XmlNode, deep: boolean): XmlNode;
	static ImportNode(node: XmlNode, deep?: boolean): XmlNode
	{
		if (arguments.length === 1 && (node === null || node instanceof XmlNode))
		{
			return Document.ImportNode_0(node);
		}
		return Document.ImportNode_1(node, deep);
	}
	private static ImportNode_0(node: XmlNode): XmlNode
	{
		return null;
	}
	private static ImportNode_1(node: XmlNode, deep: boolean): XmlNode
	{
		return null;
	}
	static InsertBefore(node: XmlNode, child: XmlNode): XmlNode;
	static InsertBefore(node: Element, child: Element): XmlNode;
	static InsertBefore(node: any, child: any): XmlNode
	{
		if (arguments.length === 2 && (node === null || node instanceof XmlNode) && (child === null || child instanceof XmlNode))
		{
			return Document.InsertBefore_0(node, child);
		}
		return Document.InsertBefore_1(node, child);
	}
	private static InsertBefore_0(node: XmlNode, child: XmlNode): XmlNode
	{
		return null;
	}
	static IsDefaultNamespace(namespace: string): boolean
	{
		return false;
	}
	static IsEqualNode(node: XmlNode): boolean
	{
		return false;
	}
	static LookupNamespaceURI(prefix: string): string
	{
		return null;
	}
	static LookupPrefix(namespace: string): string
	{
		return null;
	}
	static Normalize(): void
	{
	}
	static Open(): DocumentBase;
	static Open(type: string): DocumentBase;
	static Open(type: string, replace: string): DocumentBase;
	static Open(url: string, name: string, features: string): DocumentBase;
	static Open(url: string, name: string, features: string, replace: boolean): DocumentBase;
	static Open(typeOrUrl?: string, replaceOrName?: string, features?: string, replace?: boolean): DocumentBase
	{
		if (arguments.length === 0)
		{
			return Document.Open_0();
		}
		if (arguments.length === 1 && (typeOrUrl === null || typeOrUrl.constructor === String))
		{
			return Document.Open_1(typeOrUrl);
		}
		if (arguments.length === 2 && (typeOrUrl === null || typeOrUrl.constructor === String) && (replaceOrName === null || replaceOrName.constructor === String))
		{
			return Document.Open_2(typeOrUrl, replaceOrName);
		}
		if (arguments.length === 3 && (typeOrUrl === null || typeOrUrl.constructor === String) && (replaceOrName === null || replaceOrName.constructor === String) && (features === null || features.constructor === String))
		{
			return Document.Open_3(typeOrUrl, replaceOrName, features);
		}
		return Document.Open_4(typeOrUrl, replaceOrName, features, replace);
	}
	private static Open_0(): DocumentBase
	{
		return null;
	}
	private static Open_1(type: string): DocumentBase
	{
		return null;
	}
	private static Open_2(type: string, replace: string): DocumentBase
	{
		return null;
	}
	private static Open_3(url: string, name: string, features: string): WindowInstance
	{
		return null;
	}
	private static Open_4(url: string, name: string, features: string, replace: boolean): WindowInstance
	{
		return null;
	}
	static QueryCommandEnabled(commandId: string): boolean
	{
		return false;
	}
	static QueryCommandIndeterm(commandId: string): boolean
	{
		return false;
	}
	static QueryCommandState(commandId: string): boolean
	{
		return false;
	}
	static QueryCommandSupported(commandId: string): boolean
	{
		return false;
	}
	static QueryCommandValue(commandId: string): string
	{
		return null;
	}
	static RegisterElement(name: string): any;
	static RegisterElement(name: string, options: ElementRegistrationOptions): any;
	static RegisterElement(name: string, options?: ElementRegistrationOptions): any
	{
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			return Document.RegisterElement_0(name);
		}
		return Document.RegisterElement_1(name, options);
	}
	private static RegisterElement_0(name: string): any
	{
		return null;
	}
	private static RegisterElement_1(name: string, options: ElementRegistrationOptions): any
	{
		return null;
	}
	static ReleaseCapture(): void
	{
	}
	static ReleaseEvents(): void
	{
	}
	static RemoveChild(child: XmlNode): XmlNode;
	static RemoveChild(element: Element): XmlNode;
	static RemoveChild(childOrElement: any): XmlNode
	{
		if (arguments.length === 1 && (childOrElement === null || childOrElement instanceof XmlNode))
		{
			return Document.RemoveChild_0(childOrElement);
		}
		return Document.RemoveChild_1(childOrElement);
	}
	private static RemoveChild_0(child: XmlNode): XmlNode
	{
		return null;
	}
	static RemoveEventListener(type: DocumentBaseEvents, listener: () => void): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: IEventListener): void;
	static RemoveEventListener(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: () => void): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: IEventListener): void;
	static RemoveEventListener(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: DocumentBase, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: XmlNode, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: IEventListener): void;
	static RemoveEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: () => void): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: IEventListener): void;
	static RemoveEventListener(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: string, listener: () => void): void;
	static RemoveEventListener(type: string, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: (event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_8(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_9(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_10(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_11(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_12(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_13(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_14(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_15(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_16(type, listener);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_17(type, listener);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_18(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_19(type, listener, capture);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_20(type, listener, capture);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_21(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_22(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_23(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_24(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_25(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_26(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_27(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_28(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_29(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Document.RemoveEventListener_30(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_31(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_32(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Document.RemoveEventListener_33(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Document.RemoveEventListener_34(type, listener);
			return;
		}
		Document.RemoveEventListener_35(type, listener, capture);
	}
	private static RemoveEventListener_0(type: DocumentBaseEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_1(type: DocumentBaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_2(type: DocumentBaseEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_3(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_4(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private static RemoveEventListener_5(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_6(type: DocumentBaseEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_7(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_8(type: DocumentInstanceEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_9(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_10(type: DocumentInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_11(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_12(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private static RemoveEventListener_13(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_14(type: DocumentInstanceEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_15(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_16(type: string, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private static RemoveEventListener_17(type: string, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private static RemoveEventListener_18(type: string, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private static RemoveEventListener_19(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_20(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_21(type: string, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_22(type: string, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_23(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_24(type: XmlNodeEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_25(type: XmlNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_26(type: XmlNodeEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_27(type: XmlNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_28(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void): void
	{
	}
	private static RemoveEventListener_29(type: XmlNodeEvents, listener: (target: XmlNode, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_30(type: XmlNodeEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_31(type: XmlNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static ReplaceChild(node: XmlNode, child: XmlNode): XmlNode
	{
		return null;
	}
	static Write(text: string[]): void
	{
	}
	static Writeln(text: string[]): void
	{
	}
	private static AddEventListener_33(type: string, listener: () => void): void
	{
	}
	private static AddEventListener_34(type: string, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_35(type: string, listener: () => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static RemoveEventListener_32(type: string, listener: () => void): void
	{
	}
	private static RemoveEventListener_33(type: string, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_36(type: string, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_37(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_38(type: string, listener: (event: Event) => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static RemoveEventListener_34(type: string, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_35(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AppendChild_1(element: Element): Element
	{
		return null;
	}
	static CreateElement(localName: string): Element
	{
		return null;
	}
	static CreateElementNS(namespace: string, qualifiedName: string): Element
	{
		return null;
	}
	static ElementFromPoint(x: number, y: number): Element
	{
		return null;
	}
	static GetElementById(elementId: string): Element
	{
		return null;
	}
	static GetElementsByClassName(classNames: string): ElementCollection
	{
		return null;
	}
	static GetElementsByTagName(localName: string): ElementCollection
	{
		return null;
	}
	static GetElementsByTagNameNS(namespace: string, localName: string): ElementCollection
	{
		return null;
	}
	private static InsertBefore_1(node: Element, child: Element): Element
	{
		return null;
	}
	static QuerySelector(selectors: string): Element
	{
		return null;
	}
	static QuerySelectorAll(selectors: string): ElementNodeList
	{
		return null;
	}
	private static RemoveChild_1(element: Element): Element
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
interface IXPathEvaluator
{
	CreateExpression($expression: string, resolver: XPathNSResolver): XPathExpression;
	CreateNSResolver(nodeResolver: XmlNode): XPathNSResolver;
	Evaluate($expression: string, contextNode: XmlNode, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult;
}
class DocumentBase extends XmlNode implements IXPathEvaluator, IGeometryUtils
{
	get ActiveElement(): XmlElement
	{
		return null;
	}
	get CharacterSet(): string
	{
		return null;
	}
	get ChildElementCount(): number
	{
		return 0;
	}
	get Children(): XmlElementCollection
	{
		return null;
	}
	get CompatMode(): string
	{
		return null;
	}
	get ContentType(): string
	{
		return null;
	}
	get CurrentScript(): XmlElement
	{
		return null;
	}
	get DefaultView(): WindowInstance
	{
		return null;
	}
	set Dir(value: string)
	{
	}
	get Dir(): string
	{
		return null;
	}
	get Doctype(): DocumentType
	{
		return null;
	}
	get DocumentElement(): XmlElement
	{
		return null;
	}
	get DocumentURI(): string
	{
		return null;
	}
	get FirstElementChild(): XmlElement
	{
		return null;
	}
	get Hidden(): boolean
	{
		return false;
	}
	get Implementation(): DOMImplementation
	{
		return null;
	}
	get InputEncoding(): string
	{
		return null;
	}
	get LastElementChild(): XmlElement
	{
		return null;
	}
	get LastModified(): string
	{
		return null;
	}
	get LastStyleSheetSet(): string
	{
		return null;
	}
	get Location(): Location
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnAfterscriptexecute(value: (event: Event) => void)
	{
	}
	get OnAfterscriptexecute(): (event: Event) => void
	{
		return null;
	}
	set OnBeforescriptexecute(value: (event: Event) => void)
	{
	}
	get OnBeforescriptexecute(): (event: Event) => void
	{
		return null;
	}
	set OnBlur(value: (event: Event) => void)
	{
	}
	get OnBlur(): (event: Event) => void
	{
		return null;
	}
	set OnCanplay(value: (event: Event) => void)
	{
	}
	get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	set OnChange(value: (event: Event) => void)
	{
	}
	get OnChange(): (event: Event) => void
	{
		return null;
	}
	set OnClick(value: (event: Event) => void)
	{
	}
	get OnClick(): (event: Event) => void
	{
		return null;
	}
	set OnContextmenu(value: (event: Event) => void)
	{
	}
	get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	set OnCopy(value: (event: Event) => void)
	{
	}
	get OnCopy(): (event: Event) => void
	{
		return null;
	}
	set OnCut(value: (event: Event) => void)
	{
	}
	get OnCut(): (event: Event) => void
	{
		return null;
	}
	set OnDblclick(value: (event: Event) => void)
	{
	}
	get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	set OnDrag(value: (event: Event) => void)
	{
	}
	get OnDrag(): (event: Event) => void
	{
		return null;
	}
	set OnDragend(value: (event: Event) => void)
	{
	}
	get OnDragend(): (event: Event) => void
	{
		return null;
	}
	set OnDragenter(value: (event: Event) => void)
	{
	}
	get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	set OnDragleave(value: (event: Event) => void)
	{
	}
	get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	set OnDragover(value: (event: Event) => void)
	{
	}
	get OnDragover(): (event: Event) => void
	{
		return null;
	}
	set OnDragstart(value: (event: Event) => void)
	{
	}
	get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	set OnDrop(value: (event: Event) => void)
	{
	}
	get OnDrop(): (event: Event) => void
	{
		return null;
	}
	set OnDurationchange(value: (event: Event) => void)
	{
	}
	get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	set OnEmptied(value: (event: Event) => void)
	{
	}
	get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnFocus(value: (event: Event) => void)
	{
	}
	get OnFocus(): (event: Event) => void
	{
		return null;
	}
	set OnInput(value: (event: Event) => void)
	{
	}
	get OnInput(): (event: Event) => void
	{
		return null;
	}
	set OnInvalid(value: (event: Event) => void)
	{
	}
	get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	set OnKeydown(value: (event: Event) => void)
	{
	}
	get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	set OnKeypress(value: (event: Event) => void)
	{
	}
	get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	set OnKeyup(value: (event: Event) => void)
	{
	}
	get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadeddata(value: (event: Event) => void)
	{
	}
	get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnMousedown(value: (event: Event) => void)
	{
	}
	get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	set OnMouseenter(value: (event: Event) => void)
	{
	}
	get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	set OnMouseleave(value: (event: Event) => void)
	{
	}
	get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	set OnMousemove(value: (event: Event) => void)
	{
	}
	get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	set OnMouseout(value: (event: Event) => void)
	{
	}
	get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	set OnMouseover(value: (event: Event) => void)
	{
	}
	get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	set OnMouseup(value: (event: Event) => void)
	{
	}
	get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	set OnPaste(value: (event: Event) => void)
	{
	}
	get OnPaste(): (event: Event) => void
	{
		return null;
	}
	set OnPause(value: (event: Event) => void)
	{
	}
	get OnPause(): (event: Event) => void
	{
		return null;
	}
	set OnPlay(value: (event: Event) => void)
	{
	}
	get OnPlay(): (event: Event) => void
	{
		return null;
	}
	set OnPlaying(value: (event: Event) => void)
	{
	}
	get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	set OnPointercancel(value: (event: Event) => void)
	{
	}
	get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	set OnPointerdown(value: (event: Event) => void)
	{
	}
	get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	set OnPointerenter(value: (event: Event) => void)
	{
	}
	get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	set OnPointerleave(value: (event: Event) => void)
	{
	}
	get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	set OnPointermove(value: (event: Event) => void)
	{
	}
	get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	set OnPointerout(value: (event: Event) => void)
	{
	}
	get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	set OnPointerover(value: (event: Event) => void)
	{
	}
	get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	set OnPointerup(value: (event: Event) => void)
	{
	}
	get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnRatechange(value: (event: Event) => void)
	{
	}
	get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	set OnReadystatechange(value: (event: Event) => void)
	{
	}
	get OnReadystatechange(): (event: Event) => void
	{
		return null;
	}
	set OnReset(value: (event: Event) => void)
	{
	}
	get OnReset(): (event: Event) => void
	{
		return null;
	}
	set OnScroll(value: (event: Event) => void)
	{
	}
	get OnScroll(): (event: Event) => void
	{
		return null;
	}
	set OnSeeked(value: (event: Event) => void)
	{
	}
	get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	set OnSeeking(value: (event: Event) => void)
	{
	}
	get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	set OnSelect(value: (event: Event) => void)
	{
	}
	get OnSelect(): (event: Event) => void
	{
		return null;
	}
	set OnShow(value: (event: Event) => void)
	{
	}
	get OnShow(): (event: Event) => void
	{
		return null;
	}
	set OnStalled(value: (event: Event) => void)
	{
	}
	get OnStalled(): (event: Event) => void
	{
		return null;
	}
	set OnSubmit(value: (event: Event) => void)
	{
	}
	get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	set OnSuspend(value: (event: Event) => void)
	{
	}
	get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	set OnTimeupdate(value: (event: Event) => void)
	{
	}
	get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	set OnTouchcancel(value: (event: Event) => void)
	{
	}
	get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	set OnTouchend(value: (event: Event) => void)
	{
	}
	get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	set OnTouchenter(value: (event: Event) => void)
	{
	}
	get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	set OnTouchleave(value: (event: Event) => void)
	{
	}
	get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	set OnTouchmove(value: (event: Event) => void)
	{
	}
	get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	set OnTouchstart(value: (event: Event) => void)
	{
	}
	get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	set OnVolumechange(value: (event: Event) => void)
	{
	}
	get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	set OnWaiting(value: (event: Event) => void)
	{
	}
	get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	set OnWheel(value: (event: Event) => void)
	{
	}
	get OnWheel(): (event: Event) => void
	{
		return null;
	}
	get PreferredStyleSheetSet(): string
	{
		return null;
	}
	get ReadyState(): string
	{
		return null;
	}
	get Referrer(): string
	{
		return null;
	}
	set SelectedStyleSheetSet(value: string)
	{
	}
	get SelectedStyleSheetSet(): string
	{
		return null;
	}
	get StyleSheets(): StyleSheetList
	{
		return null;
	}
	get StyleSheetSets(): DOMStringList
	{
		return null;
	}
	set Title(value: string)
	{
	}
	get Title(): string
	{
		return null;
	}
	get URL(): string
	{
		return null;
	}
	get VisibilityState(): VisibilityState
	{
		return VisibilityState.Hidden;
	}
	AddEventListener(type: DocumentBaseEvents, listener: () => void): void;
	AddEventListener(type: DocumentBaseEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DocumentBaseEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void;
	AddEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentBaseEvents, listener: IEventListener): void;
	AddEventListener(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DocumentBase, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DocumentBaseEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DocumentBaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DocumentBaseEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DocumentBaseEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	AdoptNode(node: XmlNode): XmlNode
	{
		return null;
	}
	CaretPositionFromPoint(x: number, y: number): CaretPosition
	{
		return null;
	}
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMPoint
	{
		if (arguments.length === 2 && (point === null || point instanceof DOMPointInit) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertPointFromNode_0(point, from);
		}
		return this.ConvertPointFromNode_1(point, from, options);
	}
	private ConvertPointFromNode_0(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint
	{
		return null;
	}
	private ConvertPointFromNode_1(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint
	{
		return null;
	}
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (quad === null || quad instanceof DOMQuad) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertQuadFromNode_0(quad, from);
		}
		return this.ConvertQuadFromNode_1(quad, from, options);
	}
	private ConvertQuadFromNode_0(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertQuadFromNode_1(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (rect === null || rect instanceof DOMRectReadOnly) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertRectFromNode_0(rect, from);
		}
		return this.ConvertRectFromNode_1(rect, from, options);
	}
	private ConvertRectFromNode_0(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertRectFromNode_1(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	CreateAttribute(name: string): XmlAttribute
	{
		return null;
	}
	CreateAttributeNS(namespace: string, name: string): XmlAttribute
	{
		return null;
	}
	CreateCDATASection(data: string): XmlCDataSection
	{
		return null;
	}
	CreateComment(data: string): XmlComment
	{
		return null;
	}
	CreateDocumentFragment(): XmlDocumentFragment
	{
		return null;
	}
	CreateElement(localName: string): XmlElement;
	CreateElement(localName: string, typeExtension: string): XmlElement;
	CreateElement(localName: string, typeExtension?: string): XmlElement
	{
		if (arguments.length === 1 && (localName === null || localName.constructor === String))
		{
			return this.CreateElement_0(localName);
		}
		return this.CreateElement_1(localName, typeExtension);
	}
	private CreateElement_0(localName: string): XmlElement
	{
		return null;
	}
	private CreateElement_1(localName: string, typeExtension: string): XmlElement
	{
		return null;
	}
	CreateElementNS(namespace: string, qualifiedName: string): XmlElement;
	CreateElementNS(namespace: string, qualifiedName: string, typeExtension: string): XmlElement;
	CreateElementNS(namespace: string, qualifiedName: string, typeExtension?: string): XmlElement
	{
		if (arguments.length === 2 && (namespace === null || namespace.constructor === String) && (qualifiedName === null || qualifiedName.constructor === String))
		{
			return this.CreateElementNS_0(namespace, qualifiedName);
		}
		return this.CreateElementNS_1(namespace, qualifiedName, typeExtension);
	}
	private CreateElementNS_0(namespace: string, qualifiedName: string): XmlElement
	{
		return null;
	}
	private CreateElementNS_1(namespace: string, qualifiedName: string, typeExtension: string): XmlElement
	{
		return null;
	}
	CreateEvent($interface: string): Event
	{
		return null;
	}
	CreateExpression($expression: string, resolver: XPathNSResolver): XPathExpression
	{
		return null;
	}
	CreateNodeIterator(root: XmlNode): NodeIterator;
	CreateNodeIterator(root: XmlNode, whatToShow: NodeFilter): NodeIterator;
	CreateNodeIterator(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): NodeIterator;
	CreateNodeIterator(root: XmlNode, whatToShow?: NodeFilter, filter?: INodeFilter): NodeIterator
	{
		if (arguments.length === 1 && (root === null || root instanceof XmlNode))
		{
			return this.CreateNodeIterator_0(root);
		}
		if (arguments.length === 2 && (root === null || root instanceof XmlNode) && (whatToShow === null || whatToShow.constructor === Number))
		{
			return this.CreateNodeIterator_1(root, whatToShow);
		}
		return this.CreateNodeIterator_2(root, whatToShow, filter);
	}
	private CreateNodeIterator_0(root: XmlNode): NodeIterator
	{
		return null;
	}
	private CreateNodeIterator_1(root: XmlNode, whatToShow: NodeFilter): NodeIterator
	{
		return null;
	}
	private CreateNodeIterator_2(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): NodeIterator
	{
		return null;
	}
	CreateNSResolver(nodeResolver: XmlNode): XPathNSResolver
	{
		return null;
	}
	CreateProcessingInstruction(target: string, data: string): XmlProcessingInstruction
	{
		return null;
	}
	CreateRange(): Range
	{
		return null;
	}
	CreateTextNode(data: string): XmlText
	{
		return null;
	}
	CreateTouch(): Touch;
	CreateTouch(view: WindowInstance): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number): Touch;
	CreateTouch(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number, force: number): Touch;
	CreateTouch(view?: WindowInstance, target?: EventTarget, identifier?: number, pageX?: number, pageY?: number, screenX?: number, screenY?: number, clientX?: number, clientY?: number, radiusX?: number, radiusY?: number, rotationAngle?: number, force?: number): Touch
	{
		if (arguments.length === 0)
		{
			return this.CreateTouch_0();
		}
		if (arguments.length === 1 && (view === null || view instanceof WindowInstance))
		{
			return this.CreateTouch_1(view);
		}
		if (arguments.length === 2 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget))
		{
			return this.CreateTouch_2(view, target);
		}
		if (arguments.length === 3 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number))
		{
			return this.CreateTouch_3(view, target, identifier);
		}
		if (arguments.length === 4 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number))
		{
			return this.CreateTouch_4(view, target, identifier, pageX);
		}
		if (arguments.length === 5 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number))
		{
			return this.CreateTouch_5(view, target, identifier, pageX, pageY);
		}
		if (arguments.length === 6 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number))
		{
			return this.CreateTouch_6(view, target, identifier, pageX, pageY, screenX);
		}
		if (arguments.length === 7 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number))
		{
			return this.CreateTouch_7(view, target, identifier, pageX, pageY, screenX, screenY);
		}
		if (arguments.length === 8 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number))
		{
			return this.CreateTouch_8(view, target, identifier, pageX, pageY, screenX, screenY, clientX);
		}
		if (arguments.length === 9 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number))
		{
			return this.CreateTouch_9(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY);
		}
		if (arguments.length === 10 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number))
		{
			return this.CreateTouch_10(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX);
		}
		if (arguments.length === 11 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number) && (radiusY === null || radiusY.constructor === Number))
		{
			return this.CreateTouch_11(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY);
		}
		if (arguments.length === 12 && (view === null || view instanceof WindowInstance) && (target === null || target instanceof EventTarget) && (identifier === null || identifier.constructor === Number) && (pageX === null || pageX.constructor === Number) && (pageY === null || pageY.constructor === Number) && (screenX === null || screenX.constructor === Number) && (screenY === null || screenY.constructor === Number) && (clientX === null || clientX.constructor === Number) && (clientY === null || clientY.constructor === Number) && (radiusX === null || radiusX.constructor === Number) && (radiusY === null || radiusY.constructor === Number) && (rotationAngle === null || rotationAngle.constructor === Number))
		{
			return this.CreateTouch_12(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY, rotationAngle);
		}
		return this.CreateTouch_13(view, target, identifier, pageX, pageY, screenX, screenY, clientX, clientY, radiusX, radiusY, rotationAngle, force);
	}
	private CreateTouch_0(): Touch
	{
		return null;
	}
	private CreateTouch_1(view: WindowInstance): Touch
	{
		return null;
	}
	private CreateTouch_2(view: WindowInstance, target: EventTarget): Touch
	{
		return null;
	}
	private CreateTouch_3(view: WindowInstance, target: EventTarget, identifier: number): Touch
	{
		return null;
	}
	private CreateTouch_4(view: WindowInstance, target: EventTarget, identifier: number, pageX: number): Touch
	{
		return null;
	}
	private CreateTouch_5(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number): Touch
	{
		return null;
	}
	private CreateTouch_6(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number): Touch
	{
		return null;
	}
	private CreateTouch_7(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number): Touch
	{
		return null;
	}
	private CreateTouch_8(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number): Touch
	{
		return null;
	}
	private CreateTouch_9(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number): Touch
	{
		return null;
	}
	private CreateTouch_10(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number): Touch
	{
		return null;
	}
	private CreateTouch_11(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number): Touch
	{
		return null;
	}
	private CreateTouch_12(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number): Touch
	{
		return null;
	}
	private CreateTouch_13(view: WindowInstance, target: EventTarget, identifier: number, pageX: number, pageY: number, screenX: number, screenY: number, clientX: number, clientY: number, radiusX: number, radiusY: number, rotationAngle: number, force: number): Touch
	{
		return null;
	}
	CreateTouchList(): TouchList;
	CreateTouchList(touch: Touch, touches: Touch[]): TouchList;
	CreateTouchList(touches: Touch[]): TouchList;
	CreateTouchList(touchOrTouches?: any, touches?: Touch[]): TouchList
	{
		if (arguments.length === 0)
		{
			return this.CreateTouchList_0();
		}
		if (arguments.length === 2 && (touchOrTouches === null || touchOrTouches instanceof Touch) && (touches === null || touches instanceof Array))
		{
			return this.CreateTouchList_1(touchOrTouches, touches);
		}
		return this.CreateTouchList_2(touchOrTouches);
	}
	private CreateTouchList_0(): TouchList
	{
		return null;
	}
	private CreateTouchList_1(touch: Touch, touches: Touch[]): TouchList
	{
		return null;
	}
	private CreateTouchList_2(touches: Touch[]): TouchList
	{
		return null;
	}
	CreateTreeWalker(root: XmlNode): TreeWalker;
	CreateTreeWalker(root: XmlNode, whatToShow: NodeFilter): TreeWalker;
	CreateTreeWalker(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): TreeWalker;
	CreateTreeWalker(root: XmlNode, whatToShow?: NodeFilter, filter?: INodeFilter): TreeWalker
	{
		if (arguments.length === 1 && (root === null || root instanceof XmlNode))
		{
			return this.CreateTreeWalker_0(root);
		}
		if (arguments.length === 2 && (root === null || root instanceof XmlNode) && (whatToShow === null || whatToShow.constructor === Number))
		{
			return this.CreateTreeWalker_1(root, whatToShow);
		}
		return this.CreateTreeWalker_2(root, whatToShow, filter);
	}
	private CreateTreeWalker_0(root: XmlNode): TreeWalker
	{
		return null;
	}
	private CreateTreeWalker_1(root: XmlNode, whatToShow: NodeFilter): TreeWalker
	{
		return null;
	}
	private CreateTreeWalker_2(root: XmlNode, whatToShow: NodeFilter, filter: INodeFilter): TreeWalker
	{
		return null;
	}
	ElementFromPoint(x: number, y: number): XmlElement
	{
		return null;
	}
	EnableStyleSheetsForSet(name: string): void
	{
	}
	Evaluate($expression: string, contextNode: XmlNode, resolver: XPathNSResolver, type: number, result: XPathResult): XPathResult
	{
		return null;
	}
	GetBoxQuads(): DOMQuad[];
	GetBoxQuads(options: BoxQuadOptions): DOMQuad[];
	GetBoxQuads(options?: BoxQuadOptions): DOMQuad[]
	{
		if (arguments.length === 0)
		{
			return this.GetBoxQuads_0();
		}
		return this.GetBoxQuads_1(options);
	}
	private GetBoxQuads_0(): DOMQuad[]
	{
		return null;
	}
	private GetBoxQuads_1(options: BoxQuadOptions): DOMQuad[]
	{
		return null;
	}
	GetElementById(elementId: string): XmlElement
	{
		return null;
	}
	GetElementsByClassName(classNames: string): XmlElementCollection
	{
		return null;
	}
	GetElementsByTagName(localName: string): XmlElementCollection
	{
		return null;
	}
	GetElementsByTagNameNS(namespace: string, localName: string): XmlElementCollection
	{
		return null;
	}
	HasFocus(): boolean
	{
		return false;
	}
	ImportNode(node: XmlNode): XmlNode;
	ImportNode(node: XmlNode, deep: boolean): XmlNode;
	ImportNode(node: XmlNode, deep?: boolean): XmlNode
	{
		if (arguments.length === 1 && (node === null || node instanceof XmlNode))
		{
			return this.ImportNode_0(node);
		}
		return this.ImportNode_1(node, deep);
	}
	private ImportNode_0(node: XmlNode): XmlNode
	{
		return null;
	}
	private ImportNode_1(node: XmlNode, deep: boolean): XmlNode
	{
		return null;
	}
	QuerySelector(selectors: string): XmlElement
	{
		return null;
	}
	QuerySelectorAll(selectors: string): XmlNodeList
	{
		return null;
	}
	RegisterElement(name: string): any;
	RegisterElement(name: string, options: ElementRegistrationOptions): any;
	RegisterElement(name: string, options?: ElementRegistrationOptions): any
	{
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			return this.RegisterElement_0(name);
		}
		return this.RegisterElement_1(name, options);
	}
	private RegisterElement_0(name: string): any
	{
		return null;
	}
	private RegisterElement_1(name: string, options: ElementRegistrationOptions): any
	{
		return null;
	}
	ReleaseCapture(): void
	{
	}
	RemoveEventListener(type: DocumentBaseEvents, listener: () => void): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: IEventListener): void;
	RemoveEventListener(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DocumentBase, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DocumentBaseEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DocumentBaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DocumentBaseEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DocumentBaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DocumentBaseEvents, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DocumentBaseEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DocumentBaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DocumentBase, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DocumentBase, event: Event) => void, capture: boolean): void
	{
	}
	constructor()
	{
		super();
	}
}
class DocumentInstance extends DocumentBase
{
	get_Item(name: string): any
	{
		return null;
	}
	set AlinkColor(value: string)
	{
	}
	get AlinkColor(): string
	{
		return null;
	}
	get All(): any
	{
		return null;
	}
	get Anchors(): ElementCollection
	{
		return null;
	}
	get Applets(): ElementCollection
	{
		return null;
	}
	set BgColor(value: string)
	{
	}
	get BgColor(): string
	{
		return null;
	}
	set Body(value: Element)
	{
	}
	get Body(): Element
	{
		return null;
	}
	set Cookie(value: string)
	{
	}
	get Cookie(): string
	{
		return null;
	}
	set DesignMode(value: string)
	{
	}
	get DesignMode(): string
	{
		return null;
	}
	set Domain(value: string)
	{
	}
	get Domain(): string
	{
		return null;
	}
	get Embeds(): ElementCollection
	{
		return null;
	}
	set FgColor(value: string)
	{
	}
	get FgColor(): string
	{
		return null;
	}
	get Forms(): ElementCollection
	{
		return null;
	}
	get Head(): HeadElement
	{
		return null;
	}
	get Images(): ElementCollection
	{
		return null;
	}
	set LinkColor(value: string)
	{
	}
	get LinkColor(): string
	{
		return null;
	}
	get Links(): ElementCollection
	{
		return null;
	}
	get Plugins(): ElementCollection
	{
		return null;
	}
	get Scripts(): ElementCollection
	{
		return null;
	}
	set VlinkColor(value: string)
	{
	}
	get VlinkColor(): string
	{
		return null;
	}
	new get ActiveElement(): Element
	{
		return null;
	}
	new get Children(): ElementCollection
	{
		return null;
	}
	new get CurrentScript(): Element
	{
		return null;
	}
	new get DocumentElement(): Element
	{
		return null;
	}
	new get FirstElementChild(): Element
	{
		return null;
	}
	new get LastElementChild(): Element
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DocumentInstanceEvents, listener: () => void): void;
	AddEventListener(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void;
	AddEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentInstanceEvents, listener: IEventListener): void;
	AddEventListener(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DocumentInstanceEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DocumentInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DocumentInstanceEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	CaptureEvents(): void
	{
	}
	Clear(): void
	{
	}
	Close(): void
	{
	}
	ExecCommand(commandId: string): boolean;
	ExecCommand(commandId: string, showUI: boolean): boolean;
	ExecCommand(commandId: string, showUI: boolean, value: string): boolean;
	ExecCommand(commandId: string, showUI?: boolean, value?: string): boolean
	{
		if (arguments.length === 1 && (commandId === null || commandId.constructor === String))
		{
			return this.ExecCommand_0(commandId);
		}
		if (arguments.length === 2 && (commandId === null || commandId.constructor === String) && (showUI === null || showUI.constructor === Boolean))
		{
			return this.ExecCommand_1(commandId, showUI);
		}
		return this.ExecCommand_2(commandId, showUI, value);
	}
	private ExecCommand_0(commandId: string): boolean
	{
		return false;
	}
	private ExecCommand_1(commandId: string, showUI: boolean): boolean
	{
		return false;
	}
	private ExecCommand_2(commandId: string, showUI: boolean, value: string): boolean
	{
		return false;
	}
	GetElementsByName(elementName: string): ElementNodeList
	{
		return null;
	}
	GetItems(): ElementNodeList;
	GetItems(typeNames: string): ElementNodeList;
	GetItems(typeNames?: string): ElementNodeList
	{
		if (arguments.length === 0)
		{
			return this.GetItems_0();
		}
		return this.GetItems_1(typeNames);
	}
	private GetItems_0(): ElementNodeList
	{
		return null;
	}
	private GetItems_1(typeNames: string): ElementNodeList
	{
		return null;
	}
	GetSelection(): Selection
	{
		return null;
	}
	Open(): DocumentBase;
	Open(type: string): DocumentBase;
	Open(type: string, replace: string): DocumentBase;
	Open(url: string, name: string, features: string): DocumentBase;
	Open(url: string, name: string, features: string, replace: boolean): DocumentBase;
	Open(typeOrUrl?: string, replaceOrName?: string, features?: string, replace?: boolean): DocumentBase
	{
		if (arguments.length === 0)
		{
			return this.Open_0();
		}
		if (arguments.length === 1 && (typeOrUrl === null || typeOrUrl.constructor === String))
		{
			return this.Open_1(typeOrUrl);
		}
		if (arguments.length === 2 && (typeOrUrl === null || typeOrUrl.constructor === String) && (replaceOrName === null || replaceOrName.constructor === String))
		{
			return this.Open_2(typeOrUrl, replaceOrName);
		}
		if (arguments.length === 3 && (typeOrUrl === null || typeOrUrl.constructor === String) && (replaceOrName === null || replaceOrName.constructor === String) && (features === null || features.constructor === String))
		{
			return this.Open_3(typeOrUrl, replaceOrName, features);
		}
		return this.Open_4(typeOrUrl, replaceOrName, features, replace);
	}
	private Open_0(): DocumentBase
	{
		return null;
	}
	private Open_1(type: string): DocumentBase
	{
		return null;
	}
	private Open_2(type: string, replace: string): DocumentBase
	{
		return null;
	}
	private Open_3(url: string, name: string, features: string): WindowInstance
	{
		return null;
	}
	private Open_4(url: string, name: string, features: string, replace: boolean): WindowInstance
	{
		return null;
	}
	QueryCommandEnabled(commandId: string): boolean
	{
		return false;
	}
	QueryCommandIndeterm(commandId: string): boolean
	{
		return false;
	}
	QueryCommandState(commandId: string): boolean
	{
		return false;
	}
	QueryCommandSupported(commandId: string): boolean
	{
		return false;
	}
	QueryCommandValue(commandId: string): string
	{
		return null;
	}
	ReleaseEvents(): void
	{
	}
	RemoveEventListener(type: DocumentInstanceEvents, listener: () => void): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: IEventListener): void;
	RemoveEventListener(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DocumentInstanceEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DocumentInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DocumentInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DocumentInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DocumentInstanceEvents, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DocumentInstanceEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DocumentInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DocumentInstance, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DocumentInstance, event: Event) => void, capture: boolean): void
	{
	}
	Write(text: string[]): void
	{
	}
	Writeln(text: string[]): void
	{
	}
	new CreateElement(localName: string): Element
	{
		return null;
	}
	new CreateElementNS(namespace: string, qualifiedName: string): Element
	{
		return null;
	}
	ElementFromPoint(x: number, y: number): Element
	{
		return null;
	}
	new GetElementById(elementId: string): Element
	{
		return null;
	}
	new GetElementsByClassName(classNames: string): ElementCollection
	{
		return null;
	}
	new GetElementsByTagName(localName: string): ElementCollection
	{
		return null;
	}
	new GetElementsByTagNameNS(namespace: string, localName: string): ElementCollection
	{
		return null;
	}
	new QuerySelector(selectors: string): Element
	{
		return null;
	}
	new QuerySelectorAll(selectors: string): ElementNodeList
	{
		return null;
	}
}
enum DocumentInstanceEvents
{
	Abort,
	Afterscriptexecute,
	Beforescriptexecute,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Readystatechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class DocumentType extends XmlNode
{
	get InternalSubset(): string
	{
		return null;
	}
	get Name(): string
	{
		return null;
	}
	get PublicId(): string
	{
		return null;
	}
	get SystemId(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DocumentTypeEvents, listener: () => void): void;
	AddEventListener(type: DocumentTypeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DocumentTypeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DocumentTypeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void): void;
	AddEventListener(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DocumentTypeEvents, listener: IEventListener): void;
	AddEventListener(type: DocumentTypeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DocumentType, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DocumentType, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DocumentTypeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DocumentTypeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DocumentTypeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DocumentTypeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DocumentTypeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DocumentTypeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DocumentType, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DocumentType, event: Event) => void, capture: boolean): void
	{
	}
	Remove(): void
	{
	}
	RemoveEventListener(type: DocumentTypeEvents, listener: () => void): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: IEventListener): void;
	RemoveEventListener(type: DocumentTypeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DocumentType, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DocumentType, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DocumentTypeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DocumentTypeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DocumentTypeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DocumentTypeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DocumentTypeEvents, listener: (target: DocumentType, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DocumentTypeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DocumentTypeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DocumentType, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DocumentType, event: Event) => void, capture: boolean): void
	{
	}
}
enum DocumentTypeEvents
{

}
class DOMError extends NObject
{
	get Message(): string
	{
		return null;
	}
	get Name(): string
	{
		return null;
	}
	constructor();
	constructor(name: string);
	constructor(name: string, message: string);
	constructor(name?: string, message?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			super();
			this.constructor_1(name);
			return;
		}
		super();
		this.constructor_2(name, message);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(name: string): void
	{
	}
	private constructor_2(name: string, message: string): void
	{
	}
}
class DOMImplementation extends NObject
{
	constructor()
	{
		super();
	}
	CreateDocument(namespace: string, qualifiedName: string): DocumentBase;
	CreateDocument(namespace: string, qualifiedName: string, doctype: DocumentType): DocumentBase;
	CreateDocument(namespace: string, qualifiedName: string, doctype?: DocumentType): DocumentBase
	{
		if (arguments.length === 2 && (namespace === null || namespace.constructor === String) && (qualifiedName === null || qualifiedName.constructor === String))
		{
			return this.CreateDocument_0(namespace, qualifiedName);
		}
		return this.CreateDocument_1(namespace, qualifiedName, doctype);
	}
	private CreateDocument_0(namespace: string, qualifiedName: string): DocumentBase
	{
		return null;
	}
	private CreateDocument_1(namespace: string, qualifiedName: string, doctype: DocumentType): DocumentBase
	{
		return null;
	}
	CreateDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType
	{
		return null;
	}
	CreateHTMLDocument(): DocumentBase;
	CreateHTMLDocument(title: string): DocumentBase;
	CreateHTMLDocument(title?: string): DocumentBase
	{
		if (arguments.length === 0)
		{
			return this.CreateHTMLDocument_0();
		}
		return this.CreateHTMLDocument_1(title);
	}
	private CreateHTMLDocument_0(): DocumentBase
	{
		return null;
	}
	private CreateHTMLDocument_1(title: string): DocumentBase
	{
		return null;
	}
	HasFeature(feature: string, version: string): boolean
	{
		return false;
	}
}
class DOMParser extends NObject
{
	ParseFromString(str: string, type: DOMParserSupportedType): DocumentBase
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
enum DOMParserSupportedType
{
	TextHtml,
	TextXml,
	ApplicationXml,
	ApplicationXhtmlXml,
	ImageSvgXml
}
class DOMPointReadOnly extends NObject
{
	get W(): number
	{
		return 0.0;
	}
	get X(): number
	{
		return 0.0;
	}
	get Y(): number
	{
		return 0.0;
	}
	get Z(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class DOMPoint extends DOMPointReadOnly
{
	new set W(value: number)
	{
	}
	new get W(): number
	{
		return 0.0;
	}
	new set X(value: number)
	{
	}
	new get X(): number
	{
		return 0.0;
	}
	new set Y(value: number)
	{
	}
	new get Y(): number
	{
		return 0.0;
	}
	new set Z(value: number)
	{
	}
	new get Z(): number
	{
		return 0.0;
	}
	constructor();
	constructor(point: DOMPointInit);
	constructor(x: number, y: number);
	constructor(x: number, y: number, z: number);
	constructor(x: number, y: number, z: number, w: number);
	constructor(pointOrX?: any, y?: number, z?: number, w?: number)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (pointOrX === null || pointOrX instanceof DOMPointInit))
		{
			super();
			this.constructor_1(pointOrX);
			return;
		}
		if (arguments.length === 2 && (pointOrX === null || pointOrX.constructor === Number) && (y === null || y.constructor === Number))
		{
			super();
			this.constructor_2(pointOrX, y);
			return;
		}
		if (arguments.length === 3 && (pointOrX === null || pointOrX.constructor === Number) && (y === null || y.constructor === Number) && (z === null || z.constructor === Number))
		{
			super();
			this.constructor_3(pointOrX, y, z);
			return;
		}
		super();
		this.constructor_4(pointOrX, y, z, w);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(point: DOMPointInit): void
	{
	}
	private constructor_2(x: number, y: number): void
	{
	}
	private constructor_3(x: number, y: number, z: number): void
	{
	}
	private constructor_4(x: number, y: number, z: number, w: number): void
	{
	}
}
class DOMPointInit extends NObject
{
	W: number = 0;
	X: number = 0;
	Y: number = 0;
	Z: number = 0;
	constructor()
	{
		super();
	}
}
class DOMQuad extends NObject
{
	get Bounds(): DOMRectReadOnly
	{
		return null;
	}
	get P1(): DOMPoint
	{
		return null;
	}
	get P2(): DOMPoint
	{
		return null;
	}
	get P3(): DOMPoint
	{
		return null;
	}
	get P4(): DOMPoint
	{
		return null;
	}
	constructor();
	constructor(p1: DOMPointInit);
	constructor(p1: DOMPointInit, p2: DOMPointInit);
	constructor(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit);
	constructor(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit, p4: DOMPointInit);
	constructor(rect: DOMRectReadOnly);
	constructor(p1OrRect?: any, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (p1OrRect === null || p1OrRect instanceof DOMPointInit))
		{
			super();
			this.constructor_1(p1OrRect);
			return;
		}
		if (arguments.length === 2 && (p1OrRect === null || p1OrRect instanceof DOMPointInit) && (p2 === null || p2 instanceof DOMPointInit))
		{
			super();
			this.constructor_2(p1OrRect, p2);
			return;
		}
		if (arguments.length === 3 && (p1OrRect === null || p1OrRect instanceof DOMPointInit) && (p2 === null || p2 instanceof DOMPointInit) && (p3 === null || p3 instanceof DOMPointInit))
		{
			super();
			this.constructor_3(p1OrRect, p2, p3);
			return;
		}
		if (arguments.length === 4 && (p1OrRect === null || p1OrRect instanceof DOMPointInit) && (p2 === null || p2 instanceof DOMPointInit) && (p3 === null || p3 instanceof DOMPointInit) && (p4 === null || p4 instanceof DOMPointInit))
		{
			super();
			this.constructor_4(p1OrRect, p2, p3, p4);
			return;
		}
		super();
		this.constructor_5(p1OrRect);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(p1: DOMPointInit): void
	{
	}
	private constructor_2(p1: DOMPointInit, p2: DOMPointInit): void
	{
	}
	private constructor_3(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit): void
	{
	}
	private constructor_4(p1: DOMPointInit, p2: DOMPointInit, p3: DOMPointInit, p4: DOMPointInit): void
	{
	}
	private constructor_5(rect: DOMRectReadOnly): void
	{
	}
}
class DOMRectReadOnly extends NObject
{
	get Bottom(): number
	{
		return 0.0;
	}
	get Height(): number
	{
		return 0.0;
	}
	get Left(): number
	{
		return 0.0;
	}
	get Right(): number
	{
		return 0.0;
	}
	get Top(): number
	{
		return 0.0;
	}
	get Width(): number
	{
		return 0.0;
	}
	get X(): number
	{
		return 0.0;
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class DOMRect extends DOMRectReadOnly
{
	new set Height(value: number)
	{
	}
	new get Height(): number
	{
		return 0.0;
	}
	new set Width(value: number)
	{
	}
	new get Width(): number
	{
		return 0.0;
	}
	new set X(value: number)
	{
	}
	new get X(): number
	{
		return 0.0;
	}
	new set Y(value: number)
	{
	}
	new get Y(): number
	{
		return 0.0;
	}
	constructor();
	constructor(x: number, y: number, width: number, height: number);
	constructor(x?: number, y?: number, width?: number, height?: number)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(x, y, width, height);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(x: number, y: number, width: number, height: number): void
	{
	}
}
class DOMRectList extends NObject
{
	get_Item(index: number): DOMRect
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<DOMRect>
	{
		return null;
	}
	Item(index: number): DOMRect
	{
		return null;
	}
}
class TokenList extends NObject
{
	get_Item(index: number): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Add(tokens: string[]): void
	{
	}
	Contains(token: string): boolean
	{
		return false;
	}
	GetEnumerator(): IEnumerator<string>
	{
		return null;
	}
	Item(index: number): string
	{
		return null;
	}
	Remove(tokens: string[]): void
	{
	}
	Toggle(token: string): boolean;
	Toggle(token: string, force: boolean): boolean;
	Toggle(token: string, force?: boolean): boolean
	{
		if (arguments.length === 1 && (token === null || token.constructor === String))
		{
			return this.Toggle_0(token);
		}
		return this.Toggle_1(token, force);
	}
	private Toggle_0(token: string): boolean
	{
		return false;
	}
	private Toggle_1(token: string, force: boolean): boolean
	{
		return false;
	}
}
class DOMSettableTokenList extends TokenList
{
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class DOMStringList extends NObject
{
	get_Item(index: number): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Contains($string: string): boolean
	{
		return false;
	}
	GetEnumerator(): IEnumerator<string>
	{
		return null;
	}
	Item(index: number): string
	{
		return null;
	}
}
class DOMStringMap extends NObject
{
	get_Item(name: string): string
	{
		return null;
	}
	set_Item(name: string, value: string): void
	{
	}
	constructor()
	{
		super();
	}
	Delete(name: string): void
	{
	}
}
class MouseEvent extends UIEvent
{
	get AltKey(): boolean
	{
		return false;
	}
	get Button(): number
	{
		return 0;
	}
	get Buttons(): number
	{
		return 0;
	}
	get ClientX(): number
	{
		return 0;
	}
	get ClientY(): number
	{
		return 0;
	}
	get CtrlKey(): boolean
	{
		return false;
	}
	get MetaKey(): boolean
	{
		return false;
	}
	get RelatedTarget(): EventTarget
	{
		return null;
	}
	get ScreenX(): number
	{
		return 0;
	}
	get ScreenY(): number
	{
		return 0;
	}
	get ShiftKey(): boolean
	{
		return false;
	}
	constructor();
	constructor(typeArg: string);
	constructor(typeArg: string, mouseEventInitDict: MouseEventInit);
	constructor(typeArg?: string, mouseEventInitDict?: MouseEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (typeArg === null || typeArg.constructor === String))
		{
			super();
			this.constructor_1(typeArg);
			return;
		}
		super();
		this.constructor_2(typeArg, mouseEventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(typeArg: string): void
	{
	}
	private constructor_2(typeArg: string, mouseEventInitDict: MouseEventInit): void
	{
	}
	GetModifierState(keyArg: string): boolean
	{
		return false;
	}
	InitMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: WindowInstance, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void
	{
	}
}
class DragEvent extends MouseEvent
{
	get DataTransfer(): DataTransfer
	{
		return null;
	}
	constructor()
	{
		super();
	}
	InitDragEvent(type: string, canBubble: boolean, cancelable: boolean, aView: WindowInstance, aDetail: number, aScreenX: number, aScreenY: number, aClientX: number, aClientY: number, aCtrlKey: boolean, aAltKey: boolean, aShiftKey: boolean, aMetaKey: boolean, aButton: number, aRelatedTarget: EventTarget, aDataTransfer: DataTransfer): void
	{
	}
}
enum DropEffect
{
	None,
	Copy,
	Link,
	Move
}
class ElementCollection extends NObject
{
	get_Item(index: number): Element
	{
		return null;
	}
	get_Item(name: string): Element
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<Element>
	{
		return null;
	}
	Item(index: number): Element
	{
		return null;
	}
	NamedItem(name: string): Element
	{
		return null;
	}
}
enum ElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class EmbedElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: EmbedElementEvents, listener: () => void): void;
	AddEventListener(type: EmbedElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: EmbedElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: EmbedElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void): void;
	AddEventListener(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: EmbedElementEvents, listener: IEventListener): void;
	AddEventListener(type: EmbedElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: EmbedElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: EmbedElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: EmbedElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: EmbedElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: EmbedElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: EmbedElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: EmbedElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: EmbedElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void
	{
	}
	Call(_arguments: any[]): any
	{
		return null;
	}
	GetSVGDocument(): DocumentBase
	{
		return null;
	}
	RemoveEventListener(type: EmbedElementEvents, listener: () => void): void;
	RemoveEventListener(type: EmbedElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: EmbedElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: EmbedElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void): void;
	RemoveEventListener(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: EmbedElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: EmbedElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: EmbedElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: EmbedElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: EmbedElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: EmbedElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: EmbedElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: EmbedElementEvents, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: EmbedElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: EmbedElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: EmbedElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: EmbedElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum EmbedElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class FieldSetElement extends Element
{
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Elements(): ElementCollection
	{
		return null;
	}
	get Form(): FormElement
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Type(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: FieldSetElementEvents, listener: () => void): void;
	AddEventListener(type: FieldSetElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FieldSetElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FieldSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void): void;
	AddEventListener(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FieldSetElementEvents, listener: IEventListener): void;
	AddEventListener(type: FieldSetElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FieldSetElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FieldSetElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FieldSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FieldSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FieldSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FieldSetElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FieldSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FieldSetElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	RemoveEventListener(type: FieldSetElementEvents, listener: () => void): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: FieldSetElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FieldSetElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FieldSetElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FieldSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FieldSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FieldSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FieldSetElementEvents, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FieldSetElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FieldSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FieldSetElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FieldSetElement, event: Event) => void, capture: boolean): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
}
enum FieldSetElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class FocusEvent extends UIEvent
{
	get RelatedTarget(): EventTarget
	{
		return null;
	}
	constructor();
	constructor(typeArg: string);
	constructor(typeArg: string, focusEventInitDict: FocusEventInit);
	constructor(typeArg?: string, focusEventInitDict?: FocusEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (typeArg === null || typeArg.constructor === String))
		{
			super();
			this.constructor_1(typeArg);
			return;
		}
		super();
		this.constructor_2(typeArg, focusEventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(typeArg: string): void
	{
	}
	private constructor_2(typeArg: string, focusEventInitDict: FocusEventInit): void
	{
	}
}
class UIEventInit extends EventInit
{
	Detail: number = 0;
	View: WindowInstance = null;
	constructor()
	{
		super();
	}
}
class FocusEventInit extends UIEventInit
{
	RelatedTarget: EventTarget = null;
	constructor()
	{
		super();
	}
}
class FontElement extends Element
{
	set Color(value: string)
	{
	}
	get Color(): string
	{
		return null;
	}
	set Face(value: string)
	{
	}
	get Face(): string
	{
		return null;
	}
	set Size(value: string)
	{
	}
	get Size(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: FontElementEvents, listener: () => void): void;
	AddEventListener(type: FontElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FontElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FontElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FontElementEvents, listener: (target: FontElement, event: Event) => void): void;
	AddEventListener(type: FontElementEvents, listener: (target: FontElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FontElementEvents, listener: IEventListener): void;
	AddEventListener(type: FontElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FontElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FontElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FontElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FontElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FontElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FontElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FontElementEvents, listener: (target: FontElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FontElementEvents, listener: (target: FontElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FontElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FontElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FontElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FontElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: FontElementEvents, listener: () => void): void;
	RemoveEventListener(type: FontElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FontElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FontElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FontElementEvents, listener: (target: FontElement, event: Event) => void): void;
	RemoveEventListener(type: FontElementEvents, listener: (target: FontElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FontElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: FontElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FontElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FontElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FontElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FontElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FontElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FontElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FontElementEvents, listener: (target: FontElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FontElementEvents, listener: (target: FontElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FontElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FontElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FontElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FontElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum FontElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class FormControlsCollection extends ElementCollection
{
	get_Item(name: string): TypeOption<ElementNodeList, Element>
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new NamedItem(name: string): TypeOption<ElementNodeList, Element>
	{
		return null;
	}
}
class FormElement extends Element
{
	get_Item(index: number): Element
	{
		return null;
	}
	get_Item(name: string): Element
	{
		return null;
	}
	set AcceptCharset(value: string)
	{
	}
	get AcceptCharset(): string
	{
		return null;
	}
	set Action(value: string)
	{
	}
	get Action(): string
	{
		return null;
	}
	set Autocomplete(value: string)
	{
	}
	get Autocomplete(): string
	{
		return null;
	}
	get Elements(): ElementCollection
	{
		return null;
	}
	set Encoding(value: string)
	{
	}
	get Encoding(): string
	{
		return null;
	}
	set Enctype(value: string)
	{
	}
	get Enctype(): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	set Method(value: string)
	{
	}
	get Method(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set NoValidate(value: boolean)
	{
	}
	get NoValidate(): boolean
	{
		return false;
	}
	set Target(value: string)
	{
	}
	get Target(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: FormElementEvents, listener: () => void): void;
	AddEventListener(type: FormElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FormElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FormElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FormElementEvents, listener: (target: FormElement, event: Event) => void): void;
	AddEventListener(type: FormElementEvents, listener: (target: FormElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FormElementEvents, listener: IEventListener): void;
	AddEventListener(type: FormElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FormElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FormElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FormElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FormElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FormElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FormElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FormElementEvents, listener: (target: FormElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FormElementEvents, listener: (target: FormElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FormElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FormElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FormElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FormElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	GetEnumerator(): IEnumerator<Element>
	{
		return null;
	}
	RemoveEventListener(type: FormElementEvents, listener: () => void): void;
	RemoveEventListener(type: FormElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FormElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FormElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FormElementEvents, listener: (target: FormElement, event: Event) => void): void;
	RemoveEventListener(type: FormElementEvents, listener: (target: FormElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FormElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: FormElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FormElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FormElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FormElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FormElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FormElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FormElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FormElementEvents, listener: (target: FormElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FormElementEvents, listener: (target: FormElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FormElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FormElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FormElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FormElement, event: Event) => void, capture: boolean): void
	{
	}
	Reset(): void
	{
	}
	Submit(): void
	{
	}
}
enum FormElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class FrameElement extends Element
{
	get ContentDocument(): DocumentBase
	{
		return null;
	}
	get ContentWindow(): WindowInstance
	{
		return null;
	}
	set FrameBorder(value: string)
	{
	}
	get FrameBorder(): string
	{
		return null;
	}
	set LongDesc(value: string)
	{
	}
	get LongDesc(): string
	{
		return null;
	}
	set MarginHeight(value: string)
	{
	}
	get MarginHeight(): string
	{
		return null;
	}
	set MarginWidth(value: string)
	{
	}
	get MarginWidth(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set NoResize(value: boolean)
	{
	}
	get NoResize(): boolean
	{
		return false;
	}
	set Scrolling(value: string)
	{
	}
	get Scrolling(): string
	{
		return null;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: FrameElementEvents, listener: () => void): void;
	AddEventListener(type: FrameElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FrameElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FrameElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void): void;
	AddEventListener(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FrameElementEvents, listener: IEventListener): void;
	AddEventListener(type: FrameElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FrameElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FrameElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FrameElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FrameElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FrameElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FrameElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FrameElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FrameElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FrameElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FrameElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: FrameElementEvents, listener: () => void): void;
	RemoveEventListener(type: FrameElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FrameElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FrameElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void): void;
	RemoveEventListener(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FrameElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: FrameElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FrameElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FrameElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FrameElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FrameElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FrameElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FrameElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FrameElementEvents, listener: (target: FrameElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FrameElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FrameElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FrameElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FrameElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum FrameElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class FrameSetElement extends Element
{
	set Cols(value: string)
	{
	}
	get Cols(): string
	{
		return null;
	}
	set OnAfterprint(value: (event: Event) => void)
	{
	}
	get OnAfterprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeprint(value: (event: Event) => void)
	{
	}
	get OnBeforeprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeunload(value: (event: Event) => string)
	{
	}
	get OnBeforeunload(): (event: Event) => string
	{
		return null;
	}
	set OnHashchange(value: (event: Event) => void)
	{
	}
	get OnHashchange(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnOffline(value: (event: Event) => void)
	{
	}
	get OnOffline(): (event: Event) => void
	{
		return null;
	}
	set OnOnline(value: (event: Event) => void)
	{
	}
	get OnOnline(): (event: Event) => void
	{
		return null;
	}
	set OnPagehide(value: (event: Event) => void)
	{
	}
	get OnPagehide(): (event: Event) => void
	{
		return null;
	}
	set OnPageshow(value: (event: Event) => void)
	{
	}
	get OnPageshow(): (event: Event) => void
	{
		return null;
	}
	set OnPopstate(value: (event: Event) => void)
	{
	}
	get OnPopstate(): (event: Event) => void
	{
		return null;
	}
	set OnResize(value: (event: Event) => void)
	{
	}
	get OnResize(): (event: Event) => void
	{
		return null;
	}
	set OnUnload(value: (event: Event) => void)
	{
	}
	get OnUnload(): (event: Event) => void
	{
		return null;
	}
	set Rows(value: string)
	{
	}
	get Rows(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: FrameSetElementEvents, listener: () => void): void;
	AddEventListener(type: FrameSetElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FrameSetElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FrameSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void): void;
	AddEventListener(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FrameSetElementEvents, listener: IEventListener): void;
	AddEventListener(type: FrameSetElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FrameSetElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FrameSetElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FrameSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FrameSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FrameSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FrameSetElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FrameSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FrameSetElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: FrameSetElementEvents, listener: () => void): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: FrameSetElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FrameSetElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FrameSetElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FrameSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FrameSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FrameSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FrameSetElementEvents, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FrameSetElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FrameSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FrameSetElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FrameSetElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum FrameSetElementEvents
{
	Abort,
	Afterprint,
	Beforeprint,
	Beforeunload,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Hashchange,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Message,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Offline,
	Online,
	Pagehide,
	Pageshow,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Popstate,
	Progress,
	Ratechange,
	Reset,
	Resize,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Unload,
	Volumechange,
	Waiting,
	Wheel
}
class HashChangeEvent extends Event
{
	get NewURL(): string
	{
		return null;
	}
	get OldURL(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: HashChangeEventInit);
	constructor(type?: string, eventInitDict?: HashChangeEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: HashChangeEventInit): void
	{
	}
	InitHashChangeEvent(type: string, canBubble: boolean, cancelable: boolean, oldURL: string, newURL: string): void
	{
	}
}
class HashChangeEventInit extends EventInit
{
	NewURL: string = null;
	OldURL: string = null;
	constructor()
	{
		super();
	}
}
class HeadElement extends Element
{
	constructor()
	{
		super();
	}
	AddEventListener(type: HeadElementEvents, listener: () => void): void;
	AddEventListener(type: HeadElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: HeadElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: HeadElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void): void;
	AddEventListener(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: HeadElementEvents, listener: IEventListener): void;
	AddEventListener(type: HeadElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: HeadElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: HeadElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: HeadElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: HeadElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: HeadElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: HeadElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: HeadElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: HeadElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: HeadElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: HeadElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: HeadElementEvents, listener: () => void): void;
	RemoveEventListener(type: HeadElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: HeadElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: HeadElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void): void;
	RemoveEventListener(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HeadElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: HeadElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: HeadElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: HeadElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: HeadElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: HeadElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: HeadElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: HeadElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: HeadElementEvents, listener: (target: HeadElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: HeadElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: HeadElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: HeadElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: HeadElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum HeadElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class HeadingElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: HeadingElementEvents, listener: () => void): void;
	AddEventListener(type: HeadingElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: HeadingElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: HeadingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void): void;
	AddEventListener(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: HeadingElementEvents, listener: IEventListener): void;
	AddEventListener(type: HeadingElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: HeadingElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: HeadingElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: HeadingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: HeadingElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: HeadingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: HeadingElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: HeadingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: HeadingElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: HeadingElementEvents, listener: () => void): void;
	RemoveEventListener(type: HeadingElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: HeadingElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: HeadingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void): void;
	RemoveEventListener(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HeadingElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: HeadingElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: HeadingElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: HeadingElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: HeadingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: HeadingElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: HeadingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: HeadingElementEvents, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: HeadingElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: HeadingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: HeadingElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: HeadingElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum HeadingElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class History extends NObject
{
	get Length(): number
	{
		return 0;
	}
	get State(): any
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Back(): void
	{
	}
	Forward(): void
	{
	}
	Go(): void;
	Go(delta: number): void;
	Go(delta?: number): void
	{
		if (arguments.length === 0)
		{
			this.Go_0();
			return;
		}
		this.Go_1(delta);
	}
	private Go_0(): void
	{
	}
	private Go_1(delta: number): void
	{
	}
	PushState(data: any, title: string): void;
	PushState(data: any, title: string, url: string): void;
	PushState(data: any, title: string, url?: string): void
	{
		if (arguments.length === 2 && (data === null || data.constructor === Object) && (title === null || title.constructor === String))
		{
			this.PushState_0(data, title);
			return;
		}
		this.PushState_1(data, title, url);
	}
	private PushState_0(data: any, title: string): void
	{
	}
	private PushState_1(data: any, title: string, url: string): void
	{
	}
	ReplaceState(data: any, title: string): void;
	ReplaceState(data: any, title: string, url: string): void;
	ReplaceState(data: any, title: string, url?: string): void
	{
		if (arguments.length === 2 && (data === null || data.constructor === Object) && (title === null || title.constructor === String))
		{
			this.ReplaceState_0(data, title);
			return;
		}
		this.ReplaceState_1(data, title, url);
	}
	private ReplaceState_0(data: any, title: string): void
	{
	}
	private ReplaceState_1(data: any, title: string, url: string): void
	{
	}
}
class HRElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Color(value: string)
	{
	}
	get Color(): string
	{
		return null;
	}
	set NoShade(value: boolean)
	{
	}
	get NoShade(): boolean
	{
		return false;
	}
	set Size(value: string)
	{
	}
	get Size(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: HRElementEvents, listener: () => void): void;
	AddEventListener(type: HRElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: HRElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: HRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: HRElementEvents, listener: (target: HRElement, event: Event) => void): void;
	AddEventListener(type: HRElementEvents, listener: (target: HRElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: HRElementEvents, listener: IEventListener): void;
	AddEventListener(type: HRElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: HRElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: HRElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: HRElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: HRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: HRElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: HRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: HRElementEvents, listener: (target: HRElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: HRElementEvents, listener: (target: HRElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: HRElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: HRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: HRElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: HRElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: HRElementEvents, listener: () => void): void;
	RemoveEventListener(type: HRElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: HRElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: HRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HRElementEvents, listener: (target: HRElement, event: Event) => void): void;
	RemoveEventListener(type: HRElementEvents, listener: (target: HRElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HRElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: HRElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: HRElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: HRElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: HRElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: HRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: HRElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: HRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: HRElementEvents, listener: (target: HRElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: HRElementEvents, listener: (target: HRElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: HRElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: HRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: HRElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: HRElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum HRElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class HtmlElement extends Element
{
	set Version(value: string)
	{
	}
	get Version(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: HtmlElementEvents, listener: () => void): void;
	AddEventListener(type: HtmlElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: HtmlElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: HtmlElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void): void;
	AddEventListener(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: HtmlElementEvents, listener: IEventListener): void;
	AddEventListener(type: HtmlElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: HtmlElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: HtmlElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: HtmlElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: HtmlElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: HtmlElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: HtmlElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: HtmlElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: HtmlElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: HtmlElementEvents, listener: () => void): void;
	RemoveEventListener(type: HtmlElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: HtmlElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: HtmlElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void): void;
	RemoveEventListener(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: HtmlElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: HtmlElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: HtmlElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: HtmlElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: HtmlElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: HtmlElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: HtmlElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: HtmlElementEvents, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: HtmlElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: HtmlElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: HtmlElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: HtmlElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum HtmlElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class HtmlOptionsCollection extends ElementCollection
{
	set_Item(index: number, value: OptionElement): void
	{
	}
	new set Length(value: number)
	{
	}
	new get Length(): number
	{
		return 0;
	}
	set SelectedIndex(value: number)
	{
	}
	get SelectedIndex(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Add(element: TypeOption<OptionElement, OptGroupElement>): void;
	Add(element: TypeOption<OptionElement, OptGroupElement>, before: TypeOption<Element, number>): void;
	Add(element: TypeOption<OptionElement, OptGroupElement>, before?: TypeOption<Element, number>): void
	{
		if (arguments.length === 1 && (element === null || element instanceof TypeOption))
		{
			this.Add_0(element);
			return;
		}
		this.Add_1(element, before);
	}
	private Add_0(element: TypeOption<OptionElement, OptGroupElement>): void
	{
	}
	private Add_1(element: TypeOption<OptionElement, OptGroupElement>, before: TypeOption<Element, number>): void
	{
	}
	Remove(index: number): void
	{
	}
}
interface IEventListener
{
	HandleEvent(event: Event): void;
}
class IFrameElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set AllowFullscreen(value: boolean)
	{
	}
	get AllowFullscreen(): boolean
	{
		return false;
	}
	get ContentDocument(): DocumentBase
	{
		return null;
	}
	get ContentWindow(): WindowInstance
	{
		return null;
	}
	set FrameBorder(value: string)
	{
	}
	get FrameBorder(): string
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set LongDesc(value: string)
	{
	}
	get LongDesc(): string
	{
		return null;
	}
	set MarginHeight(value: string)
	{
	}
	get MarginHeight(): string
	{
		return null;
	}
	set MarginWidth(value: string)
	{
	}
	get MarginWidth(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Sandbox(): DOMSettableTokenList
	{
		return null;
	}
	set Scrolling(value: string)
	{
	}
	get Scrolling(): string
	{
		return null;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Srcdoc(value: string)
	{
	}
	get Srcdoc(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: IFrameElementEvents, listener: () => void): void;
	AddEventListener(type: IFrameElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: IFrameElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: IFrameElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void): void;
	AddEventListener(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: IFrameElementEvents, listener: IEventListener): void;
	AddEventListener(type: IFrameElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: IFrameElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: IFrameElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: IFrameElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: IFrameElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: IFrameElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: IFrameElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: IFrameElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: IFrameElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void
	{
	}
	GetSVGDocument(): DocumentBase
	{
		return null;
	}
	RemoveEventListener(type: IFrameElementEvents, listener: () => void): void;
	RemoveEventListener(type: IFrameElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: IFrameElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: IFrameElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void): void;
	RemoveEventListener(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: IFrameElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: IFrameElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: IFrameElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: IFrameElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: IFrameElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: IFrameElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: IFrameElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: IFrameElementEvents, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: IFrameElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: IFrameElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: IFrameElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: IFrameElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum IFrameElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ImageElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Alt(value: string)
	{
	}
	get Alt(): string
	{
		return null;
	}
	set Border(value: string)
	{
	}
	get Border(): string
	{
		return null;
	}
	get Complete(): boolean
	{
		return false;
	}
	set CrossOrigin(value: string)
	{
	}
	get CrossOrigin(): string
	{
		return null;
	}
	set Height(value: number)
	{
	}
	get Height(): number
	{
		return 0;
	}
	set Hspace(value: number)
	{
	}
	get Hspace(): number
	{
		return 0;
	}
	set IsMap(value: boolean)
	{
	}
	get IsMap(): boolean
	{
		return false;
	}
	set LongDesc(value: string)
	{
	}
	get LongDesc(): string
	{
		return null;
	}
	set Lowsrc(value: string)
	{
	}
	get Lowsrc(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get NaturalHeight(): number
	{
		return 0;
	}
	get NaturalWidth(): number
	{
		return 0;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set UseMap(value: string)
	{
	}
	get UseMap(): string
	{
		return null;
	}
	set Vspace(value: number)
	{
	}
	get Vspace(): number
	{
		return 0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0;
	}
	get X(): number
	{
		return 0;
	}
	get Y(): number
	{
		return 0;
	}
	constructor();
	constructor(width: number);
	constructor(width: number, height: number);
	constructor(width?: number, height?: number)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (width === null || width.constructor === Number))
		{
			super();
			this.constructor_1(width);
			return;
		}
		super();
		this.constructor_2(width, height);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(width: number): void
	{
	}
	private constructor_2(width: number, height: number): void
	{
	}
	AddEventListener(type: ImageElementEvents, listener: () => void): void;
	AddEventListener(type: ImageElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ImageElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void): void;
	AddEventListener(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ImageElementEvents, listener: IEventListener): void;
	AddEventListener(type: ImageElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ImageElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ImageElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ImageElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ImageElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ImageElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ImageElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ImageElementEvents, listener: () => void): void;
	RemoveEventListener(type: ImageElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ImageElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void): void;
	RemoveEventListener(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ImageElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ImageElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ImageElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ImageElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ImageElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ImageElementEvents, listener: (target: ImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ImageElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ImageElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ImageElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ImageElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class InputElement extends Element
{
	set Accept(value: string)
	{
	}
	get Accept(): string
	{
		return null;
	}
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Alt(value: string)
	{
	}
	get Alt(): string
	{
		return null;
	}
	set Autocomplete(value: string)
	{
	}
	get Autocomplete(): string
	{
		return null;
	}
	set Autofocus(value: boolean)
	{
	}
	get Autofocus(): boolean
	{
		return false;
	}
	set Checked(value: boolean)
	{
	}
	get Checked(): boolean
	{
		return false;
	}
	set DefaultChecked(value: boolean)
	{
	}
	get DefaultChecked(): boolean
	{
		return false;
	}
	set DefaultValue(value: string)
	{
	}
	get DefaultValue(): string
	{
		return null;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Files(): FileList
	{
		return null;
	}
	get Form(): FormElement
	{
		return null;
	}
	set FormAction(value: string)
	{
	}
	get FormAction(): string
	{
		return null;
	}
	set FormEnctype(value: string)
	{
	}
	get FormEnctype(): string
	{
		return null;
	}
	set FormMethod(value: string)
	{
	}
	get FormMethod(): string
	{
		return null;
	}
	set FormNoValidate(value: boolean)
	{
	}
	get FormNoValidate(): boolean
	{
		return false;
	}
	set FormTarget(value: string)
	{
	}
	get FormTarget(): string
	{
		return null;
	}
	set Height(value: number)
	{
	}
	get Height(): number
	{
		return 0;
	}
	set Indeterminate(value: boolean)
	{
	}
	get Indeterminate(): boolean
	{
		return false;
	}
	set InputMode(value: string)
	{
	}
	get InputMode(): string
	{
		return null;
	}
	get List(): Element
	{
		return null;
	}
	set Max(value: string)
	{
	}
	get Max(): string
	{
		return null;
	}
	set MaxLength(value: number)
	{
	}
	get MaxLength(): number
	{
		return 0;
	}
	set Min(value: string)
	{
	}
	get Min(): string
	{
		return null;
	}
	set Multiple(value: boolean)
	{
	}
	get Multiple(): boolean
	{
		return false;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Pattern(value: string)
	{
	}
	get Pattern(): string
	{
		return null;
	}
	set Placeholder(value: string)
	{
	}
	get Placeholder(): string
	{
		return null;
	}
	set ReadOnly(value: boolean)
	{
	}
	get ReadOnly(): boolean
	{
		return false;
	}
	set Required(value: boolean)
	{
	}
	get Required(): boolean
	{
		return false;
	}
	set SelectionDirection(value: string)
	{
	}
	get SelectionDirection(): string
	{
		return null;
	}
	set SelectionEnd(value: number)
	{
	}
	get SelectionEnd(): number
	{
		return 0;
	}
	set SelectionStart(value: number)
	{
	}
	get SelectionStart(): number
	{
		return 0;
	}
	set Size(value: number)
	{
	}
	get Size(): number
	{
		return 0;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Step(value: string)
	{
	}
	get Step(): string
	{
		return null;
	}
	get TextLength(): number
	{
		return 0;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set UseMap(value: string)
	{
	}
	get UseMap(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	set ValueAsDate(value: Nullable<DateTime>)
	{
	}
	get ValueAsDate(): Nullable<DateTime>
	{
		return null;
	}
	set ValueAsNumber(value: number)
	{
	}
	get ValueAsNumber(): number
	{
		return 0.0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: InputElementEvents, listener: () => void): void;
	AddEventListener(type: InputElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: InputElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: InputElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: InputElementEvents, listener: (target: InputElement, event: Event) => void): void;
	AddEventListener(type: InputElementEvents, listener: (target: InputElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: InputElementEvents, listener: IEventListener): void;
	AddEventListener(type: InputElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: InputElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: InputElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: InputElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: InputElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: InputElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: InputElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: InputElementEvents, listener: (target: InputElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: InputElementEvents, listener: (target: InputElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: InputElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: InputElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: InputElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: InputElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	OpenDirectoryPicker(): void
	{
	}
	RemoveEventListener(type: InputElementEvents, listener: () => void): void;
	RemoveEventListener(type: InputElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: InputElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: InputElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: InputElementEvents, listener: (target: InputElement, event: Event) => void): void;
	RemoveEventListener(type: InputElementEvents, listener: (target: InputElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: InputElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: InputElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: InputElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: InputElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: InputElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: InputElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: InputElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: InputElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: InputElementEvents, listener: (target: InputElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: InputElementEvents, listener: (target: InputElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: InputElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: InputElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: InputElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: InputElement, event: Event) => void, capture: boolean): void
	{
	}
	Select(): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
	SetSelectionRange(start: number, end: number): void;
	SetSelectionRange(start: number, end: number, direction: string): void;
	SetSelectionRange(start: number, end: number, direction?: string): void
	{
		if (arguments.length === 2 && (start === null || start.constructor === Number) && (end === null || end.constructor === Number))
		{
			this.SetSelectionRange_0(start, end);
			return;
		}
		this.SetSelectionRange_1(start, end, direction);
	}
	private SetSelectionRange_0(start: number, end: number): void
	{
	}
	private SetSelectionRange_1(start: number, end: number, direction: string): void
	{
	}
	StepDown(): void;
	StepDown(n: number): void;
	StepDown(n?: number): void
	{
		if (arguments.length === 0)
		{
			this.StepDown_0();
			return;
		}
		this.StepDown_1(n);
	}
	private StepDown_0(): void
	{
	}
	private StepDown_1(n: number): void
	{
	}
	StepUp(): void;
	StepUp(n: number): void;
	StepUp(n?: number): void
	{
		if (arguments.length === 0)
		{
			this.StepUp_0();
			return;
		}
		this.StepUp_1(n);
	}
	private StepUp_0(): void
	{
	}
	private StepUp_1(n: number): void
	{
	}
}
enum InputElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
interface IWindowBase64
{
	Atob(atob: string): string;
	Btoa(btoa: string): string;
}
interface IWindowTimers
{
	SetTimeout(handler: () => void): number;
	SetTimeout(handler: () => void, timeout: number): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetTimeout(handler: string): number;
	SetTimeout(handler: string, timeout: number): number;
	SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number;
	SetInterval(handler: () => void): number;
	SetInterval(handler: () => void, timeout: number): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetInterval(handler: string): number;
	SetInterval(handler: string, timeout: number): number;
	SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number;
	ClearInterval(handle: number): void;
	ClearTimeout(handle: number): void;
}
class KeyboardEvent extends UIEvent
{
	static DOM_KEY_LOCATION_JOYSTICK: number = 5;
	static DOM_KEY_LOCATION_LEFT: number = 1;
	static DOM_KEY_LOCATION_MOBILE: number = 4;
	static DOM_KEY_LOCATION_NUMPAD: number = 3;
	static DOM_KEY_LOCATION_RIGHT: number = 2;
	static DOM_KEY_LOCATION_STANDARD: number = 0;
	static DOM_VK_0: number = 48;
	static DOM_VK_1: number = 49;
	static DOM_VK_2: number = 50;
	static DOM_VK_3: number = 51;
	static DOM_VK_4: number = 52;
	static DOM_VK_5: number = 53;
	static DOM_VK_6: number = 54;
	static DOM_VK_7: number = 55;
	static DOM_VK_8: number = 56;
	static DOM_VK_9: number = 57;
	static DOM_VK_A: number = 65;
	static DOM_VK_ACCEPT: number = 30;
	static DOM_VK_ADD: number = 107;
	static DOM_VK_ALT: number = 18;
	static DOM_VK_ALTGR: number = 225;
	static DOM_VK_AMPERSAND: number = 166;
	static DOM_VK_ASTERISK: number = 170;
	static DOM_VK_AT: number = 64;
	static DOM_VK_ATTN: number = 246;
	static DOM_VK_B: number = 66;
	static DOM_VK_BACK_QUOTE: number = 192;
	static DOM_VK_BACK_SLASH: number = 220;
	static DOM_VK_BACK_SPACE: number = 8;
	static DOM_VK_C: number = 67;
	static DOM_VK_CANCEL: number = 3;
	static DOM_VK_CAPS_LOCK: number = 20;
	static DOM_VK_CIRCUMFLEX: number = 160;
	static DOM_VK_CLEAR: number = 12;
	static DOM_VK_CLOSE_BRACKET: number = 221;
	static DOM_VK_CLOSE_CURLY_BRACKET: number = 175;
	static DOM_VK_CLOSE_PAREN: number = 169;
	static DOM_VK_COLON: number = 58;
	static DOM_VK_COMMA: number = 188;
	static DOM_VK_CONTEXT_MENU: number = 93;
	static DOM_VK_CONTROL: number = 17;
	static DOM_VK_CONVERT: number = 28;
	static DOM_VK_CRSEL: number = 247;
	static DOM_VK_D: number = 68;
	static DOM_VK_DECIMAL: number = 110;
	static DOM_VK_DELETE: number = 46;
	static DOM_VK_DIVIDE: number = 111;
	static DOM_VK_DOLLAR: number = 164;
	static DOM_VK_DOUBLE_QUOTE: number = 162;
	static DOM_VK_DOWN: number = 40;
	static DOM_VK_E: number = 69;
	static DOM_VK_EISU: number = 22;
	static DOM_VK_END: number = 35;
	static DOM_VK_EQUALS: number = 61;
	static DOM_VK_EREOF: number = 249;
	static DOM_VK_ESCAPE: number = 27;
	static DOM_VK_EXCLAMATION: number = 161;
	static DOM_VK_EXECUTE: number = 43;
	static DOM_VK_EXSEL: number = 248;
	static DOM_VK_F: number = 70;
	static DOM_VK_F1: number = 112;
	static DOM_VK_F10: number = 121;
	static DOM_VK_F11: number = 122;
	static DOM_VK_F12: number = 123;
	static DOM_VK_F13: number = 124;
	static DOM_VK_F14: number = 125;
	static DOM_VK_F15: number = 126;
	static DOM_VK_F16: number = 127;
	static DOM_VK_F17: number = 128;
	static DOM_VK_F18: number = 129;
	static DOM_VK_F19: number = 130;
	static DOM_VK_F2: number = 113;
	static DOM_VK_F20: number = 131;
	static DOM_VK_F21: number = 132;
	static DOM_VK_F22: number = 133;
	static DOM_VK_F23: number = 134;
	static DOM_VK_F24: number = 135;
	static DOM_VK_F3: number = 114;
	static DOM_VK_F4: number = 115;
	static DOM_VK_F5: number = 116;
	static DOM_VK_F6: number = 117;
	static DOM_VK_F7: number = 118;
	static DOM_VK_F8: number = 119;
	static DOM_VK_F9: number = 120;
	static DOM_VK_FINAL: number = 24;
	static DOM_VK_G: number = 71;
	static DOM_VK_GREATER_THAN: number = 62;
	static DOM_VK_H: number = 72;
	static DOM_VK_HANGUL: number = 21;
	static DOM_VK_HANJA: number = 25;
	static DOM_VK_HASH: number = 163;
	static DOM_VK_HELP: number = 6;
	static DOM_VK_HOME: number = 36;
	static DOM_VK_HYPHEN_MINUS: number = 173;
	static DOM_VK_I: number = 73;
	static DOM_VK_INSERT: number = 45;
	static DOM_VK_J: number = 74;
	static DOM_VK_JUNJA: number = 23;
	static DOM_VK_K: number = 75;
	static DOM_VK_KANA: number = 21;
	static DOM_VK_KANJI: number = 25;
	static DOM_VK_L: number = 76;
	static DOM_VK_LEFT: number = 37;
	static DOM_VK_LESS_THAN: number = 60;
	static DOM_VK_M: number = 77;
	static DOM_VK_META: number = 224;
	static DOM_VK_MODECHANGE: number = 31;
	static DOM_VK_MULTIPLY: number = 106;
	static DOM_VK_N: number = 78;
	static DOM_VK_NONCONVERT: number = 29;
	static DOM_VK_NUM_LOCK: number = 144;
	static DOM_VK_NUMPAD0: number = 96;
	static DOM_VK_NUMPAD1: number = 97;
	static DOM_VK_NUMPAD2: number = 98;
	static DOM_VK_NUMPAD3: number = 99;
	static DOM_VK_NUMPAD4: number = 100;
	static DOM_VK_NUMPAD5: number = 101;
	static DOM_VK_NUMPAD6: number = 102;
	static DOM_VK_NUMPAD7: number = 103;
	static DOM_VK_NUMPAD8: number = 104;
	static DOM_VK_NUMPAD9: number = 105;
	static DOM_VK_O: number = 79;
	static DOM_VK_OPEN_BRACKET: number = 219;
	static DOM_VK_OPEN_CURLY_BRACKET: number = 174;
	static DOM_VK_OPEN_PAREN: number = 168;
	static DOM_VK_P: number = 80;
	static DOM_VK_PA1: number = 253;
	static DOM_VK_PAGE_DOWN: number = 34;
	static DOM_VK_PAGE_UP: number = 33;
	static DOM_VK_PAUSE: number = 19;
	static DOM_VK_PERCENT: number = 165;
	static DOM_VK_PERIOD: number = 190;
	static DOM_VK_PIPE: number = 172;
	static DOM_VK_PLAY: number = 250;
	static DOM_VK_PLUS: number = 171;
	static DOM_VK_PRINT: number = 42;
	static DOM_VK_PRINTSCREEN: number = 44;
	static DOM_VK_Q: number = 81;
	static DOM_VK_QUESTION_MARK: number = 63;
	static DOM_VK_QUOTE: number = 222;
	static DOM_VK_R: number = 82;
	static DOM_VK_RETURN: number = 13;
	static DOM_VK_RIGHT: number = 39;
	static DOM_VK_S: number = 83;
	static DOM_VK_SCROLL_LOCK: number = 145;
	static DOM_VK_SELECT: number = 41;
	static DOM_VK_SEMICOLON: number = 59;
	static DOM_VK_SEPARATOR: number = 108;
	static DOM_VK_SHIFT: number = 16;
	static DOM_VK_SLASH: number = 191;
	static DOM_VK_SLEEP: number = 95;
	static DOM_VK_SPACE: number = 32;
	static DOM_VK_SUBTRACT: number = 109;
	static DOM_VK_T: number = 84;
	static DOM_VK_TAB: number = 9;
	static DOM_VK_TILDE: number = 176;
	static DOM_VK_U: number = 85;
	static DOM_VK_UNDERSCORE: number = 167;
	static DOM_VK_UP: number = 38;
	static DOM_VK_V: number = 86;
	static DOM_VK_VOLUME_DOWN: number = 182;
	static DOM_VK_VOLUME_MUTE: number = 181;
	static DOM_VK_VOLUME_UP: number = 183;
	static DOM_VK_W: number = 87;
	static DOM_VK_WIN: number = 91;
	static DOM_VK_WIN_ICO_00: number = 228;
	static DOM_VK_WIN_ICO_CLEAR: number = 230;
	static DOM_VK_WIN_ICO_HELP: number = 227;
	static DOM_VK_WIN_OEM_ATTN: number = 240;
	static DOM_VK_WIN_OEM_AUTO: number = 243;
	static DOM_VK_WIN_OEM_BACKTAB: number = 245;
	static DOM_VK_WIN_OEM_CLEAR: number = 254;
	static DOM_VK_WIN_OEM_COPY: number = 242;
	static DOM_VK_WIN_OEM_CUSEL: number = 239;
	static DOM_VK_WIN_OEM_ENLW: number = 244;
	static DOM_VK_WIN_OEM_FINISH: number = 241;
	static DOM_VK_WIN_OEM_FJ_JISHO: number = 146;
	static DOM_VK_WIN_OEM_FJ_LOYA: number = 149;
	static DOM_VK_WIN_OEM_FJ_MASSHOU: number = 147;
	static DOM_VK_WIN_OEM_FJ_ROYA: number = 150;
	static DOM_VK_WIN_OEM_FJ_TOUROKU: number = 148;
	static DOM_VK_WIN_OEM_JUMP: number = 234;
	static DOM_VK_WIN_OEM_PA1: number = 235;
	static DOM_VK_WIN_OEM_PA2: number = 236;
	static DOM_VK_WIN_OEM_PA3: number = 237;
	static DOM_VK_WIN_OEM_RESET: number = 233;
	static DOM_VK_WIN_OEM_WSCTRL: number = 238;
	static DOM_VK_X: number = 88;
	static DOM_VK_Y: number = 89;
	static DOM_VK_Z: number = 90;
	static DOM_VK_ZOOM: number = 251;
	get AltKey(): boolean
	{
		return false;
	}
	get CharCode(): number
	{
		return 0;
	}
	get CtrlKey(): boolean
	{
		return false;
	}
	get Key(): string
	{
		return null;
	}
	get KeyCode(): number
	{
		return 0;
	}
	get Location(): number
	{
		return 0;
	}
	get MetaKey(): boolean
	{
		return false;
	}
	get Repeat(): boolean
	{
		return false;
	}
	get ShiftKey(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	GetModifierState(key: string): boolean
	{
		return false;
	}
	InitKeyEvent(type: string, canBubble: boolean, cancelable: boolean, view: WindowInstance, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, keyCode: number, charCode: number): void
	{
	}
}
class LabelElement extends Element
{
	get Control(): Element
	{
		return null;
	}
	get Form(): FormElement
	{
		return null;
	}
	set HtmlFor(value: string)
	{
	}
	get HtmlFor(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: LabelElementEvents, listener: () => void): void;
	AddEventListener(type: LabelElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: LabelElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: LabelElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void): void;
	AddEventListener(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: LabelElementEvents, listener: IEventListener): void;
	AddEventListener(type: LabelElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: LabelElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: LabelElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: LabelElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: LabelElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: LabelElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: LabelElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: LabelElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: LabelElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: LabelElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: LabelElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: LabelElementEvents, listener: () => void): void;
	RemoveEventListener(type: LabelElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: LabelElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: LabelElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void): void;
	RemoveEventListener(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LabelElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: LabelElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: LabelElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: LabelElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: LabelElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: LabelElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: LabelElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: LabelElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: LabelElementEvents, listener: (target: LabelElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: LabelElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: LabelElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: LabelElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: LabelElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum LabelElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class LegendElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	get Form(): FormElement
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: LegendElementEvents, listener: () => void): void;
	AddEventListener(type: LegendElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: LegendElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: LegendElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void): void;
	AddEventListener(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: LegendElementEvents, listener: IEventListener): void;
	AddEventListener(type: LegendElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: LegendElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: LegendElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: LegendElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: LegendElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: LegendElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: LegendElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: LegendElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: LegendElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: LegendElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: LegendElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: LegendElementEvents, listener: () => void): void;
	RemoveEventListener(type: LegendElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: LegendElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: LegendElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void): void;
	RemoveEventListener(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LegendElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: LegendElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: LegendElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: LegendElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: LegendElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: LegendElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: LegendElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: LegendElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: LegendElementEvents, listener: (target: LegendElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: LegendElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: LegendElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: LegendElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: LegendElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum LegendElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class LIElement extends Element
{
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: LIElementEvents, listener: () => void): void;
	AddEventListener(type: LIElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: LIElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: LIElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: LIElementEvents, listener: (target: LIElement, event: Event) => void): void;
	AddEventListener(type: LIElementEvents, listener: (target: LIElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: LIElementEvents, listener: IEventListener): void;
	AddEventListener(type: LIElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: LIElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: LIElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: LIElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: LIElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: LIElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: LIElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: LIElementEvents, listener: (target: LIElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: LIElementEvents, listener: (target: LIElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: LIElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: LIElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: LIElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: LIElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: LIElementEvents, listener: () => void): void;
	RemoveEventListener(type: LIElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: LIElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: LIElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LIElementEvents, listener: (target: LIElement, event: Event) => void): void;
	RemoveEventListener(type: LIElementEvents, listener: (target: LIElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LIElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: LIElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: LIElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: LIElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: LIElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: LIElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: LIElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: LIElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: LIElementEvents, listener: (target: LIElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: LIElementEvents, listener: (target: LIElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: LIElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: LIElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: LIElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: LIElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum LIElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class LinkElement extends Element
{
	set Charset(value: string)
	{
	}
	get Charset(): string
	{
		return null;
	}
	set CrossOrigin(value: string)
	{
	}
	get CrossOrigin(): string
	{
		return null;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	set Hreflang(value: string)
	{
	}
	get Hreflang(): string
	{
		return null;
	}
	set Media(value: string)
	{
	}
	get Media(): string
	{
		return null;
	}
	set Rel(value: string)
	{
	}
	get Rel(): string
	{
		return null;
	}
	get RelList(): TokenList
	{
		return null;
	}
	set Rev(value: string)
	{
	}
	get Rev(): string
	{
		return null;
	}
	get Sheet(): StyleSheet
	{
		return null;
	}
	set Target(value: string)
	{
	}
	get Target(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: LinkElementEvents, listener: () => void): void;
	AddEventListener(type: LinkElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: LinkElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: LinkElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void): void;
	AddEventListener(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: LinkElementEvents, listener: IEventListener): void;
	AddEventListener(type: LinkElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: LinkElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: LinkElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: LinkElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: LinkElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: LinkElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: LinkElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: LinkElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: LinkElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: LinkElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: LinkElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: LinkElementEvents, listener: () => void): void;
	RemoveEventListener(type: LinkElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: LinkElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: LinkElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void): void;
	RemoveEventListener(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: LinkElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: LinkElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: LinkElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: LinkElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: LinkElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: LinkElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: LinkElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: LinkElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: LinkElementEvents, listener: (target: LinkElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: LinkElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: LinkElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: LinkElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: LinkElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum LinkElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Location extends NObject
{
	set Hash(value: string)
	{
	}
	get Hash(): string
	{
		return null;
	}
	set Host(value: string)
	{
	}
	get Host(): string
	{
		return null;
	}
	set Hostname(value: string)
	{
	}
	get Hostname(): string
	{
		return null;
	}
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	get Origin(): string
	{
		return null;
	}
	set Password(value: string)
	{
	}
	get Password(): string
	{
		return null;
	}
	set Pathname(value: string)
	{
	}
	get Pathname(): string
	{
		return null;
	}
	set Port(value: string)
	{
	}
	get Port(): string
	{
		return null;
	}
	set Protocol(value: string)
	{
	}
	get Protocol(): string
	{
		return null;
	}
	set Search(value: string)
	{
	}
	get Search(): string
	{
		return null;
	}
	set SearchParams(value: URLSearchParams)
	{
	}
	get SearchParams(): URLSearchParams
	{
		return null;
	}
	set Username(value: string)
	{
	}
	get Username(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Assign(url: string): void
	{
	}
	Reload(): void;
	Reload(forcedReload: boolean): void;
	Reload(forcedReload?: boolean): void
	{
		if (arguments.length === 0)
		{
			this.Reload_0();
			return;
		}
		this.Reload_1(forcedReload);
	}
	private Reload_0(): void
	{
	}
	Replace(url: string): void
	{
	}
	private Reload_1(forcedReload: boolean): void
	{
	}
}
class MapElement extends Element
{
	get Areas(): ElementCollection
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MapElementEvents, listener: () => void): void;
	AddEventListener(type: MapElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MapElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MapElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MapElementEvents, listener: (target: MapElement, event: Event) => void): void;
	AddEventListener(type: MapElementEvents, listener: (target: MapElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MapElementEvents, listener: IEventListener): void;
	AddEventListener(type: MapElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MapElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MapElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MapElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MapElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MapElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MapElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MapElementEvents, listener: (target: MapElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MapElementEvents, listener: (target: MapElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MapElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MapElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MapElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MapElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MapElementEvents, listener: () => void): void;
	RemoveEventListener(type: MapElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MapElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MapElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MapElementEvents, listener: (target: MapElement, event: Event) => void): void;
	RemoveEventListener(type: MapElementEvents, listener: (target: MapElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MapElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MapElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MapElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MapElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MapElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MapElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MapElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MapElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MapElementEvents, listener: (target: MapElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MapElementEvents, listener: (target: MapElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MapElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MapElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MapElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MapElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum MapElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum MediaElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MediaList extends NObject
{
	get_Item(index: number): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	set MediaText(value: string)
	{
	}
	get MediaText(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AppendMedium(newMedium: string): void
	{
	}
	DeleteMedium(oldMedium: string): void
	{
	}
	GetEnumerator(): IEnumerator<string>
	{
		return null;
	}
	Item(index: number): string
	{
		return null;
	}
}
class MediaQueryList extends NObject
{
	get Matches(): boolean
	{
		return false;
	}
	get Media(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddListener(listener: (list: MediaQueryList) => void): void
	{
	}
	RemoveListener(listener: (list: MediaQueryList) => void): void
	{
	}
}
class MenuElement extends Element
{
	set Compact(value: boolean)
	{
	}
	get Compact(): boolean
	{
		return false;
	}
	set Label(value: string)
	{
	}
	get Label(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MenuElementEvents, listener: () => void): void;
	AddEventListener(type: MenuElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MenuElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MenuElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void): void;
	AddEventListener(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MenuElementEvents, listener: IEventListener): void;
	AddEventListener(type: MenuElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MenuElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MenuElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MenuElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MenuElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MenuElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MenuElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MenuElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MenuElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MenuElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MenuElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MenuElementEvents, listener: () => void): void;
	RemoveEventListener(type: MenuElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MenuElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MenuElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void): void;
	RemoveEventListener(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MenuElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MenuElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MenuElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MenuElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MenuElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MenuElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MenuElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MenuElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MenuElementEvents, listener: (target: MenuElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MenuElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MenuElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MenuElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MenuElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum MenuElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MenuItemElement extends Element
{
	set Checked(value: boolean)
	{
	}
	get Checked(): boolean
	{
		return false;
	}
	set DefaultChecked(value: boolean)
	{
	}
	get DefaultChecked(): boolean
	{
		return false;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	set Icon(value: string)
	{
	}
	get Icon(): string
	{
		return null;
	}
	set Label(value: string)
	{
	}
	get Label(): string
	{
		return null;
	}
	set Radiogroup(value: string)
	{
	}
	get Radiogroup(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MenuItemElementEvents, listener: () => void): void;
	AddEventListener(type: MenuItemElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MenuItemElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MenuItemElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void): void;
	AddEventListener(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MenuItemElementEvents, listener: IEventListener): void;
	AddEventListener(type: MenuItemElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MenuItemElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MenuItemElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MenuItemElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MenuItemElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MenuItemElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MenuItemElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MenuItemElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MenuItemElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MenuItemElementEvents, listener: () => void): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MenuItemElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MenuItemElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MenuItemElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MenuItemElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MenuItemElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MenuItemElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MenuItemElementEvents, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MenuItemElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MenuItemElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MenuItemElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MenuItemElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum MenuItemElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MetaElement extends Element
{
	set Content(value: string)
	{
	}
	get Content(): string
	{
		return null;
	}
	set HttpEquiv(value: string)
	{
	}
	get HttpEquiv(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Scheme(value: string)
	{
	}
	get Scheme(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MetaElementEvents, listener: () => void): void;
	AddEventListener(type: MetaElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MetaElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MetaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void): void;
	AddEventListener(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MetaElementEvents, listener: IEventListener): void;
	AddEventListener(type: MetaElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MetaElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MetaElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MetaElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MetaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MetaElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MetaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MetaElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MetaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MetaElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MetaElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MetaElementEvents, listener: () => void): void;
	RemoveEventListener(type: MetaElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MetaElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MetaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void): void;
	RemoveEventListener(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MetaElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MetaElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MetaElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MetaElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MetaElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MetaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MetaElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MetaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MetaElementEvents, listener: (target: MetaElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MetaElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MetaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MetaElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MetaElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum MetaElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MeterElement extends Element
{
	set High(value: number)
	{
	}
	get High(): number
	{
		return 0.0;
	}
	set Low(value: number)
	{
	}
	get Low(): number
	{
		return 0.0;
	}
	set Max(value: number)
	{
	}
	get Max(): number
	{
		return 0.0;
	}
	set Min(value: number)
	{
	}
	get Min(): number
	{
		return 0.0;
	}
	set Optimum(value: number)
	{
	}
	get Optimum(): number
	{
		return 0.0;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MeterElementEvents, listener: () => void): void;
	AddEventListener(type: MeterElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MeterElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MeterElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void): void;
	AddEventListener(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MeterElementEvents, listener: IEventListener): void;
	AddEventListener(type: MeterElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MeterElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MeterElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MeterElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MeterElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MeterElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MeterElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MeterElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MeterElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MeterElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MeterElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MeterElementEvents, listener: () => void): void;
	RemoveEventListener(type: MeterElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MeterElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MeterElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void): void;
	RemoveEventListener(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MeterElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: MeterElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MeterElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MeterElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MeterElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MeterElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MeterElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MeterElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MeterElementEvents, listener: (target: MeterElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MeterElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MeterElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MeterElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MeterElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum MeterElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MimeType extends NObject
{
	get Description(): string
	{
		return null;
	}
	get EnabledPlugin(): Plugin
	{
		return null;
	}
	get Suffixes(): string
	{
		return null;
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class MimeTypeArray extends NObject
{
	get_Item(index: number): MimeType
	{
		return null;
	}
	get_Item(name: string): MimeType
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<MimeType>
	{
		return null;
	}
	Item(index: number): MimeType
	{
		return null;
	}
	NamedItem(name: string): MimeType
	{
		return null;
	}
}
class ModElement extends Element
{
	set Cite(value: string)
	{
	}
	get Cite(): string
	{
		return null;
	}
	set DateTime(value: string)
	{
	}
	get DateTime(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ModElementEvents, listener: () => void): void;
	AddEventListener(type: ModElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ModElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ModElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ModElementEvents, listener: (target: ModElement, event: Event) => void): void;
	AddEventListener(type: ModElementEvents, listener: (target: ModElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ModElementEvents, listener: IEventListener): void;
	AddEventListener(type: ModElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ModElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ModElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ModElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ModElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ModElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ModElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ModElementEvents, listener: (target: ModElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ModElementEvents, listener: (target: ModElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ModElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ModElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ModElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ModElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ModElementEvents, listener: () => void): void;
	RemoveEventListener(type: ModElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ModElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ModElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ModElementEvents, listener: (target: ModElement, event: Event) => void): void;
	RemoveEventListener(type: ModElementEvents, listener: (target: ModElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ModElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ModElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ModElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ModElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ModElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ModElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ModElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ModElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ModElementEvents, listener: (target: ModElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ModElementEvents, listener: (target: ModElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ModElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ModElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ModElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ModElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ModElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class MouseEventInit extends NObject
{
	AltKey: boolean = false;
	Bubbles: boolean = false;
	Button: number = 0;
	Buttons: number = 0;
	Cancelable: boolean = false;
	ClientX: number = 0;
	ClientY: number = 0;
	CtrlKey: boolean = false;
	Detail: number = 0;
	MetaKey: boolean = false;
	RelatedTarget: EventTarget = null;
	ScreenX: number = 0;
	ScreenY: number = 0;
	ShiftKey: boolean = false;
	View: WindowInstance = null;
	constructor()
	{
		super();
	}
}
class Navigator extends NObject
{
	static get AppCodeName(): string
	{
		return null;
	}
	static get AppName(): string
	{
		return null;
	}
	static get AppVersion(): string
	{
		return null;
	}
	static get Battery(): BatteryManager
	{
		return null;
	}
	static get BuildID(): string
	{
		return null;
	}
	static get CookieEnabled(): boolean
	{
		return false;
	}
	static get DoNotTrack(): string
	{
		return null;
	}
	static get Geolocation(): GeolocationService
	{
		return null;
	}
	static get Language(): string
	{
		return null;
	}
	static get MaxTouchPoints(): number
	{
		return 0;
	}
	static get MimeTypes(): MimeTypeArray
	{
		return null;
	}
	static get OnLine(): boolean
	{
		return false;
	}
	static get Oscpu(): string
	{
		return null;
	}
	static get Platform(): string
	{
		return null;
	}
	static get Plugins(): PluginArray
	{
		return null;
	}
	static get Product(): string
	{
		return null;
	}
	static get ProductSub(): string
	{
		return null;
	}
	static get UserAgent(): string
	{
		return null;
	}
	static get Vendor(): string
	{
		return null;
	}
	static get VendorSub(): string
	{
		return null;
	}
	static JavaEnabled(): boolean
	{
		return false;
	}
	static RegisterContentHandler(mimeType: string, url: string, title: string): void
	{
	}
	static RegisterProtocolHandler(scheme: string, url: string, title: string): void
	{
	}
	static SendBeacon(url: string): boolean;
	static SendBeacon(url: string, data: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean;
	static SendBeacon(url: string, data?: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean
	{
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			return Navigator.SendBeacon_0(url);
		}
		return Navigator.SendBeacon_1(url, data);
	}
	private static SendBeacon_0(url: string): boolean
	{
		return false;
	}
	private static SendBeacon_1(url: string, data: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean
	{
		return false;
	}
	static TaintEnabled(): boolean
	{
		return false;
	}
	static Vibrate(duration: number): boolean;
	static Vibrate(pattern: number[]): boolean;
	static Vibrate(durationOrPattern: any): boolean
	{
		if (arguments.length === 1 && (durationOrPattern === null || durationOrPattern.constructor === Number))
		{
			return Navigator.Vibrate_0(durationOrPattern);
		}
		return Navigator.Vibrate_1(durationOrPattern);
	}
	private static Vibrate_0(duration: number): boolean
	{
		return false;
	}
	private static Vibrate_1(pattern: number[]): boolean
	{
		return false;
	}
	static GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void): void;
	static GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror: (arg: string) => void): void;
	static GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror?: (arg: string) => void): void
	{
		if (arguments.length === 2 && (params === null || params instanceof MediaStreamOptions))
		{
			Navigator.GetUserMedia_0(params, onsuccess);
			return;
		}
		Navigator.GetUserMedia_1(params, onsuccess, onerror);
	}
	private static GetUserMedia_0(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void): void
	{
	}
	private static GetUserMedia_1(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror: (arg: string) => void): void
	{
	}
	constructor()
	{
		super();
	}
}
class NavigatorInstance extends NObject
{
	get AppCodeName(): string
	{
		return null;
	}
	get AppName(): string
	{
		return null;
	}
	get AppVersion(): string
	{
		return null;
	}
	get Battery(): BatteryManager
	{
		return null;
	}
	get BuildID(): string
	{
		return null;
	}
	get CookieEnabled(): boolean
	{
		return false;
	}
	get DoNotTrack(): string
	{
		return null;
	}
	get Geolocation(): GeolocationService
	{
		return null;
	}
	get Language(): string
	{
		return null;
	}
	get MaxTouchPoints(): number
	{
		return 0;
	}
	get MimeTypes(): MimeTypeArray
	{
		return null;
	}
	get OnLine(): boolean
	{
		return false;
	}
	get Oscpu(): string
	{
		return null;
	}
	get Platform(): string
	{
		return null;
	}
	get Plugins(): PluginArray
	{
		return null;
	}
	get Product(): string
	{
		return null;
	}
	get ProductSub(): string
	{
		return null;
	}
	get UserAgent(): string
	{
		return null;
	}
	get Vendor(): string
	{
		return null;
	}
	get VendorSub(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	JavaEnabled(): boolean
	{
		return false;
	}
	RegisterContentHandler(mimeType: string, url: string, title: string): void
	{
	}
	RegisterProtocolHandler(scheme: string, url: string, title: string): void
	{
	}
	SendBeacon(url: string): boolean;
	SendBeacon(url: string, data: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean;
	SendBeacon(url: string, data?: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean
	{
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			return this.SendBeacon_0(url);
		}
		return this.SendBeacon_1(url, data);
	}
	private SendBeacon_0(url: string): boolean
	{
		return false;
	}
	private SendBeacon_1(url: string, data: TypeOption<ArrayBufferView, Blob, string, FormData>): boolean
	{
		return false;
	}
	TaintEnabled(): boolean
	{
		return false;
	}
	Vibrate(duration: number): boolean;
	Vibrate(pattern: number[]): boolean;
	Vibrate(durationOrPattern: any): boolean
	{
		if (arguments.length === 1 && (durationOrPattern === null || durationOrPattern.constructor === Number))
		{
			return this.Vibrate_0(durationOrPattern);
		}
		return this.Vibrate_1(durationOrPattern);
	}
	private Vibrate_0(duration: number): boolean
	{
		return false;
	}
	private Vibrate_1(pattern: number[]): boolean
	{
		return false;
	}
	GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void): void;
	GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror: (arg: string) => void): void;
	GetUserMedia(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror?: (arg: string) => void): void
	{
		if (arguments.length === 2 && (params === null || params instanceof MediaStreamOptions))
		{
			this.GetUserMedia_0(params, onsuccess);
			return;
		}
		this.GetUserMedia_1(params, onsuccess, onerror);
	}
	private GetUserMedia_0(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void): void
	{
	}
	private GetUserMedia_1(params: MediaStreamOptions, onsuccess: (arg: LocalMediaStream) => void, onerror: (arg: string) => void): void
	{
	}
}
class ObjectElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Archive(value: string)
	{
	}
	get Archive(): string
	{
		return null;
	}
	set Border(value: string)
	{
	}
	get Border(): string
	{
		return null;
	}
	set Code(value: string)
	{
	}
	get Code(): string
	{
		return null;
	}
	set CodeBase(value: string)
	{
	}
	get CodeBase(): string
	{
		return null;
	}
	set CodeType(value: string)
	{
	}
	get CodeType(): string
	{
		return null;
	}
	get ContentDocument(): DocumentBase
	{
		return null;
	}
	get ContentWindow(): WindowInstance
	{
		return null;
	}
	set Data(value: string)
	{
	}
	get Data(): string
	{
		return null;
	}
	set Declare(value: boolean)
	{
	}
	get Declare(): boolean
	{
		return false;
	}
	get Form(): FormElement
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set Hspace(value: number)
	{
	}
	get Hspace(): number
	{
		return 0;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Standby(value: string)
	{
	}
	get Standby(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set TypeMustMatch(value: boolean)
	{
	}
	get TypeMustMatch(): boolean
	{
		return false;
	}
	set UseMap(value: string)
	{
	}
	get UseMap(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Vspace(value: number)
	{
	}
	get Vspace(): number
	{
		return 0;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ObjectElementEvents, listener: () => void): void;
	AddEventListener(type: ObjectElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ObjectElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ObjectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void): void;
	AddEventListener(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ObjectElementEvents, listener: IEventListener): void;
	AddEventListener(type: ObjectElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ObjectElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ObjectElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ObjectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ObjectElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ObjectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ObjectElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ObjectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ObjectElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	Call(_arguments: any[]): any
	{
		return null;
	}
	CheckValidity(): boolean
	{
		return false;
	}
	GetSVGDocument(): DocumentBase
	{
		return null;
	}
	RemoveEventListener(type: ObjectElementEvents, listener: () => void): void;
	RemoveEventListener(type: ObjectElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ObjectElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ObjectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void): void;
	RemoveEventListener(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ObjectElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ObjectElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ObjectElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ObjectElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ObjectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ObjectElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ObjectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ObjectElementEvents, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ObjectElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ObjectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ObjectElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
}
enum ObjectElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ObjectUrlOptions extends NObject
{
	constructor()
	{
		super();
	}
}
class OListElement extends Element
{
	set Compact(value: boolean)
	{
	}
	get Compact(): boolean
	{
		return false;
	}
	set Reversed(value: boolean)
	{
	}
	get Reversed(): boolean
	{
		return false;
	}
	set Start(value: number)
	{
	}
	get Start(): number
	{
		return 0;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: OListElementEvents, listener: () => void): void;
	AddEventListener(type: OListElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OListElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OListElementEvents, listener: (target: OListElement, event: Event) => void): void;
	AddEventListener(type: OListElementEvents, listener: (target: OListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OListElementEvents, listener: IEventListener): void;
	AddEventListener(type: OListElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OListElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OListElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OListElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OListElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OListElementEvents, listener: (target: OListElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OListElementEvents, listener: (target: OListElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OListElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OListElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OListElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: OListElementEvents, listener: () => void): void;
	RemoveEventListener(type: OListElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OListElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OListElementEvents, listener: (target: OListElement, event: Event) => void): void;
	RemoveEventListener(type: OListElementEvents, listener: (target: OListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OListElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: OListElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OListElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OListElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OListElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OListElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OListElementEvents, listener: (target: OListElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OListElementEvents, listener: (target: OListElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OListElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OListElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OListElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum OListElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class OptGroupElement extends Element
{
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	set Label(value: string)
	{
	}
	get Label(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: OptGroupElementEvents, listener: () => void): void;
	AddEventListener(type: OptGroupElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OptGroupElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OptGroupElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void): void;
	AddEventListener(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OptGroupElementEvents, listener: IEventListener): void;
	AddEventListener(type: OptGroupElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OptGroupElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OptGroupElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OptGroupElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OptGroupElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OptGroupElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OptGroupElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OptGroupElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OptGroupElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: OptGroupElementEvents, listener: () => void): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: OptGroupElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OptGroupElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OptGroupElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OptGroupElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OptGroupElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OptGroupElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OptGroupElementEvents, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OptGroupElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OptGroupElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OptGroupElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OptGroupElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum OptGroupElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class OptionElement extends Element
{
	set DefaultSelected(value: boolean)
	{
	}
	get DefaultSelected(): boolean
	{
		return false;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Form(): FormElement
	{
		return null;
	}
	get Index(): number
	{
		return 0;
	}
	set Label(value: string)
	{
	}
	get Label(): string
	{
		return null;
	}
	set Selected(value: boolean)
	{
	}
	get Selected(): boolean
	{
		return false;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor();
	constructor(text: string);
	constructor(text: string, value: string);
	constructor(text: string, value: string, defaultSelected: boolean);
	constructor(text: string, value: string, defaultSelected: boolean, selected: boolean);
	constructor(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (text === null || text.constructor === String))
		{
			super();
			this.constructor_1(text);
			return;
		}
		if (arguments.length === 2 && (text === null || text.constructor === String) && (value === null || value.constructor === String))
		{
			super();
			this.constructor_2(text, value);
			return;
		}
		if (arguments.length === 3 && (text === null || text.constructor === String) && (value === null || value.constructor === String) && (defaultSelected === null || defaultSelected.constructor === Boolean))
		{
			super();
			this.constructor_3(text, value, defaultSelected);
			return;
		}
		super();
		this.constructor_4(text, value, defaultSelected, selected);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(text: string): void
	{
	}
	private constructor_2(text: string, value: string): void
	{
	}
	private constructor_3(text: string, value: string, defaultSelected: boolean): void
	{
	}
	private constructor_4(text: string, value: string, defaultSelected: boolean, selected: boolean): void
	{
	}
	AddEventListener(type: OptionElementEvents, listener: () => void): void;
	AddEventListener(type: OptionElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OptionElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OptionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void): void;
	AddEventListener(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OptionElementEvents, listener: IEventListener): void;
	AddEventListener(type: OptionElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OptionElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OptionElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OptionElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OptionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OptionElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OptionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OptionElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OptionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OptionElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OptionElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: OptionElementEvents, listener: () => void): void;
	RemoveEventListener(type: OptionElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OptionElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OptionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void): void;
	RemoveEventListener(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OptionElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: OptionElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OptionElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OptionElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OptionElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OptionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OptionElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OptionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OptionElementEvents, listener: (target: OptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OptionElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OptionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OptionElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OptionElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum OptionElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class OutputElement extends Element
{
	set DefaultValue(value: string)
	{
	}
	get DefaultValue(): string
	{
		return null;
	}
	get Form(): FormElement
	{
		return null;
	}
	get HtmlFor(): DOMSettableTokenList
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Type(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: OutputElementEvents, listener: () => void): void;
	AddEventListener(type: OutputElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OutputElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OutputElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void): void;
	AddEventListener(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OutputElementEvents, listener: IEventListener): void;
	AddEventListener(type: OutputElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OutputElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OutputElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OutputElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OutputElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OutputElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OutputElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OutputElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OutputElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OutputElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OutputElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	RemoveEventListener(type: OutputElementEvents, listener: () => void): void;
	RemoveEventListener(type: OutputElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OutputElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OutputElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void): void;
	RemoveEventListener(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OutputElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: OutputElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OutputElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OutputElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OutputElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OutputElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OutputElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OutputElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OutputElementEvents, listener: (target: OutputElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OutputElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OutputElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OutputElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OutputElement, event: Event) => void, capture: boolean): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
}
enum OutputElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class PageTransitionEvent extends Event
{
	get Persisted(): boolean
	{
		return false;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: PageTransitionEventInit);
	constructor(type?: string, eventInitDict?: PageTransitionEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: PageTransitionEventInit): void
	{
	}
	InitPageTransitionEvent(type: string, canBubble: boolean, cancelable: boolean, persisted: boolean): void
	{
	}
}
class PageTransitionEventInit extends EventInit
{
	Persisted: boolean = false;
	constructor()
	{
		super();
	}
}
class ParagraphElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ParagraphElementEvents, listener: () => void): void;
	AddEventListener(type: ParagraphElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ParagraphElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ParagraphElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void): void;
	AddEventListener(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ParagraphElementEvents, listener: IEventListener): void;
	AddEventListener(type: ParagraphElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ParagraphElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ParagraphElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ParagraphElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ParagraphElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ParagraphElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ParagraphElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ParagraphElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ParagraphElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ParagraphElementEvents, listener: () => void): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ParagraphElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ParagraphElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ParagraphElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ParagraphElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ParagraphElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ParagraphElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ParagraphElementEvents, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ParagraphElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ParagraphElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ParagraphElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ParagraphElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ParagraphElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ParamElement extends Element
{
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	set ValueType(value: string)
	{
	}
	get ValueType(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ParamElementEvents, listener: () => void): void;
	AddEventListener(type: ParamElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ParamElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ParamElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void): void;
	AddEventListener(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ParamElementEvents, listener: IEventListener): void;
	AddEventListener(type: ParamElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ParamElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ParamElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ParamElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ParamElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ParamElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ParamElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ParamElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ParamElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ParamElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ParamElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ParamElementEvents, listener: () => void): void;
	RemoveEventListener(type: ParamElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ParamElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ParamElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void): void;
	RemoveEventListener(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ParamElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ParamElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ParamElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ParamElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ParamElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ParamElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ParamElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ParamElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ParamElementEvents, listener: (target: ParamElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ParamElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ParamElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ParamElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ParamElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ParamElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Plugin extends NObject
{
	get_Item(index: number): MimeType
	{
		return null;
	}
	get_Item(name: string): MimeType
	{
		return null;
	}
	get Description(): string
	{
		return null;
	}
	get Filename(): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get Name(): string
	{
		return null;
	}
	get Version(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<MimeType>
	{
		return null;
	}
	Item(index: number): MimeType
	{
		return null;
	}
	NamedItem(name: string): MimeType
	{
		return null;
	}
}
class PluginArray extends NObject
{
	get_Item(index: number): Plugin
	{
		return null;
	}
	get_Item(name: string): Plugin
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<Plugin>
	{
		return null;
	}
	Item(index: number): Plugin
	{
		return null;
	}
	NamedItem(name: string): Plugin
	{
		return null;
	}
	Refresh(): void;
	Refresh(reloadDocuments: boolean): void;
	Refresh(reloadDocuments?: boolean): void
	{
		if (arguments.length === 0)
		{
			this.Refresh_0();
			return;
		}
		this.Refresh_1(reloadDocuments);
	}
	private Refresh_0(): void
	{
	}
	private Refresh_1(reloadDocuments: boolean): void
	{
	}
}
class PointerEvent extends MouseEvent
{
	get Height(): number
	{
		return 0;
	}
	get IsPrimary(): boolean
	{
		return false;
	}
	get PointerId(): number
	{
		return 0;
	}
	get PointerType(): string
	{
		return null;
	}
	get Pressure(): number
	{
		return 0.0;
	}
	get TiltX(): number
	{
		return 0;
	}
	get TiltY(): number
	{
		return 0;
	}
	get Width(): number
	{
		return 0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: PointerEventInit);
	constructor(type?: string, eventInitDict?: PointerEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: PointerEventInit): void
	{
	}
}
class PointerEventInit extends MouseEventInit
{
	Height: number = 0;
	IsPrimary: boolean = false;
	PointerId: number = 0;
	PointerType: string = null;
	Pressure: number = 0;
	TiltX: number = 0;
	TiltY: number = 0;
	Width: number = 0;
	constructor()
	{
		super();
	}
}
class PopStateEvent extends Event
{
	get State(): any
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: PopStateEventInit);
	constructor(type?: string, eventInitDict?: PopStateEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: PopStateEventInit): void
	{
	}
	InitPopStateEvent(type: string, canBubble: boolean, cancelable: boolean, state: any): void
	{
	}
}
class PopStateEventInit extends EventInit
{
	State: any = null;
	constructor()
	{
		super();
	}
}
class PreElement extends Element
{
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: PreElementEvents, listener: () => void): void;
	AddEventListener(type: PreElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: PreElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: PreElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: PreElementEvents, listener: (target: PreElement, event: Event) => void): void;
	AddEventListener(type: PreElementEvents, listener: (target: PreElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: PreElementEvents, listener: IEventListener): void;
	AddEventListener(type: PreElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: PreElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: PreElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: PreElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: PreElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: PreElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: PreElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: PreElementEvents, listener: (target: PreElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: PreElementEvents, listener: (target: PreElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: PreElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: PreElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: PreElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: PreElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: PreElementEvents, listener: () => void): void;
	RemoveEventListener(type: PreElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: PreElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: PreElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: PreElementEvents, listener: (target: PreElement, event: Event) => void): void;
	RemoveEventListener(type: PreElementEvents, listener: (target: PreElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: PreElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: PreElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: PreElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: PreElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: PreElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: PreElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: PreElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: PreElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: PreElementEvents, listener: (target: PreElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: PreElementEvents, listener: (target: PreElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: PreElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: PreElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: PreElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: PreElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum PreElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class ProgressElement extends Element
{
	set Max(value: number)
	{
	}
	get Max(): number
	{
		return 0.0;
	}
	get Position(): number
	{
		return 0.0;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ProgressElementEvents, listener: () => void): void;
	AddEventListener(type: ProgressElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ProgressElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ProgressElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void): void;
	AddEventListener(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ProgressElementEvents, listener: IEventListener): void;
	AddEventListener(type: ProgressElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ProgressElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ProgressElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ProgressElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ProgressElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ProgressElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ProgressElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ProgressElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ProgressElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ProgressElementEvents, listener: () => void): void;
	RemoveEventListener(type: ProgressElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ProgressElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ProgressElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void): void;
	RemoveEventListener(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ProgressElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ProgressElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ProgressElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ProgressElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ProgressElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ProgressElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ProgressElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ProgressElementEvents, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ProgressElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ProgressElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ProgressElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ProgressElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ProgressElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class QuoteElement extends Element
{
	set Cite(value: string)
	{
	}
	get Cite(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: QuoteElementEvents, listener: () => void): void;
	AddEventListener(type: QuoteElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: QuoteElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: QuoteElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void): void;
	AddEventListener(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: QuoteElementEvents, listener: IEventListener): void;
	AddEventListener(type: QuoteElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: QuoteElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: QuoteElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: QuoteElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: QuoteElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: QuoteElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: QuoteElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: QuoteElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: QuoteElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: QuoteElementEvents, listener: () => void): void;
	RemoveEventListener(type: QuoteElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: QuoteElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: QuoteElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void): void;
	RemoveEventListener(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: QuoteElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: QuoteElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: QuoteElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: QuoteElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: QuoteElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: QuoteElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: QuoteElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: QuoteElementEvents, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: QuoteElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: QuoteElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: QuoteElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: QuoteElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum QuoteElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Rect extends NObject
{
	get Bottom(): CSSPrimitiveValue
	{
		return null;
	}
	get Left(): CSSPrimitiveValue
	{
		return null;
	}
	get Right(): CSSPrimitiveValue
	{
		return null;
	}
	get Top(): CSSPrimitiveValue
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class RGBColor extends NObject
{
	get Alpha(): CSSPrimitiveValue
	{
		return null;
	}
	get Blue(): CSSPrimitiveValue
	{
		return null;
	}
	get Green(): CSSPrimitiveValue
	{
		return null;
	}
	get Red(): CSSPrimitiveValue
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class Screen extends EventTarget
{
	get AvailHeight(): number
	{
		return 0;
	}
	get AvailLeft(): number
	{
		return 0;
	}
	get AvailTop(): number
	{
		return 0;
	}
	get AvailWidth(): number
	{
		return 0;
	}
	get ColorDepth(): number
	{
		return 0;
	}
	get Height(): number
	{
		return 0;
	}
	get Left(): number
	{
		return 0;
	}
	get PixelDepth(): number
	{
		return 0;
	}
	get Top(): number
	{
		return 0;
	}
	get Width(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ScreenEvents, listener: () => void): void;
	AddEventListener(type: ScreenEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ScreenEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ScreenEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScreenEvents, listener: (target: Screen, event: Event) => void): void;
	AddEventListener(type: ScreenEvents, listener: (target: Screen, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScreenEvents, listener: IEventListener): void;
	AddEventListener(type: ScreenEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: Screen, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: Screen, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ScreenEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ScreenEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ScreenEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ScreenEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ScreenEvents, listener: (target: Screen, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ScreenEvents, listener: (target: Screen, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ScreenEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ScreenEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: Screen, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: Screen, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ScreenEvents, listener: () => void): void;
	RemoveEventListener(type: ScreenEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ScreenEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ScreenEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScreenEvents, listener: (target: Screen, event: Event) => void): void;
	RemoveEventListener(type: ScreenEvents, listener: (target: Screen, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScreenEvents, listener: IEventListener): void;
	RemoveEventListener(type: ScreenEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: Screen, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: Screen, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ScreenEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ScreenEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ScreenEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ScreenEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ScreenEvents, listener: (target: Screen, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ScreenEvents, listener: (target: Screen, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ScreenEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ScreenEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: Screen, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: Screen, event: Event) => void, capture: boolean): void
	{
	}
}
enum ScreenEvents
{
	Mozorientationchange
}
class ScriptElement extends Element
{
	set Async(value: boolean)
	{
	}
	get Async(): boolean
	{
		return false;
	}
	set Charset(value: string)
	{
	}
	get Charset(): string
	{
		return null;
	}
	set CrossOrigin(value: string)
	{
	}
	get CrossOrigin(): string
	{
		return null;
	}
	set Defer(value: boolean)
	{
	}
	get Defer(): boolean
	{
		return false;
	}
	set Event(value: string)
	{
	}
	get Event(): string
	{
		return null;
	}
	set HtmlFor(value: string)
	{
	}
	get HtmlFor(): string
	{
		return null;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ScriptElementEvents, listener: () => void): void;
	AddEventListener(type: ScriptElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ScriptElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ScriptElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void): void;
	AddEventListener(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScriptElementEvents, listener: IEventListener): void;
	AddEventListener(type: ScriptElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ScriptElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ScriptElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ScriptElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ScriptElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ScriptElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ScriptElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ScriptElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ScriptElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ScriptElementEvents, listener: () => void): void;
	RemoveEventListener(type: ScriptElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ScriptElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ScriptElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void): void;
	RemoveEventListener(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScriptElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ScriptElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ScriptElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ScriptElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ScriptElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ScriptElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ScriptElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ScriptElementEvents, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ScriptElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ScriptElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ScriptElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ScriptElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ScriptElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum ScrollBehavior
{
	Auto,
	Instant,
	Smooth
}
class ScrollOptions extends NObject
{
	Behavior: ScrollBehavior = 0;
	constructor()
	{
		super();
	}
}
class SelectElement extends Element
{
	get_Item(index: number): TypeOption<Element, OptionElement>
	{
		return null;
	}
	set_Item(index: number, value: TypeOption<Element, OptionElement>): void
	{
	}
	set Autofocus(value: boolean)
	{
	}
	get Autofocus(): boolean
	{
		return false;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Form(): FormElement
	{
		return null;
	}
	set Length(value: number)
	{
	}
	get Length(): number
	{
		return 0;
	}
	set Multiple(value: boolean)
	{
	}
	get Multiple(): boolean
	{
		return false;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Options(): HtmlOptionsCollection
	{
		return null;
	}
	set Required(value: boolean)
	{
	}
	get Required(): boolean
	{
		return false;
	}
	set SelectedIndex(value: number)
	{
	}
	get SelectedIndex(): number
	{
		return 0;
	}
	get SelectedOptions(): ElementCollection
	{
		return null;
	}
	set Size(value: number)
	{
	}
	get Size(): number
	{
		return 0;
	}
	get Type(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	Add(element: TypeOption<OptionElement, OptGroupElement>): void;
	Add(element: TypeOption<OptionElement, OptGroupElement>, before: TypeOption<Element, number>): void;
	Add(element: TypeOption<OptionElement, OptGroupElement>, before?: TypeOption<Element, number>): void
	{
		if (arguments.length === 1 && (element === null || element instanceof TypeOption))
		{
			this.Add_0(element);
			return;
		}
		this.Add_1(element, before);
	}
	private Add_0(element: TypeOption<OptionElement, OptGroupElement>): void
	{
	}
	private Add_1(element: TypeOption<OptionElement, OptGroupElement>, before: TypeOption<Element, number>): void
	{
	}
	AddEventListener(type: SelectElementEvents, listener: () => void): void;
	AddEventListener(type: SelectElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SelectElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SelectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void): void;
	AddEventListener(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SelectElementEvents, listener: IEventListener): void;
	AddEventListener(type: SelectElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SelectElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SelectElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SelectElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SelectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SelectElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SelectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SelectElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SelectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SelectElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SelectElement, event: Event) => void, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	GetEnumerator(): IEnumerator<Element>
	{
		return null;
	}
	Item(index: number): Element
	{
		return null;
	}
	NamedItem(name: string): OptionElement
	{
		return null;
	}
	new Remove(): void;
	new Remove(index: number): void;
	new Remove(index?: number): void
	{
		if (arguments.length === 0)
		{
			this.Remove_0();
			return;
		}
		this.Remove_1(index);
	}
	private new Remove_0(): void
	{
	}
	private Remove_1(index: number): void
	{
	}
	RemoveEventListener(type: SelectElementEvents, listener: () => void): void;
	RemoveEventListener(type: SelectElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SelectElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SelectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void): void;
	RemoveEventListener(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SelectElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: SelectElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SelectElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SelectElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SelectElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SelectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SelectElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SelectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SelectElementEvents, listener: (target: SelectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SelectElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SelectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SelectElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SelectElement, event: Event) => void, capture: boolean): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
}
enum SelectElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SelectionMode
{
	Select,
	Start,
	End,
	Preserve
}
class ShadowElement extends Element
{
	get OlderShadowRoot(): ShadowRoot
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ShadowElementEvents, listener: () => void): void;
	AddEventListener(type: ShadowElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ShadowElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ShadowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void): void;
	AddEventListener(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ShadowElementEvents, listener: IEventListener): void;
	AddEventListener(type: ShadowElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ShadowElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ShadowElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ShadowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ShadowElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ShadowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ShadowElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ShadowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ShadowElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ShadowElementEvents, listener: () => void): void;
	RemoveEventListener(type: ShadowElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ShadowElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ShadowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void): void;
	RemoveEventListener(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ShadowElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: ShadowElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ShadowElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ShadowElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ShadowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ShadowElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ShadowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ShadowElementEvents, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ShadowElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ShadowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ShadowElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ShadowElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum ShadowElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class XmlDocumentFragment extends XmlNode
{
	get ChildElementCount(): number
	{
		return 0;
	}
	get Children(): XmlElementCollection
	{
		return null;
	}
	get FirstElementChild(): XmlElement
	{
		return null;
	}
	get LastElementChild(): XmlElement
	{
		return null;
	}
	new AddEventListener(type: string, listener: (target: XmlDocumentFragment, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: () => void): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlDocumentFragmentEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlDocumentFragment, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlDocumentFragmentEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlDocumentFragmentEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlDocumentFragmentEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlDocumentFragmentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlDocumentFragmentEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlDocumentFragmentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetElementById(elementId: string): XmlElement
	{
		return null;
	}
	QuerySelector(selectors: string): XmlElement
	{
		return null;
	}
	QuerySelectorAll(selectors: string): XmlNodeList
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: XmlDocumentFragment, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlDocumentFragmentEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlDocumentFragment, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlDocumentFragmentEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlDocumentFragmentEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlDocumentFragmentEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlDocumentFragmentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlDocumentFragmentEvents, listener: (target: XmlDocumentFragment, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlDocumentFragmentEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlDocumentFragmentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	constructor()
	{
		super();
	}
}
class ShadowRoot extends XmlDocumentFragment
{
	set ApplyAuthorStyles(value: boolean)
	{
	}
	get ApplyAuthorStyles(): boolean
	{
		return false;
	}
	set InnerHTML(value: string)
	{
	}
	get InnerHTML(): string
	{
		return null;
	}
	get StyleSheets(): StyleSheetList
	{
		return null;
	}
	new get Children(): ElementCollection
	{
		return null;
	}
	new get FirstElementChild(): Element
	{
		return null;
	}
	new get LastElementChild(): Element
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ShadowRootEvents, listener: () => void): void;
	AddEventListener(type: ShadowRootEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ShadowRootEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ShadowRootEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void): void;
	AddEventListener(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ShadowRootEvents, listener: IEventListener): void;
	AddEventListener(type: ShadowRootEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ShadowRoot, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ShadowRootEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ShadowRootEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ShadowRootEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ShadowRootEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ShadowRootEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ShadowRootEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ShadowRoot, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void
	{
	}
	new GetElementById(elementId: string): Element
	{
		return null;
	}
	GetElementsByClassName(classNames: string): ElementCollection
	{
		return null;
	}
	GetElementsByTagName(localName: string): ElementCollection
	{
		return null;
	}
	GetElementsByTagNameNS(namespace: string, localName: string): ElementCollection
	{
		return null;
	}
	RemoveEventListener(type: ShadowRootEvents, listener: () => void): void;
	RemoveEventListener(type: ShadowRootEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ShadowRootEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ShadowRootEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void): void;
	RemoveEventListener(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ShadowRootEvents, listener: IEventListener): void;
	RemoveEventListener(type: ShadowRootEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ShadowRoot, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ShadowRootEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ShadowRootEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ShadowRootEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ShadowRootEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ShadowRootEvents, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ShadowRootEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ShadowRootEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ShadowRoot, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ShadowRoot, event: Event) => void, capture: boolean): void
	{
	}
	new QuerySelector(selectors: string): Element
	{
		return null;
	}
	new QuerySelectorAll(selectors: string): ElementNodeList
	{
		return null;
	}
}
enum ShadowRootEvents
{

}
class SourceElement extends Element
{
	set Media(value: string)
	{
	}
	get Media(): string
	{
		return null;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: SourceElementEvents, listener: () => void): void;
	AddEventListener(type: SourceElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SourceElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SourceElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void): void;
	AddEventListener(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceElementEvents, listener: IEventListener): void;
	AddEventListener(type: SourceElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SourceElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SourceElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SourceElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SourceElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SourceElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SourceElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SourceElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SourceElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SourceElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SourceElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: SourceElementEvents, listener: () => void): void;
	RemoveEventListener(type: SourceElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SourceElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SourceElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void): void;
	RemoveEventListener(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: SourceElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SourceElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SourceElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SourceElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SourceElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SourceElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SourceElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SourceElementEvents, listener: (target: SourceElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SourceElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SourceElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SourceElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SourceElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum SourceElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SpanElement extends Element
{
	constructor()
	{
		super();
	}
	AddEventListener(type: SpanElementEvents, listener: () => void): void;
	AddEventListener(type: SpanElementEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SpanElementEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SpanElementEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void): void;
	AddEventListener(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpanElementEvents, listener: IEventListener): void;
	AddEventListener(type: SpanElementEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SpanElement, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SpanElement, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SpanElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SpanElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SpanElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SpanElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SpanElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SpanElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SpanElement, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SpanElement, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: SpanElementEvents, listener: () => void): void;
	RemoveEventListener(type: SpanElementEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SpanElementEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SpanElementEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void): void;
	RemoveEventListener(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpanElementEvents, listener: IEventListener): void;
	RemoveEventListener(type: SpanElementEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SpanElement, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SpanElement, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SpanElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SpanElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SpanElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SpanElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SpanElementEvents, listener: (target: SpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SpanElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SpanElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SpanElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SpanElement, event: Event) => void, capture: boolean): void
	{
	}
}
enum SpanElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Style extends NObject
{
	get_Item(index: number): string
	{
		return null;
	}
	set AlignContent(value: string)
	{
	}
	get AlignContent(): string
	{
		return null;
	}
	set AlignItems(value: string)
	{
	}
	get AlignItems(): string
	{
		return null;
	}
	set AlignSelf(value: string)
	{
	}
	get AlignSelf(): string
	{
		return null;
	}
	set All(value: string)
	{
	}
	get All(): string
	{
		return null;
	}
	set Animation(value: string)
	{
	}
	get Animation(): string
	{
		return null;
	}
	set AnimationDelay(value: string)
	{
	}
	get AnimationDelay(): string
	{
		return null;
	}
	set AnimationDirection(value: string)
	{
	}
	get AnimationDirection(): string
	{
		return null;
	}
	set AnimationDuration(value: string)
	{
	}
	get AnimationDuration(): string
	{
		return null;
	}
	set AnimationFillMode(value: string)
	{
	}
	get AnimationFillMode(): string
	{
		return null;
	}
	set AnimationIterationCount(value: string)
	{
	}
	get AnimationIterationCount(): string
	{
		return null;
	}
	set AnimationName(value: string)
	{
	}
	get AnimationName(): string
	{
		return null;
	}
	set AnimationPlayState(value: string)
	{
	}
	get AnimationPlayState(): string
	{
		return null;
	}
	set AnimationTimingFunction(value: string)
	{
	}
	get AnimationTimingFunction(): string
	{
		return null;
	}
	set BackfaceVisibility(value: string)
	{
	}
	get BackfaceVisibility(): string
	{
		return null;
	}
	set Background(value: string)
	{
	}
	get Background(): string
	{
		return null;
	}
	set BackgroundAttachment(value: string)
	{
	}
	get BackgroundAttachment(): string
	{
		return null;
	}
	set BackgroundBlendMode(value: string)
	{
	}
	get BackgroundBlendMode(): string
	{
		return null;
	}
	set BackgroundClip(value: string)
	{
	}
	get BackgroundClip(): string
	{
		return null;
	}
	set BackgroundColor(value: string)
	{
	}
	get BackgroundColor(): string
	{
		return null;
	}
	set BackgroundImage(value: string)
	{
	}
	get BackgroundImage(): string
	{
		return null;
	}
	set BackgroundOrigin(value: string)
	{
	}
	get BackgroundOrigin(): string
	{
		return null;
	}
	set BackgroundPosition(value: string)
	{
	}
	get BackgroundPosition(): string
	{
		return null;
	}
	set BackgroundRepeat(value: string)
	{
	}
	get BackgroundRepeat(): string
	{
		return null;
	}
	set BackgroundSize(value: string)
	{
	}
	get BackgroundSize(): string
	{
		return null;
	}
	set Border(value: string)
	{
	}
	get Border(): string
	{
		return null;
	}
	set BorderBottom(value: string)
	{
	}
	get BorderBottom(): string
	{
		return null;
	}
	set BorderBottomColor(value: string)
	{
	}
	get BorderBottomColor(): string
	{
		return null;
	}
	set BorderBottomLeftRadius(value: string)
	{
	}
	get BorderBottomLeftRadius(): string
	{
		return null;
	}
	set BorderBottomRightRadius(value: string)
	{
	}
	get BorderBottomRightRadius(): string
	{
		return null;
	}
	set BorderBottomStyle(value: string)
	{
	}
	get BorderBottomStyle(): string
	{
		return null;
	}
	set BorderBottomWidth(value: string)
	{
	}
	get BorderBottomWidth(): string
	{
		return null;
	}
	set BorderCollapse(value: string)
	{
	}
	get BorderCollapse(): string
	{
		return null;
	}
	set BorderColor(value: string)
	{
	}
	get BorderColor(): string
	{
		return null;
	}
	set BorderImage(value: string)
	{
	}
	get BorderImage(): string
	{
		return null;
	}
	set BorderImageOutset(value: string)
	{
	}
	get BorderImageOutset(): string
	{
		return null;
	}
	set BorderImageRepeat(value: string)
	{
	}
	get BorderImageRepeat(): string
	{
		return null;
	}
	set BorderImageSlice(value: string)
	{
	}
	get BorderImageSlice(): string
	{
		return null;
	}
	set BorderImageSource(value: string)
	{
	}
	get BorderImageSource(): string
	{
		return null;
	}
	set BorderImageWidth(value: string)
	{
	}
	get BorderImageWidth(): string
	{
		return null;
	}
	set BorderLeft(value: string)
	{
	}
	get BorderLeft(): string
	{
		return null;
	}
	set BorderLeftColor(value: string)
	{
	}
	get BorderLeftColor(): string
	{
		return null;
	}
	set BorderLeftStyle(value: string)
	{
	}
	get BorderLeftStyle(): string
	{
		return null;
	}
	set BorderLeftWidth(value: string)
	{
	}
	get BorderLeftWidth(): string
	{
		return null;
	}
	set BorderRadius(value: string)
	{
	}
	get BorderRadius(): string
	{
		return null;
	}
	set BorderRight(value: string)
	{
	}
	get BorderRight(): string
	{
		return null;
	}
	set BorderRightColor(value: string)
	{
	}
	get BorderRightColor(): string
	{
		return null;
	}
	set BorderRightStyle(value: string)
	{
	}
	get BorderRightStyle(): string
	{
		return null;
	}
	set BorderRightWidth(value: string)
	{
	}
	get BorderRightWidth(): string
	{
		return null;
	}
	set BorderSpacing(value: string)
	{
	}
	get BorderSpacing(): string
	{
		return null;
	}
	set BorderStyle(value: string)
	{
	}
	get BorderStyle(): string
	{
		return null;
	}
	set BorderTop(value: string)
	{
	}
	get BorderTop(): string
	{
		return null;
	}
	set BorderTopColor(value: string)
	{
	}
	get BorderTopColor(): string
	{
		return null;
	}
	set BorderTopLeftRadius(value: string)
	{
	}
	get BorderTopLeftRadius(): string
	{
		return null;
	}
	set BorderTopRightRadius(value: string)
	{
	}
	get BorderTopRightRadius(): string
	{
		return null;
	}
	set BorderTopStyle(value: string)
	{
	}
	get BorderTopStyle(): string
	{
		return null;
	}
	set BorderTopWidth(value: string)
	{
	}
	get BorderTopWidth(): string
	{
		return null;
	}
	set BorderWidth(value: string)
	{
	}
	get BorderWidth(): string
	{
		return null;
	}
	set Bottom(value: string)
	{
	}
	get Bottom(): string
	{
		return null;
	}
	set BoxShadow(value: string)
	{
	}
	get BoxShadow(): string
	{
		return null;
	}
	set BoxSizing(value: string)
	{
	}
	get BoxSizing(): string
	{
		return null;
	}
	set CaptionSide(value: string)
	{
	}
	get CaptionSide(): string
	{
		return null;
	}
	set Clear(value: string)
	{
	}
	get Clear(): string
	{
		return null;
	}
	set Clip(value: string)
	{
	}
	get Clip(): string
	{
		return null;
	}
	set ClipPath(value: string)
	{
	}
	get ClipPath(): string
	{
		return null;
	}
	set ClipRule(value: string)
	{
	}
	get ClipRule(): string
	{
		return null;
	}
	set Color(value: string)
	{
	}
	get Color(): string
	{
		return null;
	}
	set ColorInterpolation(value: string)
	{
	}
	get ColorInterpolation(): string
	{
		return null;
	}
	set ColorInterpolationFilters(value: string)
	{
	}
	get ColorInterpolationFilters(): string
	{
		return null;
	}
	set Content(value: string)
	{
	}
	get Content(): string
	{
		return null;
	}
	set CounterIncrement(value: string)
	{
	}
	get CounterIncrement(): string
	{
		return null;
	}
	set CounterReset(value: string)
	{
	}
	get CounterReset(): string
	{
		return null;
	}
	set CssFloat(value: string)
	{
	}
	get CssFloat(): string
	{
		return null;
	}
	set CssText(value: string)
	{
	}
	get CssText(): string
	{
		return null;
	}
	set Cursor(value: string)
	{
	}
	get Cursor(): string
	{
		return null;
	}
	set Direction(value: string)
	{
	}
	get Direction(): string
	{
		return null;
	}
	set Display(value: string)
	{
	}
	get Display(): string
	{
		return null;
	}
	set DominantBaseline(value: string)
	{
	}
	get DominantBaseline(): string
	{
		return null;
	}
	set EmptyCells(value: string)
	{
	}
	get EmptyCells(): string
	{
		return null;
	}
	set Fill(value: string)
	{
	}
	get Fill(): string
	{
		return null;
	}
	set FillOpacity(value: string)
	{
	}
	get FillOpacity(): string
	{
		return null;
	}
	set FillRule(value: string)
	{
	}
	get FillRule(): string
	{
		return null;
	}
	set Filter(value: string)
	{
	}
	get Filter(): string
	{
		return null;
	}
	set Flex(value: string)
	{
	}
	get Flex(): string
	{
		return null;
	}
	set FlexBasis(value: string)
	{
	}
	get FlexBasis(): string
	{
		return null;
	}
	set FlexDirection(value: string)
	{
	}
	get FlexDirection(): string
	{
		return null;
	}
	set FlexFlow(value: string)
	{
	}
	get FlexFlow(): string
	{
		return null;
	}
	set FlexGrow(value: string)
	{
	}
	get FlexGrow(): string
	{
		return null;
	}
	set FlexShrink(value: string)
	{
	}
	get FlexShrink(): string
	{
		return null;
	}
	set FlexWrap(value: string)
	{
	}
	get FlexWrap(): string
	{
		return null;
	}
	set FloodColor(value: string)
	{
	}
	get FloodColor(): string
	{
		return null;
	}
	set FloodOpacity(value: string)
	{
	}
	get FloodOpacity(): string
	{
		return null;
	}
	set Font(value: string)
	{
	}
	get Font(): string
	{
		return null;
	}
	set FontFamily(value: string)
	{
	}
	get FontFamily(): string
	{
		return null;
	}
	set FontFeatureSettings(value: string)
	{
	}
	get FontFeatureSettings(): string
	{
		return null;
	}
	set FontKerning(value: string)
	{
	}
	get FontKerning(): string
	{
		return null;
	}
	set FontLanguageOverride(value: string)
	{
	}
	get FontLanguageOverride(): string
	{
		return null;
	}
	set FontSize(value: string)
	{
	}
	get FontSize(): string
	{
		return null;
	}
	set FontSizeAdjust(value: string)
	{
	}
	get FontSizeAdjust(): string
	{
		return null;
	}
	set FontStretch(value: string)
	{
	}
	get FontStretch(): string
	{
		return null;
	}
	set FontStyle(value: string)
	{
	}
	get FontStyle(): string
	{
		return null;
	}
	set FontSynthesis(value: string)
	{
	}
	get FontSynthesis(): string
	{
		return null;
	}
	set FontVariant(value: string)
	{
	}
	get FontVariant(): string
	{
		return null;
	}
	set FontVariantAlternates(value: string)
	{
	}
	get FontVariantAlternates(): string
	{
		return null;
	}
	set FontVariantCaps(value: string)
	{
	}
	get FontVariantCaps(): string
	{
		return null;
	}
	set FontVariantEastAsian(value: string)
	{
	}
	get FontVariantEastAsian(): string
	{
		return null;
	}
	set FontVariantLigatures(value: string)
	{
	}
	get FontVariantLigatures(): string
	{
		return null;
	}
	set FontVariantNumeric(value: string)
	{
	}
	get FontVariantNumeric(): string
	{
		return null;
	}
	set FontVariantPosition(value: string)
	{
	}
	get FontVariantPosition(): string
	{
		return null;
	}
	set FontWeight(value: string)
	{
	}
	get FontWeight(): string
	{
		return null;
	}
	set Grid(value: string)
	{
	}
	get Grid(): string
	{
		return null;
	}
	set GridArea(value: string)
	{
	}
	get GridArea(): string
	{
		return null;
	}
	set GridAutoColumns(value: string)
	{
	}
	get GridAutoColumns(): string
	{
		return null;
	}
	set GridAutoFlow(value: string)
	{
	}
	get GridAutoFlow(): string
	{
		return null;
	}
	set GridAutoPosition(value: string)
	{
	}
	get GridAutoPosition(): string
	{
		return null;
	}
	set GridAutoRows(value: string)
	{
	}
	get GridAutoRows(): string
	{
		return null;
	}
	set GridColumn(value: string)
	{
	}
	get GridColumn(): string
	{
		return null;
	}
	set GridColumnEnd(value: string)
	{
	}
	get GridColumnEnd(): string
	{
		return null;
	}
	set GridColumnStart(value: string)
	{
	}
	get GridColumnStart(): string
	{
		return null;
	}
	set GridRow(value: string)
	{
	}
	get GridRow(): string
	{
		return null;
	}
	set GridRowEnd(value: string)
	{
	}
	get GridRowEnd(): string
	{
		return null;
	}
	set GridRowStart(value: string)
	{
	}
	get GridRowStart(): string
	{
		return null;
	}
	set GridTemplate(value: string)
	{
	}
	get GridTemplate(): string
	{
		return null;
	}
	set GridTemplateAreas(value: string)
	{
	}
	get GridTemplateAreas(): string
	{
		return null;
	}
	set GridTemplateColumns(value: string)
	{
	}
	get GridTemplateColumns(): string
	{
		return null;
	}
	set GridTemplateRows(value: string)
	{
	}
	get GridTemplateRows(): string
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set ImageOrientation(value: string)
	{
	}
	get ImageOrientation(): string
	{
		return null;
	}
	set ImageRendering(value: string)
	{
	}
	get ImageRendering(): string
	{
		return null;
	}
	set ImeMode(value: string)
	{
	}
	get ImeMode(): string
	{
		return null;
	}
	set JustifyContent(value: string)
	{
	}
	get JustifyContent(): string
	{
		return null;
	}
	set Left(value: string)
	{
	}
	get Left(): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	set LetterSpacing(value: string)
	{
	}
	get LetterSpacing(): string
	{
		return null;
	}
	set LightingColor(value: string)
	{
	}
	get LightingColor(): string
	{
		return null;
	}
	set LineHeight(value: string)
	{
	}
	get LineHeight(): string
	{
		return null;
	}
	set ListStyle(value: string)
	{
	}
	get ListStyle(): string
	{
		return null;
	}
	set ListStyleImage(value: string)
	{
	}
	get ListStyleImage(): string
	{
		return null;
	}
	set ListStylePosition(value: string)
	{
	}
	get ListStylePosition(): string
	{
		return null;
	}
	set ListStyleType(value: string)
	{
	}
	get ListStyleType(): string
	{
		return null;
	}
	set Margin(value: string)
	{
	}
	get Margin(): string
	{
		return null;
	}
	set MarginBottom(value: string)
	{
	}
	get MarginBottom(): string
	{
		return null;
	}
	set MarginLeft(value: string)
	{
	}
	get MarginLeft(): string
	{
		return null;
	}
	set MarginRight(value: string)
	{
	}
	get MarginRight(): string
	{
		return null;
	}
	set MarginTop(value: string)
	{
	}
	get MarginTop(): string
	{
		return null;
	}
	set Marker(value: string)
	{
	}
	get Marker(): string
	{
		return null;
	}
	set MarkerEnd(value: string)
	{
	}
	get MarkerEnd(): string
	{
		return null;
	}
	set MarkerMid(value: string)
	{
	}
	get MarkerMid(): string
	{
		return null;
	}
	set MarkerOffset(value: string)
	{
	}
	get MarkerOffset(): string
	{
		return null;
	}
	set MarkerStart(value: string)
	{
	}
	get MarkerStart(): string
	{
		return null;
	}
	set Marks(value: string)
	{
	}
	get Marks(): string
	{
		return null;
	}
	set Mask(value: string)
	{
	}
	get Mask(): string
	{
		return null;
	}
	set MaskType(value: string)
	{
	}
	get MaskType(): string
	{
		return null;
	}
	set MaxHeight(value: string)
	{
	}
	get MaxHeight(): string
	{
		return null;
	}
	set MaxWidth(value: string)
	{
	}
	get MaxWidth(): string
	{
		return null;
	}
	set MinHeight(value: string)
	{
	}
	get MinHeight(): string
	{
		return null;
	}
	set MinWidth(value: string)
	{
	}
	get MinWidth(): string
	{
		return null;
	}
	set MixBlendMode(value: string)
	{
	}
	get MixBlendMode(): string
	{
		return null;
	}
	set Opacity(value: string)
	{
	}
	get Opacity(): string
	{
		return null;
	}
	set Order(value: string)
	{
	}
	get Order(): string
	{
		return null;
	}
	set Orphans(value: string)
	{
	}
	get Orphans(): string
	{
		return null;
	}
	set Outline(value: string)
	{
	}
	get Outline(): string
	{
		return null;
	}
	set OutlineColor(value: string)
	{
	}
	get OutlineColor(): string
	{
		return null;
	}
	set OutlineOffset(value: string)
	{
	}
	get OutlineOffset(): string
	{
		return null;
	}
	set OutlineStyle(value: string)
	{
	}
	get OutlineStyle(): string
	{
		return null;
	}
	set OutlineWidth(value: string)
	{
	}
	get OutlineWidth(): string
	{
		return null;
	}
	set Overflow(value: string)
	{
	}
	get Overflow(): string
	{
		return null;
	}
	set OverflowClipBox(value: string)
	{
	}
	get OverflowClipBox(): string
	{
		return null;
	}
	set OverflowX(value: string)
	{
	}
	get OverflowX(): string
	{
		return null;
	}
	set OverflowY(value: string)
	{
	}
	get OverflowY(): string
	{
		return null;
	}
	set Padding(value: string)
	{
	}
	get Padding(): string
	{
		return null;
	}
	set PaddingBottom(value: string)
	{
	}
	get PaddingBottom(): string
	{
		return null;
	}
	set PaddingLeft(value: string)
	{
	}
	get PaddingLeft(): string
	{
		return null;
	}
	set PaddingRight(value: string)
	{
	}
	get PaddingRight(): string
	{
		return null;
	}
	set PaddingTop(value: string)
	{
	}
	get PaddingTop(): string
	{
		return null;
	}
	set Page(value: string)
	{
	}
	get Page(): string
	{
		return null;
	}
	set PageBreakAfter(value: string)
	{
	}
	get PageBreakAfter(): string
	{
		return null;
	}
	set PageBreakBefore(value: string)
	{
	}
	get PageBreakBefore(): string
	{
		return null;
	}
	set PageBreakInside(value: string)
	{
	}
	get PageBreakInside(): string
	{
		return null;
	}
	set PaintOrder(value: string)
	{
	}
	get PaintOrder(): string
	{
		return null;
	}
	get ParentRule(): CSSRule
	{
		return null;
	}
	set Perspective(value: string)
	{
	}
	get Perspective(): string
	{
		return null;
	}
	set PerspectiveOrigin(value: string)
	{
	}
	get PerspectiveOrigin(): string
	{
		return null;
	}
	set PointerEvents(value: string)
	{
	}
	get PointerEvents(): string
	{
		return null;
	}
	set Position(value: string)
	{
	}
	get Position(): string
	{
		return null;
	}
	set Quotes(value: string)
	{
	}
	get Quotes(): string
	{
		return null;
	}
	set Resize(value: string)
	{
	}
	get Resize(): string
	{
		return null;
	}
	set Right(value: string)
	{
	}
	get Right(): string
	{
		return null;
	}
	set ShapeRendering(value: string)
	{
	}
	get ShapeRendering(): string
	{
		return null;
	}
	set Size(value: string)
	{
	}
	get Size(): string
	{
		return null;
	}
	set StopColor(value: string)
	{
	}
	get StopColor(): string
	{
		return null;
	}
	set StopOpacity(value: string)
	{
	}
	get StopOpacity(): string
	{
		return null;
	}
	set Stroke(value: string)
	{
	}
	get Stroke(): string
	{
		return null;
	}
	set StrokeDasharray(value: string)
	{
	}
	get StrokeDasharray(): string
	{
		return null;
	}
	set StrokeDashoffset(value: string)
	{
	}
	get StrokeDashoffset(): string
	{
		return null;
	}
	set StrokeLinecap(value: string)
	{
	}
	get StrokeLinecap(): string
	{
		return null;
	}
	set StrokeLinejoin(value: string)
	{
	}
	get StrokeLinejoin(): string
	{
		return null;
	}
	set StrokeMiterlimit(value: string)
	{
	}
	get StrokeMiterlimit(): string
	{
		return null;
	}
	set StrokeOpacity(value: string)
	{
	}
	get StrokeOpacity(): string
	{
		return null;
	}
	set StrokeWidth(value: string)
	{
	}
	get StrokeWidth(): string
	{
		return null;
	}
	set TableLayout(value: string)
	{
	}
	get TableLayout(): string
	{
		return null;
	}
	set TextAlign(value: string)
	{
	}
	get TextAlign(): string
	{
		return null;
	}
	set TextAnchor(value: string)
	{
	}
	get TextAnchor(): string
	{
		return null;
	}
	set TextCombineHorizontal(value: string)
	{
	}
	get TextCombineHorizontal(): string
	{
		return null;
	}
	set TextDecoration(value: string)
	{
	}
	get TextDecoration(): string
	{
		return null;
	}
	set TextIndent(value: string)
	{
	}
	get TextIndent(): string
	{
		return null;
	}
	set TextOrientation(value: string)
	{
	}
	get TextOrientation(): string
	{
		return null;
	}
	set TextOverflow(value: string)
	{
	}
	get TextOverflow(): string
	{
		return null;
	}
	set TextRendering(value: string)
	{
	}
	get TextRendering(): string
	{
		return null;
	}
	set TextShadow(value: string)
	{
	}
	get TextShadow(): string
	{
		return null;
	}
	set TextTransform(value: string)
	{
	}
	get TextTransform(): string
	{
		return null;
	}
	set Top(value: string)
	{
	}
	get Top(): string
	{
		return null;
	}
	set TouchAction(value: string)
	{
	}
	get TouchAction(): string
	{
		return null;
	}
	set Transform(value: string)
	{
	}
	get Transform(): string
	{
		return null;
	}
	set TransformOrigin(value: string)
	{
	}
	get TransformOrigin(): string
	{
		return null;
	}
	set TransformStyle(value: string)
	{
	}
	get TransformStyle(): string
	{
		return null;
	}
	set Transition(value: string)
	{
	}
	get Transition(): string
	{
		return null;
	}
	set TransitionDelay(value: string)
	{
	}
	get TransitionDelay(): string
	{
		return null;
	}
	set TransitionDuration(value: string)
	{
	}
	get TransitionDuration(): string
	{
		return null;
	}
	set TransitionProperty(value: string)
	{
	}
	get TransitionProperty(): string
	{
		return null;
	}
	set TransitionTimingFunction(value: string)
	{
	}
	get TransitionTimingFunction(): string
	{
		return null;
	}
	set UnicodeBidi(value: string)
	{
	}
	get UnicodeBidi(): string
	{
		return null;
	}
	set VectorEffect(value: string)
	{
	}
	get VectorEffect(): string
	{
		return null;
	}
	set VerticalAlign(value: string)
	{
	}
	get VerticalAlign(): string
	{
		return null;
	}
	set Visibility(value: string)
	{
	}
	get Visibility(): string
	{
		return null;
	}
	set WhiteSpace(value: string)
	{
	}
	get WhiteSpace(): string
	{
		return null;
	}
	set Widows(value: string)
	{
	}
	get Widows(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	set WillChange(value: string)
	{
	}
	get WillChange(): string
	{
		return null;
	}
	set WordBreak(value: string)
	{
	}
	get WordBreak(): string
	{
		return null;
	}
	set WordSpacing(value: string)
	{
	}
	get WordSpacing(): string
	{
		return null;
	}
	set WordWrap(value: string)
	{
	}
	get WordWrap(): string
	{
		return null;
	}
	set WritingMode(value: string)
	{
	}
	get WritingMode(): string
	{
		return null;
	}
	set ZIndex(value: string)
	{
	}
	get ZIndex(): string
	{
		return null;
	}
	get_Item(name: string): string
	{
		return null;
	}
	set_Item(name: string, value: string): void
	{
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<string>
	{
		return null;
	}
	GetPropertyCSSValue(property: string): CSSValue
	{
		return null;
	}
	GetPropertyPriority(property: string): string
	{
		return null;
	}
	GetPropertyValue(property: string): string
	{
		return null;
	}
	Item(index: number): string
	{
		return null;
	}
	RemoveProperty(property: string): string
	{
		return null;
	}
	SetProperty(property: string, value: string): void;
	SetProperty(property: string, value: string, priority: string): void;
	SetProperty(property: string, value: string, priority?: string): void
	{
		if (arguments.length === 2 && (property === null || property.constructor === String) && (value === null || value.constructor === String))
		{
			this.SetProperty_0(property, value);
			return;
		}
		this.SetProperty_1(property, value, priority);
	}
	private SetProperty_0(property: string, value: string): void
	{
	}
	private SetProperty_1(property: string, value: string, priority: string): void
	{
	}
}
class StyleElement extends Element
{
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	set Media(value: string)
	{
	}
	get Media(): string
	{
		return null;
	}
	set Scoped(value: boolean)
	{
	}
	get Scoped(): boolean
	{
		return false;
	}
	get Sheet(): StyleSheet
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: StyleElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: StyleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: StyleElementEvents, listener: () => void): void;
	new AddEventListener(type: StyleElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: StyleElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: StyleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void): void;
	new AddEventListener(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: StyleElementEvents, listener: IEventListener): void;
	new AddEventListener(type: StyleElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: StyleElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: StyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: StyleElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: StyleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: StyleElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: StyleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: StyleElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: StyleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: StyleElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: StyleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: StyleElementEvents, listener: () => void): void;
	new RemoveEventListener(type: StyleElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: StyleElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: StyleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void): void;
	new RemoveEventListener(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: StyleElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: StyleElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: StyleElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: StyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: StyleElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: StyleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: StyleElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: StyleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: StyleElementEvents, listener: (target: StyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: StyleElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: StyleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum StyleElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class StyleRuleChangeEventInit extends EventInit
{
	Rule: CSSRule = null;
	Stylesheet: CSSStyleSheet = null;
	constructor()
	{
		super();
	}
}
class StyleSheetApplicableStateChangeEventInit extends EventInit
{
	Applicable: boolean = false;
	Stylesheet: CSSStyleSheet = null;
	constructor()
	{
		super();
	}
}
class StyleSheetChangeEventInit extends EventInit
{
	DocumentSheet: boolean = false;
	Stylesheet: CSSStyleSheet = null;
	constructor()
	{
		super();
	}
}
class StyleSheetList extends NObject
{
	get_Item(index: number): StyleSheet
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<StyleSheet>
	{
		return null;
	}
	Item(index: number): StyleSheet
	{
		return null;
	}
}
class TableCaptionElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableCaptionElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: () => void): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableCaptionElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableCaptionElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableCaptionElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableCaptionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableCaptionElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableCaptionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableCaptionElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableCaptionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TableCaptionElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableCaptionElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableCaptionElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableCaptionElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableCaptionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableCaptionElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableCaptionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableCaptionElementEvents, listener: (target: TableCaptionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableCaptionElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableCaptionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableCaptionElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TableCellElement extends Element
{
	set Abbr(value: string)
	{
	}
	get Abbr(): string
	{
		return null;
	}
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Axis(value: string)
	{
	}
	get Axis(): string
	{
		return null;
	}
	set BgColor(value: string)
	{
	}
	get BgColor(): string
	{
		return null;
	}
	get CellIndex(): number
	{
		return 0;
	}
	set Ch(value: string)
	{
	}
	get Ch(): string
	{
		return null;
	}
	set ChOff(value: string)
	{
	}
	get ChOff(): string
	{
		return null;
	}
	set ColSpan(value: number)
	{
	}
	get ColSpan(): number
	{
		return 0;
	}
	set Headers(value: string)
	{
	}
	get Headers(): string
	{
		return null;
	}
	set Height(value: string)
	{
	}
	get Height(): string
	{
		return null;
	}
	set NoWrap(value: boolean)
	{
	}
	get NoWrap(): boolean
	{
		return false;
	}
	set RowSpan(value: number)
	{
	}
	get RowSpan(): number
	{
		return 0;
	}
	set Scope(value: string)
	{
	}
	get Scope(): string
	{
		return null;
	}
	set VAlign(value: string)
	{
	}
	get VAlign(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableCellElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCellElementEvents, listener: () => void): void;
	new AddEventListener(type: TableCellElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableCellElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableCellElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void): void;
	new AddEventListener(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableCellElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableCellElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableCellElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableCellElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableCellElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableCellElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableCellElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableCellElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableCellElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TableCellElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableCellElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableCellElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableCellElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableCellElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableCellElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableCellElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableCellElementEvents, listener: (target: TableCellElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableCellElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableCellElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableCellElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TableColElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Ch(value: string)
	{
	}
	get Ch(): string
	{
		return null;
	}
	set ChOff(value: string)
	{
	}
	get ChOff(): string
	{
		return null;
	}
	set Span(value: number)
	{
	}
	get Span(): number
	{
		return 0;
	}
	set VAlign(value: string)
	{
	}
	get VAlign(): string
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableColElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableColElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableColElementEvents, listener: () => void): void;
	new AddEventListener(type: TableColElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableColElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableColElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void): void;
	new AddEventListener(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableColElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableColElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableColElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableColElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableColElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableColElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableColElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableColElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableColElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableColElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TableColElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableColElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableColElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableColElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableColElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableColElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void): void;
	new RemoveEventListener(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableColElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableColElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableColElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableColElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableColElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableColElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableColElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableColElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableColElementEvents, listener: (target: TableColElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableColElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableColElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableColElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TableElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set BgColor(value: string)
	{
	}
	get BgColor(): string
	{
		return null;
	}
	set Border(value: string)
	{
	}
	get Border(): string
	{
		return null;
	}
	set Caption(value: TableCaptionElement)
	{
	}
	get Caption(): TableCaptionElement
	{
		return null;
	}
	set CellPadding(value: string)
	{
	}
	get CellPadding(): string
	{
		return null;
	}
	set CellSpacing(value: string)
	{
	}
	get CellSpacing(): string
	{
		return null;
	}
	set Frame(value: string)
	{
	}
	get Frame(): string
	{
		return null;
	}
	get Rows(): ElementCollection
	{
		return null;
	}
	set Rules(value: string)
	{
	}
	get Rules(): string
	{
		return null;
	}
	set Summary(value: string)
	{
	}
	get Summary(): string
	{
		return null;
	}
	get TBodies(): ElementCollection
	{
		return null;
	}
	set TFoot(value: TableSectionElement)
	{
	}
	get TFoot(): TableSectionElement
	{
		return null;
	}
	set THead(value: TableSectionElement)
	{
	}
	get THead(): TableSectionElement
	{
		return null;
	}
	set Width(value: string)
	{
	}
	get Width(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableElementEvents, listener: () => void): void;
	new AddEventListener(type: TableElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableElementEvents, listener: (target: TableElement, event: Event) => void): void;
	new AddEventListener(type: TableElementEvents, listener: (target: TableElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableElementEvents, listener: (target: TableElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableElementEvents, listener: (target: TableElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	CreateCaption(): Element
	{
		return null;
	}
	CreateTBody(): Element
	{
		return null;
	}
	CreateTFoot(): Element
	{
		return null;
	}
	CreateTHead(): Element
	{
		return null;
	}
	DeleteCaption(): void
	{
	}
	DeleteRow(index: number): void
	{
	}
	DeleteTFoot(): void
	{
	}
	DeleteTHead(): void
	{
	}
	InsertRow(): Element;
	InsertRow(index: number): Element;
	InsertRow(index?: number): Element
	{
		if (arguments.length === 0)
		{
			return this.InsertRow_0();
		}
		return this.InsertRow_1(index);
	}
	private InsertRow_0(): Element
	{
		return null;
	}
	private InsertRow_1(index: number): Element
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: TableElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableElementEvents, listener: (target: TableElement, event: Event) => void): void;
	new RemoveEventListener(type: TableElementEvents, listener: (target: TableElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableElementEvents, listener: (target: TableElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableElementEvents, listener: (target: TableElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TableRowElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set BgColor(value: string)
	{
	}
	get BgColor(): string
	{
		return null;
	}
	get Cells(): ElementCollection
	{
		return null;
	}
	set Ch(value: string)
	{
	}
	get Ch(): string
	{
		return null;
	}
	set ChOff(value: string)
	{
	}
	get ChOff(): string
	{
		return null;
	}
	get RowIndex(): number
	{
		return 0;
	}
	get SectionRowIndex(): number
	{
		return 0;
	}
	set VAlign(value: string)
	{
	}
	get VAlign(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableRowElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableRowElementEvents, listener: () => void): void;
	new AddEventListener(type: TableRowElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableRowElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableRowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void): void;
	new AddEventListener(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableRowElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableRowElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableRowElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableRowElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableRowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableRowElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableRowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableRowElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableRowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	DeleteCell(index: number): void
	{
	}
	InsertCell(): Element;
	InsertCell(index: number): Element;
	InsertCell(index?: number): Element
	{
		if (arguments.length === 0)
		{
			return this.InsertCell_0();
		}
		return this.InsertCell_1(index);
	}
	private InsertCell_0(): Element
	{
		return null;
	}
	private InsertCell_1(index: number): Element
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: TableRowElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableRowElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableRowElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableRowElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableRowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableRowElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableRowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableRowElementEvents, listener: (target: TableRowElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableRowElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableRowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableRowElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TableSectionElement extends Element
{
	set Align(value: string)
	{
	}
	get Align(): string
	{
		return null;
	}
	set Ch(value: string)
	{
	}
	get Ch(): string
	{
		return null;
	}
	set ChOff(value: string)
	{
	}
	get ChOff(): string
	{
		return null;
	}
	get Rows(): ElementCollection
	{
		return null;
	}
	set VAlign(value: string)
	{
	}
	get VAlign(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TableSectionElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableSectionElementEvents, listener: () => void): void;
	new AddEventListener(type: TableSectionElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TableSectionElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TableSectionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void): void;
	new AddEventListener(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TableSectionElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TableSectionElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TableSectionElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TableSectionElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TableSectionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TableSectionElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TableSectionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TableSectionElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TableSectionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	DeleteRow(index: number): void
	{
	}
	InsertRow(): Element;
	InsertRow(index: number): Element;
	InsertRow(index?: number): Element
	{
		if (arguments.length === 0)
		{
			return this.InsertRow_0();
		}
		return this.InsertRow_1(index);
	}
	private InsertRow_0(): Element
	{
		return null;
	}
	private InsertRow_1(index: number): Element
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: TableSectionElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TableSectionElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TableSectionElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TableSectionElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TableSectionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TableSectionElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TableSectionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TableSectionElementEvents, listener: (target: TableSectionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TableSectionElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TableSectionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TableSectionElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TemplateElement extends Element
{
	get Content(): XmlDocumentFragment
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TemplateElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TemplateElementEvents, listener: () => void): void;
	new AddEventListener(type: TemplateElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TemplateElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TemplateElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void): void;
	new AddEventListener(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TemplateElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TemplateElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TemplateElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TemplateElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TemplateElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TemplateElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TemplateElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TemplateElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TemplateElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TemplateElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TemplateElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TemplateElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TemplateElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TemplateElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TemplateElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TemplateElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TemplateElementEvents, listener: (target: TemplateElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TemplateElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TemplateElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TemplateElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TextAreaElement extends Element
{
	set Autofocus(value: boolean)
	{
	}
	get Autofocus(): boolean
	{
		return false;
	}
	set Cols(value: number)
	{
	}
	get Cols(): number
	{
		return 0;
	}
	set DefaultValue(value: string)
	{
	}
	get DefaultValue(): string
	{
		return null;
	}
	set Disabled(value: boolean)
	{
	}
	get Disabled(): boolean
	{
		return false;
	}
	get Form(): FormElement
	{
		return null;
	}
	set MaxLength(value: number)
	{
	}
	get MaxLength(): number
	{
		return 0;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Placeholder(value: string)
	{
	}
	get Placeholder(): string
	{
		return null;
	}
	set ReadOnly(value: boolean)
	{
	}
	get ReadOnly(): boolean
	{
		return false;
	}
	set Required(value: boolean)
	{
	}
	get Required(): boolean
	{
		return false;
	}
	set Rows(value: number)
	{
	}
	get Rows(): number
	{
		return 0;
	}
	set SelectionDirection(value: string)
	{
	}
	get SelectionDirection(): string
	{
		return null;
	}
	set SelectionEnd(value: number)
	{
	}
	get SelectionEnd(): number
	{
		return 0;
	}
	set SelectionStart(value: number)
	{
	}
	get SelectionStart(): number
	{
		return 0;
	}
	get TextLength(): number
	{
		return 0;
	}
	get Type(): string
	{
		return null;
	}
	get ValidationMessage(): string
	{
		return null;
	}
	get Validity(): ValidityState
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	get WillValidate(): boolean
	{
		return false;
	}
	set Wrap(value: string)
	{
	}
	get Wrap(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TextAreaElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextAreaElementEvents, listener: () => void): void;
	new AddEventListener(type: TextAreaElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TextAreaElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TextAreaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void): void;
	new AddEventListener(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextAreaElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TextAreaElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TextAreaElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TextAreaElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TextAreaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TextAreaElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TextAreaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TextAreaElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TextAreaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	CheckValidity(): boolean
	{
		return false;
	}
	new RemoveEventListener(type: string, listener: (target: TextAreaElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TextAreaElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TextAreaElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TextAreaElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TextAreaElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TextAreaElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TextAreaElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TextAreaElementEvents, listener: (target: TextAreaElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TextAreaElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TextAreaElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Select(): void
	{
	}
	SetCustomValidity(error: string): void
	{
	}
	SetRangeText(replacement: string): void;
	SetRangeText(replacement: string, start: number, end: number): void;
	SetRangeText(replacement: string, start: number, end: number, selectionMode: SelectionMode): void;
	SetRangeText(replacement: string, start?: number, end?: number, selectionMode?: SelectionMode): void
	{
		if (arguments.length === 1 && (replacement === null || replacement.constructor === String))
		{
			this.SetRangeText_0(replacement);
			return;
		}
		if (arguments.length === 3 && (replacement === null || replacement.constructor === String) && (start === null || start.constructor === Number) && (end === null || end.constructor === Number))
		{
			this.SetRangeText_1(replacement, start, end);
			return;
		}
		this.SetRangeText_2(replacement, start, end, selectionMode);
	}
	private SetRangeText_0(replacement: string): void
	{
	}
	private SetRangeText_1(replacement: string, start: number, end: number): void
	{
	}
	private SetRangeText_2(replacement: string, start: number, end: number, selectionMode: SelectionMode): void
	{
	}
	SetSelectionRange(start: number, end: number): void;
	SetSelectionRange(start: number, end: number, direction: string): void;
	SetSelectionRange(start: number, end: number, direction?: string): void
	{
		if (arguments.length === 2 && (start === null || start.constructor === Number) && (end === null || end.constructor === Number))
		{
			this.SetSelectionRange_0(start, end);
			return;
		}
		this.SetSelectionRange_1(start, end, direction);
	}
	private SetSelectionRange_0(start: number, end: number): void
	{
	}
	private SetSelectionRange_1(start: number, end: number, direction: string): void
	{
	}
}
enum TextAreaElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TimeElement extends Element
{
	set DateTime(value: string)
	{
	}
	get DateTime(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TimeElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TimeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TimeElementEvents, listener: () => void): void;
	new AddEventListener(type: TimeElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TimeElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TimeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void): void;
	new AddEventListener(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TimeElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TimeElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TimeElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TimeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TimeElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TimeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TimeElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TimeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TimeElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TimeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TimeElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TimeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TimeElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TimeElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TimeElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TimeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void): void;
	new RemoveEventListener(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TimeElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TimeElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TimeElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TimeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TimeElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TimeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TimeElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TimeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TimeElementEvents, listener: (target: TimeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TimeElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TimeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TimeElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TimeEvent extends Event
{
	get Detail(): number
	{
		return 0;
	}
	get View(): WindowInstance
	{
		return null;
	}
	constructor()
	{
		super();
	}
	InitTimeEvent(aType: string, aView: WindowInstance, aDetail: number): void
	{
	}
}
class TitleElement extends Element
{
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TitleElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TitleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TitleElementEvents, listener: () => void): void;
	new AddEventListener(type: TitleElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TitleElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TitleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void): void;
	new AddEventListener(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TitleElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TitleElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TitleElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TitleElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TitleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TitleElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TitleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TitleElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TitleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TitleElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TitleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TitleElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TitleElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TitleElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TitleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void): void;
	new RemoveEventListener(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TitleElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TitleElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TitleElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TitleElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TitleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TitleElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TitleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TitleElementEvents, listener: (target: TitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TitleElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TitleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TitleElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class Touch extends NObject
{
	get ClientX(): number
	{
		return 0;
	}
	get ClientY(): number
	{
		return 0;
	}
	get Force(): number
	{
		return 0.0;
	}
	get Identifier(): number
	{
		return 0;
	}
	get PageX(): number
	{
		return 0;
	}
	get PageY(): number
	{
		return 0;
	}
	get RadiusX(): number
	{
		return 0;
	}
	get RadiusY(): number
	{
		return 0;
	}
	get RotationAngle(): number
	{
		return 0.0;
	}
	get ScreenX(): number
	{
		return 0;
	}
	get ScreenY(): number
	{
		return 0;
	}
	get Target(): EventTarget
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class TouchEvent extends UIEvent
{
	get AltKey(): boolean
	{
		return false;
	}
	get ChangedTouches(): TouchList
	{
		return null;
	}
	get CtrlKey(): boolean
	{
		return false;
	}
	get MetaKey(): boolean
	{
		return false;
	}
	get ShiftKey(): boolean
	{
		return false;
	}
	get TargetTouches(): TouchList
	{
		return null;
	}
	get Touches(): TouchList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	InitTouchEvent(type: string, canBubble: boolean, cancelable: boolean, view: WindowInstance, detail: number, ctrlKey: boolean, altKey: boolean, shiftKey: boolean, metaKey: boolean, touches: TouchList, targetTouches: TouchList, changedTouches: TouchList): void
	{
	}
}
class TouchList extends NObject
{
	get_Item(index: number): Touch
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<Touch>
	{
		return null;
	}
	IdentifiedTouch(identifier: number): Touch
	{
		return null;
	}
	Item(index: number): Touch
	{
		return null;
	}
}
class TrackElement extends Element
{
	static ERROR: number = 3;
	static LOADED: number = 2;
	static LOADING: number = 1;
	static NONE: number = 0;
	set Default(value: boolean)
	{
	}
	get Default(): boolean
	{
		return false;
	}
	set Kind(value: string)
	{
	}
	get Kind(): string
	{
		return null;
	}
	set Label(value: string)
	{
	}
	get Label(): string
	{
		return null;
	}
	get ReadyState(): number
	{
		return 0;
	}
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Srclang(value: string)
	{
	}
	get Srclang(): string
	{
		return null;
	}
	get Track(): TextTrack
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TrackElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TrackElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TrackElementEvents, listener: () => void): void;
	new AddEventListener(type: TrackElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TrackElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TrackElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void): void;
	new AddEventListener(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TrackElementEvents, listener: IEventListener): void;
	new AddEventListener(type: TrackElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TrackElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TrackElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TrackElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TrackElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TrackElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TrackElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TrackElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TrackElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TrackElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TrackElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TrackElementEvents, listener: () => void): void;
	new RemoveEventListener(type: TrackElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TrackElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TrackElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void): void;
	new RemoveEventListener(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TrackElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TrackElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TrackElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TrackElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TrackElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TrackElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TrackElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TrackElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TrackElementEvents, listener: (target: TrackElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TrackElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TrackElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TrackElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class TransitionEvent extends Event
{
	get ElapsedTime(): number
	{
		return 0.0;
	}
	get PropertyName(): string
	{
		return null;
	}
	get PseudoElement(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: TransitionEventInit);
	constructor(type?: string, eventInitDict?: TransitionEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: TransitionEventInit): void
	{
	}
}
class TransitionEventInit extends EventInit
{
	ElapsedTime: number = 0;
	PropertyName: string = null;
	PseudoElement: string = null;
	constructor()
	{
		super();
	}
}
class UListElement extends Element
{
	set Compact(value: boolean)
	{
	}
	get Compact(): boolean
	{
		return false;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: UListElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: UListElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UListElementEvents, listener: () => void): void;
	new AddEventListener(type: UListElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: UListElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: UListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UListElementEvents, listener: (target: UListElement, event: Event) => void): void;
	new AddEventListener(type: UListElementEvents, listener: (target: UListElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UListElementEvents, listener: IEventListener): void;
	new AddEventListener(type: UListElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: UListElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: UListElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: UListElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: UListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: UListElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: UListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: UListElementEvents, listener: (target: UListElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: UListElementEvents, listener: (target: UListElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: UListElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: UListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: UListElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: UListElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UListElementEvents, listener: () => void): void;
	new RemoveEventListener(type: UListElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: UListElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: UListElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UListElementEvents, listener: (target: UListElement, event: Event) => void): void;
	new RemoveEventListener(type: UListElementEvents, listener: (target: UListElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UListElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: UListElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: UListElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: UListElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: UListElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: UListElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: UListElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: UListElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: UListElementEvents, listener: (target: UListElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: UListElementEvents, listener: (target: UListElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: UListElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: UListElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum UListElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class UnknownElement extends Element
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: UnknownElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UnknownElementEvents, listener: () => void): void;
	new AddEventListener(type: UnknownElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: UnknownElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: UnknownElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void): void;
	new AddEventListener(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: UnknownElementEvents, listener: IEventListener): void;
	new AddEventListener(type: UnknownElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: UnknownElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: UnknownElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: UnknownElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: UnknownElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: UnknownElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: UnknownElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: UnknownElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: UnknownElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: () => void): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: UnknownElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: UnknownElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: UnknownElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: UnknownElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: UnknownElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: UnknownElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: UnknownElementEvents, listener: (target: UnknownElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: UnknownElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: UnknownElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum UnknownElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class URL extends NObject
{
	set Hash(value: string)
	{
	}
	get Hash(): string
	{
		return null;
	}
	set Host(value: string)
	{
	}
	get Host(): string
	{
		return null;
	}
	set Hostname(value: string)
	{
	}
	get Hostname(): string
	{
		return null;
	}
	set Href(value: string)
	{
	}
	get Href(): string
	{
		return null;
	}
	get Origin(): string
	{
		return null;
	}
	set Password(value: string)
	{
	}
	get Password(): string
	{
		return null;
	}
	set Pathname(value: string)
	{
	}
	get Pathname(): string
	{
		return null;
	}
	set Port(value: string)
	{
	}
	get Port(): string
	{
		return null;
	}
	set Protocol(value: string)
	{
	}
	get Protocol(): string
	{
		return null;
	}
	set Search(value: string)
	{
	}
	get Search(): string
	{
		return null;
	}
	set SearchParams(value: URLSearchParams)
	{
	}
	get SearchParams(): URLSearchParams
	{
		return null;
	}
	set Username(value: string)
	{
	}
	get Username(): string
	{
		return null;
	}
	constructor();
	constructor(url: string);
	constructor(url: string, base: string);
	constructor(url: string, base: URL);
	constructor(url?: string, base?: any)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			super();
			this.constructor_1(url);
			return;
		}
		if (arguments.length === 2 && (url === null || url.constructor === String) && (base === null || base.constructor === String))
		{
			super();
			this.constructor_2(url, base);
			return;
		}
		super();
		this.constructor_3(url, base);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(url: string): void
	{
	}
	private constructor_2(url: string, base: string): void
	{
	}
	private constructor_3(url: string, base: URL): void
	{
	}
	static CreateObjectURL(blob: Blob): string;
	static CreateObjectURL(blob: Blob, options: ObjectUrlOptions): string;
	static CreateObjectURL(source: MediaSource): string;
	static CreateObjectURL(source: MediaSource, options: ObjectUrlOptions): string;
	static CreateObjectURL(stream: MediaStream): string;
	static CreateObjectURL(stream: MediaStream, options: ObjectUrlOptions): string;
	static CreateObjectURL(blobOrSourceOrStream: any, options?: ObjectUrlOptions): string
	{
		if (arguments.length === 1 && (blobOrSourceOrStream === null || blobOrSourceOrStream instanceof Blob))
		{
			return URL.CreateObjectURL_0(blobOrSourceOrStream);
		}
		if (arguments.length === 2 && (blobOrSourceOrStream === null || blobOrSourceOrStream instanceof Blob) && (options === null || options instanceof ObjectUrlOptions))
		{
			return URL.CreateObjectURL_1(blobOrSourceOrStream, options);
		}
		if (arguments.length === 1 && (blobOrSourceOrStream === null || blobOrSourceOrStream instanceof MediaSource))
		{
			return URL.CreateObjectURL_2(blobOrSourceOrStream);
		}
		if (arguments.length === 2 && (blobOrSourceOrStream === null || blobOrSourceOrStream instanceof MediaSource) && (options === null || options instanceof ObjectUrlOptions))
		{
			return URL.CreateObjectURL_3(blobOrSourceOrStream, options);
		}
		if (arguments.length === 1 && (blobOrSourceOrStream === null || blobOrSourceOrStream instanceof MediaStream))
		{
			return URL.CreateObjectURL_4(blobOrSourceOrStream);
		}
		return URL.CreateObjectURL_5(blobOrSourceOrStream, options);
	}
	private static CreateObjectURL_0(blob: Blob): string
	{
		return null;
	}
	private static CreateObjectURL_1(blob: Blob, options: ObjectUrlOptions): string
	{
		return null;
	}
	private static CreateObjectURL_2(source: MediaSource): string
	{
		return null;
	}
	private static CreateObjectURL_3(source: MediaSource, options: ObjectUrlOptions): string
	{
		return null;
	}
	private static CreateObjectURL_4(stream: MediaStream): string
	{
		return null;
	}
	private static CreateObjectURL_5(stream: MediaStream, options: ObjectUrlOptions): string
	{
		return null;
	}
	static RevokeObjectURL(url: string): void
	{
	}
}
class URLSearchParams extends NObject
{
	constructor();
	constructor(init: string);
	constructor(init: URLSearchParams);
	constructor(init?: any)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (init === null || init.constructor === String))
		{
			super();
			this.constructor_1(init);
			return;
		}
		super();
		this.constructor_2(init);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(init: string): void
	{
	}
	private constructor_2(init: URLSearchParams): void
	{
	}
	Append(name: string, value: string): void
	{
	}
	Delete(name: string): void
	{
	}
	Get(name: string): string
	{
		return null;
	}
	GetAll(name: string): string[]
	{
		return null;
	}
	Has(name: string): boolean
	{
		return false;
	}
	Set(name: string, value: string): void
	{
	}
}
class ValidityState extends NObject
{
	get BadInput(): boolean
	{
		return false;
	}
	get CustomError(): boolean
	{
		return false;
	}
	get PatternMismatch(): boolean
	{
		return false;
	}
	get RangeOverflow(): boolean
	{
		return false;
	}
	get RangeUnderflow(): boolean
	{
		return false;
	}
	get StepMismatch(): boolean
	{
		return false;
	}
	get TooLong(): boolean
	{
		return false;
	}
	get TypeMismatch(): boolean
	{
		return false;
	}
	get Valid(): boolean
	{
		return false;
	}
	get ValueMissing(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
}
class VideoElement extends MediaElement
{
	set Height(value: number)
	{
	}
	get Height(): number
	{
		return 0;
	}
	set Poster(value: string)
	{
	}
	get Poster(): string
	{
		return null;
	}
	get VideoHeight(): number
	{
		return 0;
	}
	get VideoWidth(): number
	{
		return 0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: VideoElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: VideoElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VideoElementEvents, listener: () => void): void;
	new AddEventListener(type: VideoElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: VideoElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: VideoElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void): void;
	new AddEventListener(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VideoElementEvents, listener: IEventListener): void;
	new AddEventListener(type: VideoElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: VideoElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: VideoElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: VideoElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: VideoElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: VideoElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: VideoElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: VideoElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: VideoElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetVideoPlaybackQuality(): VideoPlaybackQuality
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: VideoElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: VideoElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VideoElementEvents, listener: () => void): void;
	new RemoveEventListener(type: VideoElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: VideoElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: VideoElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void): void;
	new RemoveEventListener(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VideoElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: VideoElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: VideoElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: VideoElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: VideoElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: VideoElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: VideoElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: VideoElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: VideoElementEvents, listener: (target: VideoElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: VideoElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: VideoElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum VideoElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum VisibilityState
{
	Hidden,
	Visible
}
enum WheelDeltaMode
{
	Line = 1,
	Page,
	Pixel = 0
}
class WheelEvent extends MouseEvent
{
	static DOM_DELTA_LINE: number = 1;
	static DOM_DELTA_PAGE: number = 2;
	static DOM_DELTA_PIXEL: number = 0;
	get DeltaMode(): WheelDeltaMode
	{
		return WheelDeltaMode.Pixel;
	}
	get DeltaX(): number
	{
		return 0.0;
	}
	get DeltaY(): number
	{
		return 0.0;
	}
	get DeltaZ(): number
	{
		return 0.0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: WheelEventInit);
	constructor(type?: string, eventInitDict?: WheelEventInit)
	{
		super();
		if (arguments.length === 0)
		{
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			this.constructor_1(type);
			return;
		}
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: WheelEventInit): void
	{
	}
}
class WheelEventInit extends MouseEventInit
{
	DeltaMode: number = 0;
	DeltaX: number = 0;
	DeltaY: number = 0;
	DeltaZ: number = 0;
	constructor()
	{
		super();
	}
}
class Window extends NObject
{
	static get ApplicationCache(): ApplicationCache
	{
		return null;
	}
	static get Closed(): boolean
	{
		return false;
	}
	static get Content(): any
	{
		return null;
	}
	static get Crypto(): Crypto
	{
		return null;
	}
	static get DevicePixelRatio(): number
	{
		return 0.0;
	}
	static get FrameElement(): Element
	{
		return null;
	}
	static get Frames(): XmlElement[]
	{
		return null;
	}
	static set FullScreen(value: boolean)
	{
	}
	static get FullScreen(): boolean
	{
		return false;
	}
	static get History(): History
	{
		return null;
	}
	static get IndexedDB(): Factory
	{
		return null;
	}
	static set InnerHeight(value: number)
	{
	}
	static get InnerHeight(): number
	{
		return 0;
	}
	static set InnerWidth(value: number)
	{
	}
	static get InnerWidth(): number
	{
		return 0;
	}
	static get Instance(): WindowInstance
	{
		return null;
	}
	static get Length(): number
	{
		return 0;
	}
	static get LocalStorage(): Storage
	{
		return null;
	}
	static get Location(): Location
	{
		return null;
	}
	static get Locationbar(): BarProp
	{
		return null;
	}
	static get Menubar(): BarProp
	{
		return null;
	}
	static set Name(value: string)
	{
	}
	static get Name(): string
	{
		return null;
	}
	static get Navigator(): NavigatorInstance
	{
		return null;
	}
	static set OnAbort(value: (event: Event) => void)
	{
	}
	static get OnAbort(): (event: Event) => void
	{
		return null;
	}
	static set OnAfterprint(value: (event: Event) => void)
	{
	}
	static get OnAfterprint(): (event: Event) => void
	{
		return null;
	}
	static set OnBeforeprint(value: (event: Event) => void)
	{
	}
	static get OnBeforeprint(): (event: Event) => void
	{
		return null;
	}
	static set OnBeforeunload(value: (event: Event) => string)
	{
	}
	static get OnBeforeunload(): (event: Event) => string
	{
		return null;
	}
	static set OnBlur(value: (event: Event) => void)
	{
	}
	static get OnBlur(): (event: Event) => void
	{
		return null;
	}
	static set OnCanplay(value: (event: Event) => void)
	{
	}
	static get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	static set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	static get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	static set OnChange(value: (event: Event) => void)
	{
	}
	static get OnChange(): (event: Event) => void
	{
		return null;
	}
	static set OnClick(value: (event: Event) => void)
	{
	}
	static get OnClick(): (event: Event) => void
	{
		return null;
	}
	static set OnContextmenu(value: (event: Event) => void)
	{
	}
	static get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	static set OnDblclick(value: (event: Event) => void)
	{
	}
	static get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	static set OnDevicelight(value: (event: Event) => void)
	{
	}
	static get OnDevicelight(): (event: Event) => void
	{
		return null;
	}
	static set OnDevicemotion(value: (event: Event) => void)
	{
	}
	static get OnDevicemotion(): (event: Event) => void
	{
		return null;
	}
	static set OnDeviceorientation(value: (event: Event) => void)
	{
	}
	static get OnDeviceorientation(): (event: Event) => void
	{
		return null;
	}
	static set OnDeviceproximity(value: (event: Event) => void)
	{
	}
	static get OnDeviceproximity(): (event: Event) => void
	{
		return null;
	}
	static set OnDrag(value: (event: Event) => void)
	{
	}
	static get OnDrag(): (event: Event) => void
	{
		return null;
	}
	static set OnDragend(value: (event: Event) => void)
	{
	}
	static get OnDragend(): (event: Event) => void
	{
		return null;
	}
	static set OnDragenter(value: (event: Event) => void)
	{
	}
	static get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	static set OnDragleave(value: (event: Event) => void)
	{
	}
	static get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	static set OnDragover(value: (event: Event) => void)
	{
	}
	static get OnDragover(): (event: Event) => void
	{
		return null;
	}
	static set OnDragstart(value: (event: Event) => void)
	{
	}
	static get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	static set OnDrop(value: (event: Event) => void)
	{
	}
	static get OnDrop(): (event: Event) => void
	{
		return null;
	}
	static set OnDurationchange(value: (event: Event) => void)
	{
	}
	static get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	static set OnEmptied(value: (event: Event) => void)
	{
	}
	static get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	static set OnEnded(value: (event: Event) => void)
	{
	}
	static get OnEnded(): (event: Event) => void
	{
		return null;
	}
	static set OnError(value: (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean)
	{
	}
	static get OnError(): (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean
	{
		return null;
	}
	static set OnFocus(value: (event: Event) => void)
	{
	}
	static get OnFocus(): (event: Event) => void
	{
		return null;
	}
	static set OnHashchange(value: (event: Event) => void)
	{
	}
	static get OnHashchange(): (event: Event) => void
	{
		return null;
	}
	static set OnInput(value: (event: Event) => void)
	{
	}
	static get OnInput(): (event: Event) => void
	{
		return null;
	}
	static set OnInvalid(value: (event: Event) => void)
	{
	}
	static get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	static set OnKeydown(value: (event: Event) => void)
	{
	}
	static get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	static set OnKeypress(value: (event: Event) => void)
	{
	}
	static get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	static set OnKeyup(value: (event: Event) => void)
	{
	}
	static get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	static set OnLoad(value: (event: Event) => void)
	{
	}
	static get OnLoad(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadeddata(value: (event: Event) => void)
	{
	}
	static get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	static get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	static set OnLoadstart(value: (event: Event) => void)
	{
	}
	static get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	static set OnMessage(value: (event: Event) => void)
	{
	}
	static get OnMessage(): (event: Event) => void
	{
		return null;
	}
	static set OnMousedown(value: (event: Event) => void)
	{
	}
	static get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseenter(value: (event: Event) => void)
	{
	}
	static get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseleave(value: (event: Event) => void)
	{
	}
	static get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	static set OnMousemove(value: (event: Event) => void)
	{
	}
	static get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseout(value: (event: Event) => void)
	{
	}
	static get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseover(value: (event: Event) => void)
	{
	}
	static get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	static set OnMouseup(value: (event: Event) => void)
	{
	}
	static get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	static set OnOffline(value: (event: Event) => void)
	{
	}
	static get OnOffline(): (event: Event) => void
	{
		return null;
	}
	static set OnOnline(value: (event: Event) => void)
	{
	}
	static get OnOnline(): (event: Event) => void
	{
		return null;
	}
	static set OnPagehide(value: (event: Event) => void)
	{
	}
	static get OnPagehide(): (event: Event) => void
	{
		return null;
	}
	static set OnPageshow(value: (event: Event) => void)
	{
	}
	static get OnPageshow(): (event: Event) => void
	{
		return null;
	}
	static set OnPause(value: (event: Event) => void)
	{
	}
	static get OnPause(): (event: Event) => void
	{
		return null;
	}
	static set OnPlay(value: (event: Event) => void)
	{
	}
	static get OnPlay(): (event: Event) => void
	{
		return null;
	}
	static set OnPlaying(value: (event: Event) => void)
	{
	}
	static get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	static set OnPointercancel(value: (event: Event) => void)
	{
	}
	static get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerdown(value: (event: Event) => void)
	{
	}
	static get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerenter(value: (event: Event) => void)
	{
	}
	static get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerleave(value: (event: Event) => void)
	{
	}
	static get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	static set OnPointermove(value: (event: Event) => void)
	{
	}
	static get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerout(value: (event: Event) => void)
	{
	}
	static get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerover(value: (event: Event) => void)
	{
	}
	static get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	static set OnPointerup(value: (event: Event) => void)
	{
	}
	static get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	static set OnPopstate(value: (event: Event) => void)
	{
	}
	static get OnPopstate(): (event: Event) => void
	{
		return null;
	}
	static set OnProgress(value: (event: Event) => void)
	{
	}
	static get OnProgress(): (event: Event) => void
	{
		return null;
	}
	static set OnRatechange(value: (event: Event) => void)
	{
	}
	static get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	static set OnReset(value: (event: Event) => void)
	{
	}
	static get OnReset(): (event: Event) => void
	{
		return null;
	}
	static set OnResize(value: (event: Event) => void)
	{
	}
	static get OnResize(): (event: Event) => void
	{
		return null;
	}
	static set OnScroll(value: (event: Event) => void)
	{
	}
	static get OnScroll(): (event: Event) => void
	{
		return null;
	}
	static set OnSeeked(value: (event: Event) => void)
	{
	}
	static get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	static set OnSeeking(value: (event: Event) => void)
	{
	}
	static get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	static set OnSelect(value: (event: Event) => void)
	{
	}
	static get OnSelect(): (event: Event) => void
	{
		return null;
	}
	static set OnShow(value: (event: Event) => void)
	{
	}
	static get OnShow(): (event: Event) => void
	{
		return null;
	}
	static set OnStalled(value: (event: Event) => void)
	{
	}
	static get OnStalled(): (event: Event) => void
	{
		return null;
	}
	static set OnSubmit(value: (event: Event) => void)
	{
	}
	static get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	static set OnSuspend(value: (event: Event) => void)
	{
	}
	static get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	static set OnTimeupdate(value: (event: Event) => void)
	{
	}
	static get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchcancel(value: (event: Event) => void)
	{
	}
	static get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchend(value: (event: Event) => void)
	{
	}
	static get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchenter(value: (event: Event) => void)
	{
	}
	static get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchleave(value: (event: Event) => void)
	{
	}
	static get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchmove(value: (event: Event) => void)
	{
	}
	static get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	static set OnTouchstart(value: (event: Event) => void)
	{
	}
	static get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	static set OnUnload(value: (event: Event) => void)
	{
	}
	static get OnUnload(): (event: Event) => void
	{
		return null;
	}
	static set OnUserproximity(value: (event: Event) => void)
	{
	}
	static get OnUserproximity(): (event: Event) => void
	{
		return null;
	}
	static set OnVolumechange(value: (event: Event) => void)
	{
	}
	static get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	static set OnWaiting(value: (event: Event) => void)
	{
	}
	static get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	static set Opener(value: WindowInstance)
	{
	}
	static get Opener(): WindowInstance
	{
		return null;
	}
	static set OuterHeight(value: number)
	{
	}
	static get OuterHeight(): number
	{
		return 0;
	}
	static set OuterWidth(value: number)
	{
	}
	static get OuterWidth(): number
	{
		return 0;
	}
	static get PageXOffset(): number
	{
		return 0;
	}
	static get PageYOffset(): number
	{
		return 0;
	}
	static get Parent(): WindowInstance
	{
		return null;
	}
	static get Performance(): PerformanceDetails
	{
		return null;
	}
	static get Personalbar(): BarProp
	{
		return null;
	}
	static get Screen(): Screen
	{
		return null;
	}
	static set ScreenX(value: number)
	{
	}
	static get ScreenX(): number
	{
		return 0;
	}
	static set ScreenY(value: number)
	{
	}
	static get ScreenY(): number
	{
		return 0;
	}
	static get Scrollbars(): BarProp
	{
		return null;
	}
	static get ScrollMaxX(): number
	{
		return 0;
	}
	static get ScrollMaxY(): number
	{
		return 0;
	}
	static get ScrollX(): number
	{
		return 0;
	}
	static get ScrollY(): number
	{
		return 0;
	}
	static get Self(): WindowInstance
	{
		return null;
	}
	static get SessionStorage(): Storage
	{
		return null;
	}
	static set Status(value: string)
	{
	}
	static get Status(): string
	{
		return null;
	}
	static get Statusbar(): BarProp
	{
		return null;
	}
	static get Toolbar(): BarProp
	{
		return null;
	}
	static get Top(): WindowInstance
	{
		return null;
	}
	static get DialogArguments(): any
	{
		return null;
	}
	static ReturnValue: any = null;
	static get Document(): DocumentInstance
	{
		return null;
	}
	static AddEventListener(type: string, listener: (target: WindowInstance, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: WindowInstanceEvents, listener: () => void): void;
	static AddEventListener(type: WindowInstanceEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: WindowInstanceEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void;
	static AddEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WindowInstanceEvents, listener: IEventListener): void;
	static AddEventListener(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: () => void): void;
	static AddEventListener(type: string, listener: () => void, capture: boolean): void;
	static AddEventListener(type: string, listener: () => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: string, listener: (event: Event) => void): void;
	static AddEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: (event: Event) => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: any, listener: any, capture?: boolean, wantsUntrusted?: any): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			Window.AddEventListener_4(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.AddEventListener_5(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_6(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.AddEventListener_7(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_8(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.AddEventListener_9(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_10(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.AddEventListener_11(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_12(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.AddEventListener_13(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_14(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			Window.AddEventListener_15(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.AddEventListener_16(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.AddEventListener_17(type, listener, capture);
			return;
		}
		Window.AddEventListener_18(type, listener, capture, wantsUntrusted);
	}
	private static AddEventListener_0(type: string, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private static AddEventListener_1(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static AddEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_4(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static AddEventListener_5(type: WindowInstanceEvents, listener: () => void): void
	{
	}
	private static AddEventListener_6(type: WindowInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_7(type: WindowInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_8(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_9(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private static AddEventListener_10(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_11(type: WindowInstanceEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_12(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static Alert(): void;
	static Alert(message: string): void;
	static Alert(message?: string): void
	{
		if (arguments.length === 0)
		{
			Window.Alert_0();
			return;
		}
		Window.Alert_1(message);
	}
	private static Alert_0(): void
	{
	}
	private static Alert_1(message: string): void
	{
	}
	static Atob(atob: string): string
	{
		return null;
	}
	static Back(): void
	{
	}
	static Blur(): void
	{
	}
	static Btoa(btoa: string): string
	{
		return null;
	}
	static CancelAnimationFrame(handle: number): void
	{
	}
	static CaptureEvents(): void
	{
	}
	static Close(): void
	{
	}
	static Confirm(): boolean;
	static Confirm(message: string): boolean;
	static Confirm(message?: string): boolean
	{
		if (arguments.length === 0)
		{
			return Window.Confirm_0();
		}
		return Window.Confirm_1(message);
	}
	private static Confirm_0(): boolean
	{
		return false;
	}
	private static Confirm_1(message: string): boolean
	{
		return false;
	}
	static DispatchEvent(event: Event): boolean
	{
		return false;
	}
	static Dump(str: string): void
	{
	}
	static Find(): boolean;
	static Find(str: string): boolean;
	static Find(str: string, caseSensitive: boolean): boolean;
	static Find(str: string, caseSensitive: boolean, backwards: boolean): boolean;
	static Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean): boolean;
	static Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean): boolean;
	static Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean): boolean;
	static Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean;
	static Find(str?: string, caseSensitive?: boolean, backwards?: boolean, wrapAround?: boolean, wholeWord?: boolean, searchInFrames?: boolean, showDialog?: boolean): boolean
	{
		if (arguments.length === 0)
		{
			return Window.Find_0();
		}
		if (arguments.length === 1 && (str === null || str.constructor === String))
		{
			return Window.Find_1(str);
		}
		if (arguments.length === 2 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean))
		{
			return Window.Find_2(str, caseSensitive);
		}
		if (arguments.length === 3 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean))
		{
			return Window.Find_3(str, caseSensitive, backwards);
		}
		if (arguments.length === 4 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean))
		{
			return Window.Find_4(str, caseSensitive, backwards, wrapAround);
		}
		if (arguments.length === 5 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean) && (wholeWord === null || wholeWord.constructor === Boolean))
		{
			return Window.Find_5(str, caseSensitive, backwards, wrapAround, wholeWord);
		}
		if (arguments.length === 6 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean) && (wholeWord === null || wholeWord.constructor === Boolean) && (searchInFrames === null || searchInFrames.constructor === Boolean))
		{
			return Window.Find_6(str, caseSensitive, backwards, wrapAround, wholeWord, searchInFrames);
		}
		return Window.Find_7(str, caseSensitive, backwards, wrapAround, wholeWord, searchInFrames, showDialog);
	}
	private static Find_0(): boolean
	{
		return false;
	}
	private static Find_1(str: string): boolean
	{
		return false;
	}
	private static Find_2(str: string, caseSensitive: boolean): boolean
	{
		return false;
	}
	private static Find_3(str: string, caseSensitive: boolean, backwards: boolean): boolean
	{
		return false;
	}
	private static Find_4(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean): boolean
	{
		return false;
	}
	private static Find_5(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean): boolean
	{
		return false;
	}
	private static Find_6(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean): boolean
	{
		return false;
	}
	private static Find_7(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean
	{
		return false;
	}
	static Focus(): void
	{
	}
	static Forward(): void
	{
	}
	static GetComputedStyle(elt: Element): Style;
	static GetComputedStyle(elt: Element, pseudoElt: string): Style;
	static GetComputedStyle(elt: Element, pseudoElt?: string): Style
	{
		if (arguments.length === 1 && (elt === null || elt instanceof Element))
		{
			return Window.GetComputedStyle_0(elt);
		}
		return Window.GetComputedStyle_1(elt, pseudoElt);
	}
	private static GetComputedStyle_0(elt: Element): Style
	{
		return null;
	}
	private static GetComputedStyle_1(elt: Element, pseudoElt: string): Style
	{
		return null;
	}
	static GetDefaultComputedStyle(elt: Element): Style;
	static GetDefaultComputedStyle(elt: Element, pseudoElt: string): Style;
	static GetDefaultComputedStyle(elt: Element, pseudoElt?: string): Style
	{
		if (arguments.length === 1 && (elt === null || elt instanceof Element))
		{
			return Window.GetDefaultComputedStyle_0(elt);
		}
		return Window.GetDefaultComputedStyle_1(elt, pseudoElt);
	}
	private static GetDefaultComputedStyle_0(elt: Element): Style
	{
		return null;
	}
	private static GetDefaultComputedStyle_1(elt: Element, pseudoElt: string): Style
	{
		return null;
	}
	static GetSelection(): Selection
	{
		return null;
	}
	static Home(): void
	{
	}
	static MatchMedia(query: string): MediaQueryList
	{
		return null;
	}
	static MoveBy(x: number, y: number): void
	{
	}
	static MoveTo(x: number, y: number): void
	{
	}
	static Open(): WindowInstance;
	static Open(url: string): WindowInstance;
	static Open(url: string, target: string): WindowInstance;
	static Open(url: string, target: string, features: string): WindowInstance;
	static Open(url?: string, target?: string, features?: string): WindowInstance
	{
		if (arguments.length === 0)
		{
			return Window.Open_0();
		}
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			return Window.Open_1(url);
		}
		if (arguments.length === 2 && (url === null || url.constructor === String) && (target === null || target.constructor === String))
		{
			return Window.Open_2(url, target);
		}
		return Window.Open_3(url, target, features);
	}
	private static Open_0(): WindowInstance
	{
		return null;
	}
	private static Open_1(url: string): WindowInstance
	{
		return null;
	}
	private static Open_2(url: string, target: string): WindowInstance
	{
		return null;
	}
	private static Open_3(url: string, target: string, features: string): WindowInstance
	{
		return null;
	}
	static PostMessage(message: any, targetOrigin: string): void;
	static PostMessage(message: any, targetOrigin: string, transfer: any[]): void;
	static PostMessage(message: any, targetOrigin: string, transfer?: any[]): void
	{
		if (arguments.length === 2 && (message === null || message.constructor === Object) && (targetOrigin === null || targetOrigin.constructor === String))
		{
			Window.PostMessage_0(message, targetOrigin);
			return;
		}
		Window.PostMessage_1(message, targetOrigin, transfer);
	}
	private static PostMessage_0(message: any, targetOrigin: string): void
	{
	}
	private static PostMessage_1(message: any, targetOrigin: string, transfer: any[]): void
	{
	}
	static Print(): void
	{
	}
	static Prompt(): string;
	static Prompt(message: string): string;
	static Prompt(message: string, $default: string): string;
	static Prompt(message?: string, $default?: string): string
	{
		if (arguments.length === 0)
		{
			return Window.Prompt_0();
		}
		if (arguments.length === 1 && (message === null || message.constructor === String))
		{
			return Window.Prompt_1(message);
		}
		return Window.Prompt_2(message, $default);
	}
	private static Prompt_0(): string
	{
		return null;
	}
	private static Prompt_1(message: string): string
	{
		return null;
	}
	private static Prompt_2(message: string, $default: string): string
	{
		return null;
	}
	static ReleaseEvents(): void
	{
	}
	static RemoveEventListener(type: string, listener: (target: WindowInstance, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: IEventListener): void;
	static RemoveEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: () => void): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: IEventListener): void;
	static RemoveEventListener(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: string, listener: () => void): void;
	static RemoveEventListener(type: string, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: (event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.RemoveEventListener_8(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_9(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			Window.RemoveEventListener_10(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_11(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.RemoveEventListener_12(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			Window.RemoveEventListener_13(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			Window.RemoveEventListener_14(type, listener);
			return;
		}
		Window.RemoveEventListener_15(type, listener, capture);
	}
	private static RemoveEventListener_0(type: string, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private static RemoveEventListener_1(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_4(type: WindowInstanceEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_5(type: WindowInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_6(type: WindowInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_7(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_8(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private static RemoveEventListener_9(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_10(type: WindowInstanceEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_11(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static RequestAnimationFrame(callback: (time: number) => void): number
	{
		return 0;
	}
	static ResizeBy(x: number, y: number): void
	{
	}
	static ResizeTo(x: number, y: number): void
	{
	}
	static Scroll(x: number, y: number): void
	{
	}
	static ScrollBy(x: number, y: number): void
	{
	}
	static ScrollByLines(numLines: number): void
	{
	}
	static ScrollByPages(numPages: number): void
	{
	}
	static ScrollTo(x: number, y: number): void
	{
	}
	static SetResizable(resizable: boolean): void
	{
	}
	static ShowModalDialog(url: string, argument: any): any;
	static ShowModalDialog(url: string, argument: any, options: string): any;
	static ShowModalDialog(url: string): any;
	static ShowModalDialog(url: string, argument?: any, options?: string): any
	{
		if (arguments.length === 2 && (url === null || url.constructor === String) && (argument === null || argument.constructor === Object))
		{
			return Window.ShowModalDialog_0(url, argument);
		}
		if (arguments.length === 3 && (url === null || url.constructor === String) && (argument === null || argument.constructor === Object) && (options === null || options.constructor === String))
		{
			return Window.ShowModalDialog_1(url, argument, options);
		}
		return Window.ShowModalDialog_2(url);
	}
	private static ShowModalDialog_0(url: string, argument: any): any
	{
		return null;
	}
	private static ShowModalDialog_1(url: string, argument: any, options: string): any
	{
		return null;
	}
	static SizeToContent(): void
	{
	}
	static Stop(): void
	{
	}
	static ToNativeLineEndings($string: string): string
	{
		return null;
	}
	static UpdateCommands(action: string): void
	{
	}
	private static AddEventListener_13(type: string, listener: () => void): void
	{
	}
	private static AddEventListener_14(type: string, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_15(type: string, listener: () => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static RemoveEventListener_12(type: string, listener: () => void): void
	{
	}
	private static RemoveEventListener_13(type: string, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_16(type: string, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_17(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_18(type: string, listener: (event: Event) => void, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static RemoveEventListener_14(type: string, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_15(type: string, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static ShowModalDialog_2(url: string): any
	{
		return null;
	}
	static SetTimeout(handler: () => void): number;
	static SetTimeout(handler: () => void, timeout: number): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetTimeout(handler: string): number;
	static SetTimeout(handler: string, timeout: number): number;
	static SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return Window.SetTimeout_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return Window.SetTimeout_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return Window.SetTimeout_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return Window.SetTimeout_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return Window.SetTimeout_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return Window.SetTimeout_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return Window.SetTimeout_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return Window.SetTimeout_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return Window.SetTimeout_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return Window.SetTimeout_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return Window.SetTimeout_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return Window.SetTimeout_11(handler);
		}
		return Window.SetTimeout_12(handler, timeout);
	}
	private static SetTimeout_0(handler: () => void): number
	{
		return 0;
	}
	private static SetTimeout_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetTimeout_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetTimeout_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetTimeout_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetTimeout_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetTimeout_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetTimeout_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetTimeout_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetTimeout_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetTimeout_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetTimeout_11(handler: string): number
	{
		return 0;
	}
	private static SetTimeout_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static SetInterval(handler: () => void): number;
	static SetInterval(handler: () => void, timeout: number): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetInterval(handler: string): number;
	static SetInterval(handler: string, timeout: number): number;
	static SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return Window.SetInterval_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return Window.SetInterval_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return Window.SetInterval_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return Window.SetInterval_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return Window.SetInterval_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return Window.SetInterval_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return Window.SetInterval_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return Window.SetInterval_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return Window.SetInterval_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return Window.SetInterval_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return Window.SetInterval_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return Window.SetInterval_11(handler);
		}
		return Window.SetInterval_12(handler, timeout);
	}
	private static SetInterval_0(handler: () => void): number
	{
		return 0;
	}
	private static SetInterval_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetInterval_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetInterval_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetInterval_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetInterval_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetInterval_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetInterval_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetInterval_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetInterval_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetInterval_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetInterval_11(handler: string): number
	{
		return 0;
	}
	private static SetInterval_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static ClearInterval(handle: number): void
	{
	}
	static ClearTimeout(handle: number): void
	{
	}
	constructor()
	{
		super();
	}
}
class WindowInstance extends EventTarget implements IWindowTimers, IWindowBase64
{
	get ApplicationCache(): ApplicationCache
	{
		return null;
	}
	get Closed(): boolean
	{
		return false;
	}
	get Content(): any
	{
		return null;
	}
	get Crypto(): Crypto
	{
		return null;
	}
	get DevicePixelRatio(): number
	{
		return 0.0;
	}
	get FrameElement(): Element
	{
		return null;
	}
	get Frames(): XmlElement[]
	{
		return null;
	}
	set FullScreen(value: boolean)
	{
	}
	get FullScreen(): boolean
	{
		return false;
	}
	get History(): History
	{
		return null;
	}
	get IndexedDB(): Factory
	{
		return null;
	}
	set InnerHeight(value: number)
	{
	}
	get InnerHeight(): number
	{
		return 0;
	}
	set InnerWidth(value: number)
	{
	}
	get InnerWidth(): number
	{
		return 0;
	}
	get Instance(): WindowInstance
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get LocalStorage(): Storage
	{
		return null;
	}
	get Location(): Location
	{
		return null;
	}
	get Locationbar(): BarProp
	{
		return null;
	}
	get Menubar(): BarProp
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	get Navigator(): NavigatorInstance
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnAfterprint(value: (event: Event) => void)
	{
	}
	get OnAfterprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeprint(value: (event: Event) => void)
	{
	}
	get OnBeforeprint(): (event: Event) => void
	{
		return null;
	}
	set OnBeforeunload(value: (event: Event) => string)
	{
	}
	get OnBeforeunload(): (event: Event) => string
	{
		return null;
	}
	set OnBlur(value: (event: Event) => void)
	{
	}
	get OnBlur(): (event: Event) => void
	{
		return null;
	}
	set OnCanplay(value: (event: Event) => void)
	{
	}
	get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	set OnChange(value: (event: Event) => void)
	{
	}
	get OnChange(): (event: Event) => void
	{
		return null;
	}
	set OnClick(value: (event: Event) => void)
	{
	}
	get OnClick(): (event: Event) => void
	{
		return null;
	}
	set OnContextmenu(value: (event: Event) => void)
	{
	}
	get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	set OnDblclick(value: (event: Event) => void)
	{
	}
	get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	set OnDevicelight(value: (event: Event) => void)
	{
	}
	get OnDevicelight(): (event: Event) => void
	{
		return null;
	}
	set OnDevicemotion(value: (event: Event) => void)
	{
	}
	get OnDevicemotion(): (event: Event) => void
	{
		return null;
	}
	set OnDeviceorientation(value: (event: Event) => void)
	{
	}
	get OnDeviceorientation(): (event: Event) => void
	{
		return null;
	}
	set OnDeviceproximity(value: (event: Event) => void)
	{
	}
	get OnDeviceproximity(): (event: Event) => void
	{
		return null;
	}
	set OnDrag(value: (event: Event) => void)
	{
	}
	get OnDrag(): (event: Event) => void
	{
		return null;
	}
	set OnDragend(value: (event: Event) => void)
	{
	}
	get OnDragend(): (event: Event) => void
	{
		return null;
	}
	set OnDragenter(value: (event: Event) => void)
	{
	}
	get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	set OnDragleave(value: (event: Event) => void)
	{
	}
	get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	set OnDragover(value: (event: Event) => void)
	{
	}
	get OnDragover(): (event: Event) => void
	{
		return null;
	}
	set OnDragstart(value: (event: Event) => void)
	{
	}
	get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	set OnDrop(value: (event: Event) => void)
	{
	}
	get OnDrop(): (event: Event) => void
	{
		return null;
	}
	set OnDurationchange(value: (event: Event) => void)
	{
	}
	get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	set OnEmptied(value: (event: Event) => void)
	{
	}
	get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean)
	{
	}
	get OnError(): (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean
	{
		return null;
	}
	set OnFocus(value: (event: Event) => void)
	{
	}
	get OnFocus(): (event: Event) => void
	{
		return null;
	}
	set OnHashchange(value: (event: Event) => void)
	{
	}
	get OnHashchange(): (event: Event) => void
	{
		return null;
	}
	set OnInput(value: (event: Event) => void)
	{
	}
	get OnInput(): (event: Event) => void
	{
		return null;
	}
	set OnInvalid(value: (event: Event) => void)
	{
	}
	get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	set OnKeydown(value: (event: Event) => void)
	{
	}
	get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	set OnKeypress(value: (event: Event) => void)
	{
	}
	get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	set OnKeyup(value: (event: Event) => void)
	{
	}
	get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadeddata(value: (event: Event) => void)
	{
	}
	get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnMousedown(value: (event: Event) => void)
	{
	}
	get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	set OnMouseenter(value: (event: Event) => void)
	{
	}
	get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	set OnMouseleave(value: (event: Event) => void)
	{
	}
	get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	set OnMousemove(value: (event: Event) => void)
	{
	}
	get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	set OnMouseout(value: (event: Event) => void)
	{
	}
	get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	set OnMouseover(value: (event: Event) => void)
	{
	}
	get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	set OnMouseup(value: (event: Event) => void)
	{
	}
	get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	set OnOffline(value: (event: Event) => void)
	{
	}
	get OnOffline(): (event: Event) => void
	{
		return null;
	}
	set OnOnline(value: (event: Event) => void)
	{
	}
	get OnOnline(): (event: Event) => void
	{
		return null;
	}
	set OnPagehide(value: (event: Event) => void)
	{
	}
	get OnPagehide(): (event: Event) => void
	{
		return null;
	}
	set OnPageshow(value: (event: Event) => void)
	{
	}
	get OnPageshow(): (event: Event) => void
	{
		return null;
	}
	set OnPause(value: (event: Event) => void)
	{
	}
	get OnPause(): (event: Event) => void
	{
		return null;
	}
	set OnPlay(value: (event: Event) => void)
	{
	}
	get OnPlay(): (event: Event) => void
	{
		return null;
	}
	set OnPlaying(value: (event: Event) => void)
	{
	}
	get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	set OnPointercancel(value: (event: Event) => void)
	{
	}
	get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	set OnPointerdown(value: (event: Event) => void)
	{
	}
	get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	set OnPointerenter(value: (event: Event) => void)
	{
	}
	get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	set OnPointerleave(value: (event: Event) => void)
	{
	}
	get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	set OnPointermove(value: (event: Event) => void)
	{
	}
	get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	set OnPointerout(value: (event: Event) => void)
	{
	}
	get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	set OnPointerover(value: (event: Event) => void)
	{
	}
	get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	set OnPointerup(value: (event: Event) => void)
	{
	}
	get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	set OnPopstate(value: (event: Event) => void)
	{
	}
	get OnPopstate(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnRatechange(value: (event: Event) => void)
	{
	}
	get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	set OnReset(value: (event: Event) => void)
	{
	}
	get OnReset(): (event: Event) => void
	{
		return null;
	}
	set OnResize(value: (event: Event) => void)
	{
	}
	get OnResize(): (event: Event) => void
	{
		return null;
	}
	set OnScroll(value: (event: Event) => void)
	{
	}
	get OnScroll(): (event: Event) => void
	{
		return null;
	}
	set OnSeeked(value: (event: Event) => void)
	{
	}
	get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	set OnSeeking(value: (event: Event) => void)
	{
	}
	get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	set OnSelect(value: (event: Event) => void)
	{
	}
	get OnSelect(): (event: Event) => void
	{
		return null;
	}
	set OnShow(value: (event: Event) => void)
	{
	}
	get OnShow(): (event: Event) => void
	{
		return null;
	}
	set OnStalled(value: (event: Event) => void)
	{
	}
	get OnStalled(): (event: Event) => void
	{
		return null;
	}
	set OnSubmit(value: (event: Event) => void)
	{
	}
	get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	set OnSuspend(value: (event: Event) => void)
	{
	}
	get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	set OnTimeupdate(value: (event: Event) => void)
	{
	}
	get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	set OnTouchcancel(value: (event: Event) => void)
	{
	}
	get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	set OnTouchend(value: (event: Event) => void)
	{
	}
	get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	set OnTouchenter(value: (event: Event) => void)
	{
	}
	get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	set OnTouchleave(value: (event: Event) => void)
	{
	}
	get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	set OnTouchmove(value: (event: Event) => void)
	{
	}
	get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	set OnTouchstart(value: (event: Event) => void)
	{
	}
	get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	set OnUnload(value: (event: Event) => void)
	{
	}
	get OnUnload(): (event: Event) => void
	{
		return null;
	}
	set OnUserproximity(value: (event: Event) => void)
	{
	}
	get OnUserproximity(): (event: Event) => void
	{
		return null;
	}
	set OnVolumechange(value: (event: Event) => void)
	{
	}
	get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	set OnWaiting(value: (event: Event) => void)
	{
	}
	get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	set Opener(value: WindowInstance)
	{
	}
	get Opener(): WindowInstance
	{
		return null;
	}
	set OuterHeight(value: number)
	{
	}
	get OuterHeight(): number
	{
		return 0;
	}
	set OuterWidth(value: number)
	{
	}
	get OuterWidth(): number
	{
		return 0;
	}
	get PageXOffset(): number
	{
		return 0;
	}
	get PageYOffset(): number
	{
		return 0;
	}
	get Parent(): WindowInstance
	{
		return null;
	}
	get Performance(): PerformanceDetails
	{
		return null;
	}
	get Personalbar(): BarProp
	{
		return null;
	}
	get Screen(): Screen
	{
		return null;
	}
	set ScreenX(value: number)
	{
	}
	get ScreenX(): number
	{
		return 0;
	}
	set ScreenY(value: number)
	{
	}
	get ScreenY(): number
	{
		return 0;
	}
	get Scrollbars(): BarProp
	{
		return null;
	}
	get ScrollMaxX(): number
	{
		return 0;
	}
	get ScrollMaxY(): number
	{
		return 0;
	}
	get ScrollX(): number
	{
		return 0;
	}
	get ScrollY(): number
	{
		return 0;
	}
	get Self(): WindowInstance
	{
		return null;
	}
	get SessionStorage(): Storage
	{
		return null;
	}
	set Status(value: string)
	{
	}
	get Status(): string
	{
		return null;
	}
	get Statusbar(): BarProp
	{
		return null;
	}
	get Toolbar(): BarProp
	{
		return null;
	}
	get Top(): WindowInstance
	{
		return null;
	}
	get DialogArguments(): any
	{
		return null;
	}
	ReturnValue: any = null;
	get Document(): DocumentBase
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: WindowInstance, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WindowInstanceEvents, listener: () => void): void;
	new AddEventListener(type: WindowInstanceEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: WindowInstanceEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void;
	new AddEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WindowInstanceEvents, listener: IEventListener): void;
	new AddEventListener(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: WindowInstanceEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: WindowInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: WindowInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: WindowInstanceEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Alert(): void;
	Alert(message: string): void;
	Alert(message?: string): void
	{
		if (arguments.length === 0)
		{
			this.Alert_0();
			return;
		}
		this.Alert_1(message);
	}
	private Alert_0(): void
	{
	}
	private Alert_1(message: string): void
	{
	}
	Atob(atob: string): string
	{
		return null;
	}
	Back(): void
	{
	}
	Blur(): void
	{
	}
	Btoa(btoa: string): string
	{
		return null;
	}
	CancelAnimationFrame(handle: number): void
	{
	}
	CaptureEvents(): void
	{
	}
	Close(): void
	{
	}
	Confirm(): boolean;
	Confirm(message: string): boolean;
	Confirm(message?: string): boolean
	{
		if (arguments.length === 0)
		{
			return this.Confirm_0();
		}
		return this.Confirm_1(message);
	}
	private Confirm_0(): boolean
	{
		return false;
	}
	private Confirm_1(message: string): boolean
	{
		return false;
	}
	Dump(str: string): void
	{
	}
	Find(): boolean;
	Find(str: string): boolean;
	Find(str: string, caseSensitive: boolean): boolean;
	Find(str: string, caseSensitive: boolean, backwards: boolean): boolean;
	Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean): boolean;
	Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean): boolean;
	Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean): boolean;
	Find(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean;
	Find(str?: string, caseSensitive?: boolean, backwards?: boolean, wrapAround?: boolean, wholeWord?: boolean, searchInFrames?: boolean, showDialog?: boolean): boolean
	{
		if (arguments.length === 0)
		{
			return this.Find_0();
		}
		if (arguments.length === 1 && (str === null || str.constructor === String))
		{
			return this.Find_1(str);
		}
		if (arguments.length === 2 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean))
		{
			return this.Find_2(str, caseSensitive);
		}
		if (arguments.length === 3 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean))
		{
			return this.Find_3(str, caseSensitive, backwards);
		}
		if (arguments.length === 4 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean))
		{
			return this.Find_4(str, caseSensitive, backwards, wrapAround);
		}
		if (arguments.length === 5 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean) && (wholeWord === null || wholeWord.constructor === Boolean))
		{
			return this.Find_5(str, caseSensitive, backwards, wrapAround, wholeWord);
		}
		if (arguments.length === 6 && (str === null || str.constructor === String) && (caseSensitive === null || caseSensitive.constructor === Boolean) && (backwards === null || backwards.constructor === Boolean) && (wrapAround === null || wrapAround.constructor === Boolean) && (wholeWord === null || wholeWord.constructor === Boolean) && (searchInFrames === null || searchInFrames.constructor === Boolean))
		{
			return this.Find_6(str, caseSensitive, backwards, wrapAround, wholeWord, searchInFrames);
		}
		return this.Find_7(str, caseSensitive, backwards, wrapAround, wholeWord, searchInFrames, showDialog);
	}
	private Find_0(): boolean
	{
		return false;
	}
	private Find_1(str: string): boolean
	{
		return false;
	}
	private Find_2(str: string, caseSensitive: boolean): boolean
	{
		return false;
	}
	private Find_3(str: string, caseSensitive: boolean, backwards: boolean): boolean
	{
		return false;
	}
	private Find_4(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean): boolean
	{
		return false;
	}
	private Find_5(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean): boolean
	{
		return false;
	}
	private Find_6(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean): boolean
	{
		return false;
	}
	private Find_7(str: string, caseSensitive: boolean, backwards: boolean, wrapAround: boolean, wholeWord: boolean, searchInFrames: boolean, showDialog: boolean): boolean
	{
		return false;
	}
	Focus(): void
	{
	}
	Forward(): void
	{
	}
	GetComputedStyle(elt: Element): Style;
	GetComputedStyle(elt: Element, pseudoElt: string): Style;
	GetComputedStyle(elt: Element, pseudoElt?: string): Style
	{
		if (arguments.length === 1 && (elt === null || elt instanceof Element))
		{
			return this.GetComputedStyle_0(elt);
		}
		return this.GetComputedStyle_1(elt, pseudoElt);
	}
	private GetComputedStyle_0(elt: Element): Style
	{
		return null;
	}
	private GetComputedStyle_1(elt: Element, pseudoElt: string): Style
	{
		return null;
	}
	GetDefaultComputedStyle(elt: Element): Style;
	GetDefaultComputedStyle(elt: Element, pseudoElt: string): Style;
	GetDefaultComputedStyle(elt: Element, pseudoElt?: string): Style
	{
		if (arguments.length === 1 && (elt === null || elt instanceof Element))
		{
			return this.GetDefaultComputedStyle_0(elt);
		}
		return this.GetDefaultComputedStyle_1(elt, pseudoElt);
	}
	private GetDefaultComputedStyle_0(elt: Element): Style
	{
		return null;
	}
	private GetDefaultComputedStyle_1(elt: Element, pseudoElt: string): Style
	{
		return null;
	}
	GetSelection(): Selection
	{
		return null;
	}
	Home(): void
	{
	}
	MatchMedia(query: string): MediaQueryList
	{
		return null;
	}
	MoveBy(x: number, y: number): void
	{
	}
	MoveTo(x: number, y: number): void
	{
	}
	Open(): WindowInstance;
	Open(url: string): WindowInstance;
	Open(url: string, target: string): WindowInstance;
	Open(url: string, target: string, features: string): WindowInstance;
	Open(url?: string, target?: string, features?: string): WindowInstance
	{
		if (arguments.length === 0)
		{
			return this.Open_0();
		}
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			return this.Open_1(url);
		}
		if (arguments.length === 2 && (url === null || url.constructor === String) && (target === null || target.constructor === String))
		{
			return this.Open_2(url, target);
		}
		return this.Open_3(url, target, features);
	}
	private Open_0(): WindowInstance
	{
		return null;
	}
	private Open_1(url: string): WindowInstance
	{
		return null;
	}
	private Open_2(url: string, target: string): WindowInstance
	{
		return null;
	}
	private Open_3(url: string, target: string, features: string): WindowInstance
	{
		return null;
	}
	PostMessage(message: any, targetOrigin: string): void;
	PostMessage(message: any, targetOrigin: string, transfer: any[]): void;
	PostMessage(message: any, targetOrigin: string, transfer?: any[]): void
	{
		if (arguments.length === 2 && (message === null || message.constructor === Object) && (targetOrigin === null || targetOrigin.constructor === String))
		{
			this.PostMessage_0(message, targetOrigin);
			return;
		}
		this.PostMessage_1(message, targetOrigin, transfer);
	}
	private PostMessage_0(message: any, targetOrigin: string): void
	{
	}
	private PostMessage_1(message: any, targetOrigin: string, transfer: any[]): void
	{
	}
	Print(): void
	{
	}
	Prompt(): string;
	Prompt(message: string): string;
	Prompt(message: string, $default: string): string;
	Prompt(message?: string, $default?: string): string
	{
		if (arguments.length === 0)
		{
			return this.Prompt_0();
		}
		if (arguments.length === 1 && (message === null || message.constructor === String))
		{
			return this.Prompt_1(message);
		}
		return this.Prompt_2(message, $default);
	}
	private Prompt_0(): string
	{
		return null;
	}
	private Prompt_1(message: string): string
	{
		return null;
	}
	private Prompt_2(message: string, $default: string): string
	{
		return null;
	}
	ReleaseEvents(): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: WindowInstance, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: () => void): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: IEventListener): void;
	new RemoveEventListener(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: WindowInstanceEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: WindowInstanceEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: WindowInstanceEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: WindowInstanceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: WindowInstanceEvents, listener: (target: WindowInstance, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: WindowInstanceEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: WindowInstanceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	RequestAnimationFrame(callback: (time: number) => void): number
	{
		return 0;
	}
	ResizeBy(x: number, y: number): void
	{
	}
	ResizeTo(x: number, y: number): void
	{
	}
	Scroll(x: number, y: number): void
	{
	}
	ScrollBy(x: number, y: number): void
	{
	}
	ScrollByLines(numLines: number): void
	{
	}
	ScrollByPages(numPages: number): void
	{
	}
	ScrollTo(x: number, y: number): void
	{
	}
	SetResizable(resizable: boolean): void
	{
	}
	ShowModalDialog(url: string, argument: any): any;
	ShowModalDialog(url: string, argument: any, options: string): any;
	ShowModalDialog(url: string): any;
	ShowModalDialog(url: string, argument?: any, options?: string): any
	{
		if (arguments.length === 2 && (url === null || url.constructor === String) && (argument === null || argument.constructor === Object))
		{
			return this.ShowModalDialog_0(url, argument);
		}
		if (arguments.length === 3 && (url === null || url.constructor === String) && (argument === null || argument.constructor === Object) && (options === null || options.constructor === String))
		{
			return this.ShowModalDialog_1(url, argument, options);
		}
		return this.ShowModalDialog_2(url);
	}
	private ShowModalDialog_0(url: string, argument: any): any
	{
		return null;
	}
	private ShowModalDialog_1(url: string, argument: any, options: string): any
	{
		return null;
	}
	SizeToContent(): void
	{
	}
	Stop(): void
	{
	}
	ToNativeLineEndings($string: string): string
	{
		return null;
	}
	UpdateCommands(action: string): void
	{
	}
	private ShowModalDialog_2(url: string): any
	{
		return null;
	}
	SetTimeout(handler: () => void): number;
	SetTimeout(handler: () => void, timeout: number): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetTimeout(handler: string): number;
	SetTimeout(handler: string, timeout: number): number;
	SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return this.SetTimeout_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return this.SetTimeout_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return this.SetTimeout_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return this.SetTimeout_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return this.SetTimeout_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return this.SetTimeout_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return this.SetTimeout_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return this.SetTimeout_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return this.SetTimeout_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return this.SetTimeout_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return this.SetTimeout_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return this.SetTimeout_11(handler);
		}
		return this.SetTimeout_12(handler, timeout);
	}
	private SetTimeout_0(handler: () => void): number
	{
		return 0;
	}
	private SetTimeout_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private SetTimeout_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private SetTimeout_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private SetTimeout_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private SetTimeout_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private SetTimeout_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private SetTimeout_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private SetTimeout_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private SetTimeout_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private SetTimeout_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private SetTimeout_11(handler: string): number
	{
		return 0;
	}
	private SetTimeout_12(handler: string, timeout: number): number
	{
		return 0;
	}
	SetInterval(handler: () => void): number;
	SetInterval(handler: () => void, timeout: number): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetInterval(handler: string): number;
	SetInterval(handler: string, timeout: number): number;
	SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return this.SetInterval_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return this.SetInterval_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return this.SetInterval_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return this.SetInterval_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return this.SetInterval_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return this.SetInterval_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return this.SetInterval_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return this.SetInterval_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return this.SetInterval_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return this.SetInterval_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return this.SetInterval_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return this.SetInterval_11(handler);
		}
		return this.SetInterval_12(handler, timeout);
	}
	private SetInterval_0(handler: () => void): number
	{
		return 0;
	}
	private SetInterval_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private SetInterval_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private SetInterval_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private SetInterval_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private SetInterval_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private SetInterval_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private SetInterval_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private SetInterval_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private SetInterval_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private SetInterval_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private SetInterval_11(handler: string): number
	{
		return 0;
	}
	private SetInterval_12(handler: string, timeout: number): number
	{
		return 0;
	}
	ClearInterval(handle: number): void
	{
	}
	ClearTimeout(handle: number): void
	{
	}
}
enum WindowInstanceEvents
{
	Abort,
	Afterprint,
	Beforeprint,
	Beforeunload,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Dblclick,
	Devicelight,
	Devicemotion,
	Deviceorientation,
	Deviceproximity,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Hashchange,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Message,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Offline,
	Online,
	Pagehide,
	Pageshow,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Popstate,
	Progress,
	Ratechange,
	Reset,
	Resize,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Unload,
	Userproximity,
	Volumechange,
	Waiting
}
enum EventPhase
{
	None,
	CapturingPhase,
	AtTarget,
	BubblingPhase
}
class ElementNodeList extends NObject
{
	get_Item(index: number): Element
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get Count(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<Element>
	{
		return null;
	}
	Item(index: number): Element
	{
		return null;
	}
}
class Cursor extends NObject
{
	get Direction(): CursorDirection
	{
		return CursorDirection.Next;
	}
	get Key(): any
	{
		return null;
	}
	get PrimaryKey(): any
	{
		return null;
	}
	get Source(): TypeOption<ObjectStore, Index>
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Advance(count: number): void
	{
	}
	Continue(key: any): void
	{
	}
	Delete(): Request
	{
		return null;
	}
	Update(value: any): Request
	{
		return null;
	}
}
enum CursorDirection
{
	Next,
	Nextunique,
	Prev,
	Prevunique
}
class CursorWithValue extends Cursor
{
	get Value(): any
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class Database extends EventTarget
{
	get Name(): string
	{
		return null;
	}
	get ObjectStoreNames(): DOMStringList
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnVersionchange(value: (event: Event) => void)
	{
	}
	get OnVersionchange(): (event: Event) => void
	{
		return null;
	}
	get Storage(): StorageType
	{
		return StorageType.Persistent;
	}
	get Version(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DatabaseEvents, listener: () => void): void;
	AddEventListener(type: DatabaseEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DatabaseEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DatabaseEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DatabaseEvents, listener: (target: Database, event: Event) => void): void;
	AddEventListener(type: DatabaseEvents, listener: (target: Database, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DatabaseEvents, listener: IEventListener): void;
	AddEventListener(type: DatabaseEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: Database, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: Database, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DatabaseEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DatabaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DatabaseEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DatabaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DatabaseEvents, listener: (target: Database, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DatabaseEvents, listener: (target: Database, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DatabaseEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DatabaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: Database, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: Database, event: Event) => void, capture: boolean): void
	{
	}
	Close(): void
	{
	}
	CreateObjectStore(name: string): ObjectStore;
	CreateObjectStore(name: string, optionalParameters: ObjectStoreParameters): ObjectStore;
	CreateObjectStore(name: string, optionalParameters?: ObjectStoreParameters): ObjectStore
	{
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			return this.CreateObjectStore_0(name);
		}
		return this.CreateObjectStore_1(name, optionalParameters);
	}
	private CreateObjectStore_0(name: string): ObjectStore
	{
		return null;
	}
	private CreateObjectStore_1(name: string, optionalParameters: ObjectStoreParameters): ObjectStore
	{
		return null;
	}
	DeleteObjectStore(name: string): void
	{
	}
	RemoveEventListener(type: DatabaseEvents, listener: () => void): void;
	RemoveEventListener(type: DatabaseEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DatabaseEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DatabaseEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DatabaseEvents, listener: (target: Database, event: Event) => void): void;
	RemoveEventListener(type: DatabaseEvents, listener: (target: Database, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DatabaseEvents, listener: IEventListener): void;
	RemoveEventListener(type: DatabaseEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: Database, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: Database, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DatabaseEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DatabaseEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DatabaseEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DatabaseEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DatabaseEvents, listener: (target: Database, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DatabaseEvents, listener: (target: Database, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DatabaseEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DatabaseEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: Database, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: Database, event: Event) => void, capture: boolean): void
	{
	}
	Transaction(storeName: string): Transaction;
	Transaction(storeName: string, mode: TransactionMode): Transaction;
	Transaction(storeNames: string[]): Transaction;
	Transaction(storeNames: string[], mode: TransactionMode): Transaction;
	Transaction(storeNameOrStoreNames: any, mode?: TransactionMode): Transaction
	{
		if (arguments.length === 1 && (storeNameOrStoreNames === null || storeNameOrStoreNames.constructor === String))
		{
			return this.Transaction_0(storeNameOrStoreNames);
		}
		if (arguments.length === 2 && (storeNameOrStoreNames === null || storeNameOrStoreNames.constructor === String) && (mode === null || mode.constructor === Number))
		{
			return this.Transaction_1(storeNameOrStoreNames, mode);
		}
		if (arguments.length === 1 && (storeNameOrStoreNames === null || storeNameOrStoreNames instanceof Array))
		{
			return this.Transaction_2(storeNameOrStoreNames);
		}
		return this.Transaction_3(storeNameOrStoreNames, mode);
	}
	private Transaction_0(storeName: string): Transaction
	{
		return null;
	}
	private Transaction_1(storeName: string, mode: TransactionMode): Transaction
	{
		return null;
	}
	private Transaction_2(storeNames: string[]): Transaction
	{
		return null;
	}
	private Transaction_3(storeNames: string[], mode: TransactionMode): Transaction
	{
		return null;
	}
}
enum DatabaseEvents
{
	Abort,
	Error,
	Versionchange
}
class Factory extends NObject
{
	constructor()
	{
		super();
	}
	Cmp(first: any, second: any): number
	{
		return 0;
	}
	DeleteDatabase(name: string): OpenDBRequest;
	DeleteDatabase(name: string, options: OpenDBOptions): OpenDBRequest;
	DeleteDatabase(name: string, options?: OpenDBOptions): OpenDBRequest
	{
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			return this.DeleteDatabase_0(name);
		}
		return this.DeleteDatabase_1(name, options);
	}
	private DeleteDatabase_0(name: string): OpenDBRequest
	{
		return null;
	}
	private DeleteDatabase_1(name: string, options: OpenDBOptions): OpenDBRequest
	{
		return null;
	}
	Open(name: string): OpenDBRequest;
	Open(name: string, options: OpenDBOptions): OpenDBRequest;
	Open(name: string, version: number): OpenDBRequest;
	Open(name: string, optionsOrVersion?: any): OpenDBRequest
	{
		if (arguments.length === 1 && (name === null || name.constructor === String))
		{
			return this.Open_0(name);
		}
		if (arguments.length === 2 && (name === null || name.constructor === String) && (optionsOrVersion === null || optionsOrVersion instanceof OpenDBOptions))
		{
			return this.Open_1(name, optionsOrVersion);
		}
		return this.Open_2(name, optionsOrVersion);
	}
	private Open_0(name: string): OpenDBRequest
	{
		return null;
	}
	private Open_1(name: string, options: OpenDBOptions): OpenDBRequest
	{
		return null;
	}
	private Open_2(name: string, version: number): OpenDBRequest
	{
		return null;
	}
}
class Index extends NObject
{
	get KeyPath(): any
	{
		return null;
	}
	get MultiEntry(): boolean
	{
		return false;
	}
	get Name(): string
	{
		return null;
	}
	get ObjectStore(): ObjectStore
	{
		return null;
	}
	get StoreName(): string
	{
		return null;
	}
	get Unique(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	Count(key: any): Request
	{
		return null;
	}
	Get(key: any): Request
	{
		return null;
	}
	GetKey(key: any): Request
	{
		return null;
	}
	OpenCursor(range: any): Request;
	OpenCursor(range: any, direction: CursorDirection): Request;
	OpenCursor(range: any, direction?: CursorDirection): Request
	{
		if (arguments.length === 1 && (range === null || range.constructor === Object))
		{
			return this.OpenCursor_0(range);
		}
		return this.OpenCursor_1(range, direction);
	}
	private OpenCursor_0(range: any): Request
	{
		return null;
	}
	private OpenCursor_1(range: any, direction: CursorDirection): Request
	{
		return null;
	}
	OpenKeyCursor(range: any): Request;
	OpenKeyCursor(range: any, direction: CursorDirection): Request;
	OpenKeyCursor(range: any, direction?: CursorDirection): Request
	{
		if (arguments.length === 1 && (range === null || range.constructor === Object))
		{
			return this.OpenKeyCursor_0(range);
		}
		return this.OpenKeyCursor_1(range, direction);
	}
	private OpenKeyCursor_0(range: any): Request
	{
		return null;
	}
	private OpenKeyCursor_1(range: any, direction: CursorDirection): Request
	{
		return null;
	}
}
class IndexParameters extends NObject
{
	MultiEntry: boolean = false;
	Unique: boolean = false;
	constructor()
	{
		super();
	}
}
class KeyRange extends NObject
{
	get Lower(): any
	{
		return null;
	}
	get LowerOpen(): boolean
	{
		return false;
	}
	get Upper(): any
	{
		return null;
	}
	get UpperOpen(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	static Bound(lower: any, upper: any): KeyRange;
	static Bound(lower: any, upper: any, lowerOpen: boolean): KeyRange;
	static Bound(lower: any, upper: any, lowerOpen: boolean, upperOpen: boolean): KeyRange;
	static Bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): KeyRange
	{
		if (arguments.length === 2 && (lower === null || lower.constructor === Object) && (upper === null || upper.constructor === Object))
		{
			return KeyRange.Bound_0(lower, upper);
		}
		if (arguments.length === 3 && (lower === null || lower.constructor === Object) && (upper === null || upper.constructor === Object) && (lowerOpen === null || lowerOpen.constructor === Boolean))
		{
			return KeyRange.Bound_1(lower, upper, lowerOpen);
		}
		return KeyRange.Bound_2(lower, upper, lowerOpen, upperOpen);
	}
	private static Bound_0(lower: any, upper: any): KeyRange
	{
		return null;
	}
	private static Bound_1(lower: any, upper: any, lowerOpen: boolean): KeyRange
	{
		return null;
	}
	private static Bound_2(lower: any, upper: any, lowerOpen: boolean, upperOpen: boolean): KeyRange
	{
		return null;
	}
	static LowerBound(lower: any): KeyRange;
	static LowerBound(lower: any, open: boolean): KeyRange;
	static LowerBound(lower: any, open?: boolean): KeyRange
	{
		if (arguments.length === 1 && (lower === null || lower.constructor === Object))
		{
			return KeyRange.LowerBound_0(lower);
		}
		return KeyRange.LowerBound_1(lower, open);
	}
	private static LowerBound_0(lower: any): KeyRange
	{
		return null;
	}
	private static LowerBound_1(lower: any, open: boolean): KeyRange
	{
		return null;
	}
	static OnLy(value: any): KeyRange
	{
		return null;
	}
	static UpperBound(upper: any): KeyRange;
	static UpperBound(upper: any, open: boolean): KeyRange;
	static UpperBound(upper: any, open?: boolean): KeyRange
	{
		if (arguments.length === 1 && (upper === null || upper.constructor === Object))
		{
			return KeyRange.UpperBound_0(upper);
		}
		return KeyRange.UpperBound_1(upper, open);
	}
	private static UpperBound_0(upper: any): KeyRange
	{
		return null;
	}
	private static UpperBound_1(upper: any, open: boolean): KeyRange
	{
		return null;
	}
}
class ObjectStore extends NObject
{
	get AutoIncrement(): boolean
	{
		return false;
	}
	get IndexNames(): DOMStringList
	{
		return null;
	}
	get KeyPath(): any
	{
		return null;
	}
	get Name(): string
	{
		return null;
	}
	get Transaction(): Transaction
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Add(value: any, key: any): Request
	{
		return null;
	}
	Clear(): Request
	{
		return null;
	}
	Count(key: any): Request
	{
		return null;
	}
	CreateIndex(name: string, keyPath: string): Index;
	CreateIndex(name: string, keyPath: string, optionalParameters: IndexParameters): Index;
	CreateIndex(name: string, keyPath: string[]): Index;
	CreateIndex(name: string, keyPath: string[], optionalParameters: IndexParameters): Index;
	CreateIndex(name: string, keyPath: any, optionalParameters?: IndexParameters): Index
	{
		if (arguments.length === 2 && (name === null || name.constructor === String) && (keyPath === null || keyPath.constructor === String))
		{
			return this.CreateIndex_0(name, keyPath);
		}
		if (arguments.length === 3 && (name === null || name.constructor === String) && (keyPath === null || keyPath.constructor === String) && (optionalParameters === null || optionalParameters instanceof IndexParameters))
		{
			return this.CreateIndex_1(name, keyPath, optionalParameters);
		}
		if (arguments.length === 2 && (name === null || name.constructor === String) && (keyPath === null || keyPath instanceof Array))
		{
			return this.CreateIndex_2(name, keyPath);
		}
		return this.CreateIndex_3(name, keyPath, optionalParameters);
	}
	private CreateIndex_0(name: string, keyPath: string): Index
	{
		return null;
	}
	private CreateIndex_1(name: string, keyPath: string, optionalParameters: IndexParameters): Index
	{
		return null;
	}
	private CreateIndex_2(name: string, keyPath: string[]): Index
	{
		return null;
	}
	private CreateIndex_3(name: string, keyPath: string[], optionalParameters: IndexParameters): Index
	{
		return null;
	}
	Delete(key: any): Request
	{
		return null;
	}
	DeleteIndex(indexName: string): void
	{
	}
	Get(key: any): Request
	{
		return null;
	}
	GetAll(key: any): Request;
	GetAll(key: any, limit: number): Request;
	GetAll(key: any, limit?: number): Request
	{
		if (arguments.length === 1 && (key === null || key.constructor === Object))
		{
			return this.GetAll_0(key);
		}
		return this.GetAll_1(key, limit);
	}
	private GetAll_0(key: any): Request
	{
		return null;
	}
	private GetAll_1(key: any, limit: number): Request
	{
		return null;
	}
	GetAllKeys(key: any): Request;
	GetAllKeys(key: any, limit: number): Request;
	GetAllKeys(key: any, limit?: number): Request
	{
		if (arguments.length === 1 && (key === null || key.constructor === Object))
		{
			return this.GetAllKeys_0(key);
		}
		return this.GetAllKeys_1(key, limit);
	}
	private GetAllKeys_0(key: any): Request
	{
		return null;
	}
	private GetAllKeys_1(key: any, limit: number): Request
	{
		return null;
	}
	Index(name: string): Index
	{
		return null;
	}
	OpenCursor(range: any): Request;
	OpenCursor(range: any, direction: CursorDirection): Request;
	OpenCursor(range: any, direction?: CursorDirection): Request
	{
		if (arguments.length === 1 && (range === null || range.constructor === Object))
		{
			return this.OpenCursor_0(range);
		}
		return this.OpenCursor_1(range, direction);
	}
	private OpenCursor_0(range: any): Request
	{
		return null;
	}
	private OpenCursor_1(range: any, direction: CursorDirection): Request
	{
		return null;
	}
	OpenKeyCursor(range: any): Request;
	OpenKeyCursor(range: any, direction: CursorDirection): Request;
	OpenKeyCursor(range: any, direction?: CursorDirection): Request
	{
		if (arguments.length === 1 && (range === null || range.constructor === Object))
		{
			return this.OpenKeyCursor_0(range);
		}
		return this.OpenKeyCursor_1(range, direction);
	}
	private OpenKeyCursor_0(range: any): Request
	{
		return null;
	}
	private OpenKeyCursor_1(range: any, direction: CursorDirection): Request
	{
		return null;
	}
	Put(value: any, key: any): Request
	{
		return null;
	}
}
class ObjectStoreParameters extends NObject
{
	AutoIncrement: boolean = false;
	KeyPath: any = null;
	constructor()
	{
		super();
	}
}
class OpenDBOptions extends NObject
{
	Storage: StorageType = 0;
	Version: number = 0;
	constructor()
	{
		super();
	}
}
class Request extends EventTarget
{
	get Error(): DOMError
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnSuccess(value: (event: Event) => void)
	{
	}
	get OnSuccess(): (event: Event) => void
	{
		return null;
	}
	get ReadyState(): RequestReadyState
	{
		return RequestReadyState.Pending;
	}
	get Result(): any
	{
		return null;
	}
	get Source(): TypeOption<ObjectStore, Index, Cursor>
	{
		return null;
	}
	get Transaction(): Transaction
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: RequestEvents, listener: () => void): void;
	AddEventListener(type: RequestEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: RequestEvents, listener: (event: Event) => void): void;
	AddEventListener(type: RequestEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: RequestEvents, listener: (target: Request, event: Event) => void): void;
	AddEventListener(type: RequestEvents, listener: (target: Request, event: Event) => void, capture: boolean): void;
	AddEventListener(type: RequestEvents, listener: IEventListener): void;
	AddEventListener(type: RequestEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: Request, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: Request, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: RequestEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: RequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: RequestEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: RequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: RequestEvents, listener: (target: Request, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: RequestEvents, listener: (target: Request, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: RequestEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: RequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: Request, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: Request, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: RequestEvents, listener: () => void): void;
	RemoveEventListener(type: RequestEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: RequestEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: RequestEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RequestEvents, listener: (target: Request, event: Event) => void): void;
	RemoveEventListener(type: RequestEvents, listener: (target: Request, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RequestEvents, listener: IEventListener): void;
	RemoveEventListener(type: RequestEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: Request, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: Request, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: RequestEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: RequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: RequestEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: RequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: RequestEvents, listener: (target: Request, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: RequestEvents, listener: (target: Request, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: RequestEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: RequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: Request, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: Request, event: Event) => void, capture: boolean): void
	{
	}
}
class OpenDBRequest extends Request
{
	set OnBlocked(value: (event: Event) => void)
	{
	}
	get OnBlocked(): (event: Event) => void
	{
		return null;
	}
	set OnUpgradeneeded(value: (event: Event) => void)
	{
	}
	get OnUpgradeneeded(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: OpenDBRequestEvents, listener: () => void): void;
	AddEventListener(type: OpenDBRequestEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OpenDBRequestEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OpenDBRequestEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void): void;
	AddEventListener(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OpenDBRequestEvents, listener: IEventListener): void;
	AddEventListener(type: OpenDBRequestEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OpenDBRequest, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OpenDBRequestEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OpenDBRequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OpenDBRequestEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OpenDBRequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OpenDBRequestEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OpenDBRequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OpenDBRequest, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: OpenDBRequestEvents, listener: () => void): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: IEventListener): void;
	RemoveEventListener(type: OpenDBRequestEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OpenDBRequest, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OpenDBRequestEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OpenDBRequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OpenDBRequestEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OpenDBRequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OpenDBRequestEvents, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OpenDBRequestEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OpenDBRequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OpenDBRequest, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OpenDBRequest, event: Event) => void, capture: boolean): void
	{
	}
}
enum OpenDBRequestEvents
{
	Blocked,
	Error,
	Success,
	Upgradeneeded
}
enum RequestEvents
{
	Error,
	Success
}
enum RequestReadyState
{
	Pending,
	Done
}
enum StorageType
{
	Persistent,
	Temporary
}
class Transaction extends EventTarget
{
	get Db(): Database
	{
		return null;
	}
	get Error(): DOMError
	{
		return null;
	}
	get Mode(): TransactionMode
	{
		return TransactionMode.Readonly;
	}
	get ObjectStoreNames(): DOMStringList
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnComplete(value: (event: Event) => void)
	{
	}
	get OnComplete(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Abort(): void
	{
	}
	new AddEventListener(type: string, listener: (target: Transaction, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: Transaction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TransactionEvents, listener: () => void): void;
	new AddEventListener(type: TransactionEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TransactionEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TransactionEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TransactionEvents, listener: (target: Transaction, event: Event) => void): void;
	new AddEventListener(type: TransactionEvents, listener: (target: Transaction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TransactionEvents, listener: IEventListener): void;
	new AddEventListener(type: TransactionEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: Transaction, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: Transaction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TransactionEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TransactionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TransactionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TransactionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TransactionEvents, listener: (target: Transaction, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TransactionEvents, listener: (target: Transaction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TransactionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TransactionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ObjectStore(name: string): ObjectStore
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: Transaction, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: Transaction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TransactionEvents, listener: () => void): void;
	new RemoveEventListener(type: TransactionEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TransactionEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TransactionEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TransactionEvents, listener: (target: Transaction, event: Event) => void): void;
	new RemoveEventListener(type: TransactionEvents, listener: (target: Transaction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TransactionEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TransactionEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: Transaction, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: Transaction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TransactionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TransactionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TransactionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TransactionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TransactionEvents, listener: (target: Transaction, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TransactionEvents, listener: (target: Transaction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TransactionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TransactionEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TransactionEvents
{
	Abort,
	Complete,
	Error
}
enum TransactionMode
{
	Readonly,
	Readwrite,
	Versionchange
}
class VersionChangeEvent extends Event
{
	get NewVersion(): Nullable<number>
	{
		return null;
	}
	get OldVersion(): number
	{
		return 0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: VersionChangeEventInit);
	constructor(type?: string, eventInitDict?: VersionChangeEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: VersionChangeEventInit): void
	{
	}
}
class VersionChangeEventInit extends EventInit
{
	NewVersion: Nullable<number> = null;
	OldVersion: number = 0;
	constructor()
	{
		super();
	}
}
class ApplicationCache extends EventTarget
{
	static CHECKING: number = 2;
	static DOWNLOADING: number = 3;
	static IDLE: number = 1;
	static OBSOLETE: number = 5;
	static UNCACHED: number = 0;
	static UPDATEREADY: number = 4;
	set OnCached(value: (event: Event) => void)
	{
	}
	get OnCached(): (event: Event) => void
	{
		return null;
	}
	set OnChecking(value: (event: Event) => void)
	{
	}
	get OnChecking(): (event: Event) => void
	{
		return null;
	}
	set OnDownloading(value: (event: Event) => void)
	{
	}
	get OnDownloading(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnNoupdate(value: (event: Event) => void)
	{
	}
	get OnNoupdate(): (event: Event) => void
	{
		return null;
	}
	set OnObsolete(value: (event: Event) => void)
	{
	}
	get OnObsolete(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnUpdateready(value: (event: Event) => void)
	{
	}
	get OnUpdateready(): (event: Event) => void
	{
		return null;
	}
	get Status(): ApplicationCacheStatus
	{
		return ApplicationCacheStatus.Uncached;
	}
	constructor()
	{
		super();
	}
	Abort(): void
	{
	}
	AddEventListener(type: ApplicationCacheEvents, listener: () => void): void;
	AddEventListener(type: ApplicationCacheEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ApplicationCacheEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ApplicationCacheEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void): void;
	AddEventListener(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ApplicationCacheEvents, listener: IEventListener): void;
	AddEventListener(type: ApplicationCacheEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ApplicationCache, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ApplicationCacheEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ApplicationCacheEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ApplicationCacheEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ApplicationCacheEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ApplicationCacheEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ApplicationCacheEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ApplicationCache, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ApplicationCacheEvents, listener: () => void): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: IEventListener): void;
	RemoveEventListener(type: ApplicationCacheEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ApplicationCache, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ApplicationCacheEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ApplicationCacheEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ApplicationCacheEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ApplicationCacheEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ApplicationCacheEvents, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ApplicationCacheEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ApplicationCacheEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ApplicationCache, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ApplicationCache, event: Event) => void, capture: boolean): void
	{
	}
	SwapCache(): void
	{
	}
	Update(): void
	{
	}
}
enum ApplicationCacheEvents
{
	Cached,
	Checking,
	Downloading,
	Error,
	Noupdate,
	Obsolete,
	Progress,
	Updateready
}
enum ApplicationCacheStatus
{
	Checking = 2,
	Downloading,
	Idle = 1,
	Obsolete = 5,
	Uncached = 0,
	Updateready = 4
}
class Storage extends NObject
{
	get_Item(key: string): string
	{
		return null;
	}
	set_Item(key: string, value: string): void
	{
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Clear(): void
	{
	}
	GetItem(key: string): string
	{
		return null;
	}
	Key(index: number): string
	{
		return null;
	}
	RemoveItem(key: string): void
	{
	}
	SetItem(key: string, value: string): void
	{
	}
}
class StorageEvent extends Event
{
	get Key(): string
	{
		return null;
	}
	get NewValue(): string
	{
		return null;
	}
	get OldValue(): string
	{
		return null;
	}
	get StorageArea(): Storage
	{
		return null;
	}
	get Url(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: StorageEventInit);
	constructor(type?: string, eventInitDict?: StorageEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: StorageEventInit): void
	{
	}
	InitStorageEvent(type: string, canBubble: boolean, cancelable: boolean, key: string, oldValue: string, newValue: string, url: string, storageArea: Storage): void
	{
	}
}
class StorageEventInit extends EventInit
{
	Key: string = null;
	NewValue: string = null;
	OldValue: string = null;
	StorageArea: Storage = null;
	Url: string = null;
	constructor()
	{
		super();
	}
}
class Range extends NObject
{
	static END_TO_END: number = 2;
	static END_TO_START: number = 3;
	static START_TO_END: number = 1;
	static START_TO_START: number = 0;
	get Collapsed(): boolean
	{
		return false;
	}
	get CommonAncestorContainer(): XmlNode
	{
		return null;
	}
	get EndContainer(): XmlNode
	{
		return null;
	}
	get EndOffset(): number
	{
		return 0;
	}
	get StartContainer(): XmlNode
	{
		return null;
	}
	get StartOffset(): number
	{
		return 0;
	}
	CloneContents(): XmlDocumentFragment
	{
		return null;
	}
	CloneRange(): Range
	{
		return null;
	}
	Collapse(): void;
	Collapse(toStart: boolean): void;
	Collapse(toStart?: boolean): void
	{
		if (arguments.length === 0)
		{
			this.Collapse_0();
			return;
		}
		this.Collapse_1(toStart);
	}
	private Collapse_0(): void
	{
	}
	private Collapse_1(toStart: boolean): void
	{
	}
	CompareBoundaryPoints(how: RangeComparison, sourceRange: Range): number
	{
		return 0;
	}
	ComparePoint(node: XmlNode, offset: number): number
	{
		return 0;
	}
	CreateContextualFragment(fragment: string): XmlDocumentFragment
	{
		return null;
	}
	DeleteContents(): void
	{
	}
	Detach(): void
	{
	}
	ExtractContents(): XmlDocumentFragment
	{
		return null;
	}
	GetBoundingClientRect(): DOMRect
	{
		return null;
	}
	GetClientRects(): DOMRectList
	{
		return null;
	}
	InsertNode(node: XmlNode): void
	{
	}
	IntersectsNode(node: XmlNode): boolean
	{
		return false;
	}
	IsPointInRange(node: XmlNode, offset: number): boolean
	{
		return false;
	}
	SelectNode(refNode: XmlNode): void
	{
	}
	SelectNodeContents(refNode: XmlNode): void
	{
	}
	SetEnd(refNode: XmlNode, offset: number): void
	{
	}
	SetEndAfter(refNode: XmlNode): void
	{
	}
	SetEndBefore(refNode: XmlNode): void
	{
	}
	SetStart(refNode: XmlNode, offset: number): void
	{
	}
	SetStartAfter(refNode: XmlNode): void
	{
	}
	SetStartBefore(refNode: XmlNode): void
	{
	}
	SurroundContents(newParent: XmlNode): void
	{
	}
	constructor()
	{
		super();
	}
}
enum RangeComparison
{
	EndToEnd = 2,
	EndToStart,
	StartToEnd = 1,
	StartToStart = 0
}
class Selection extends NObject
{
	get AnchorNode(): XmlNode
	{
		return null;
	}
	get AnchorOffset(): number
	{
		return 0;
	}
	get FocusNode(): XmlNode
	{
		return null;
	}
	get FocusOffset(): number
	{
		return 0;
	}
	get IsCollapsed(): boolean
	{
		return false;
	}
	get RangeCount(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddRange(range: Range): void
	{
	}
	Collapse(node: XmlNode, offset: number): void
	{
	}
	CollapseToEnd(): void
	{
	}
	CollapseToStart(): void
	{
	}
	ContainsNode(node: XmlNode, partlyContained: boolean): boolean
	{
		return false;
	}
	DeleteFromDocument(): void
	{
	}
	Extend(node: XmlNode, offset: number): void
	{
	}
	GetRangeAt(index: number): Range
	{
		return null;
	}
	Modify(alter: string, direction: string, granularity: string): void
	{
	}
	RemoveAllRanges(): void
	{
	}
	RemoveRange(range: Range): void
	{
	}
	SelectAllChildren(node: XmlNode): void
	{
	}
}
class Coordinates extends NObject
{
	get Accuracy(): number
	{
		return 0.0;
	}
	get Altitude(): Nullable<number>
	{
		return null;
	}
	get AltitudeAccuracy(): Nullable<number>
	{
		return null;
	}
	get Heading(): Nullable<number>
	{
		return null;
	}
	get Latitude(): number
	{
		return 0.0;
	}
	get Longitude(): number
	{
		return 0.0;
	}
	get Speed(): Nullable<number>
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class GeolocationService extends NObject
{
	constructor()
	{
		super();
	}
	ClearWatch(watchId: number): void
	{
	}
	GetCurrentPosition(successCallback: (position: Position) => void): void;
	GetCurrentPosition(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void): void;
	GetCurrentPosition(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void, options: PositionOptions): void;
	GetCurrentPosition(successCallback: (position: Position) => void, errorCallback?: (positionError: PositionError) => void, options?: PositionOptions): void
	{
		if (arguments.length === 1)
		{
			this.GetCurrentPosition_0(successCallback);
			return;
		}
		if (arguments.length === 2)
		{
			this.GetCurrentPosition_1(successCallback, errorCallback);
			return;
		}
		this.GetCurrentPosition_2(successCallback, errorCallback, options);
	}
	private GetCurrentPosition_0(successCallback: (position: Position) => void): void
	{
	}
	private GetCurrentPosition_1(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void): void
	{
	}
	private GetCurrentPosition_2(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void, options: PositionOptions): void
	{
	}
	WatchPosition(successCallback: (position: Position) => void): number;
	WatchPosition(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void): number;
	WatchPosition(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void, options: PositionOptions): number;
	WatchPosition(successCallback: (position: Position) => void, errorCallback?: (positionError: PositionError) => void, options?: PositionOptions): number
	{
		if (arguments.length === 1)
		{
			return this.WatchPosition_0(successCallback);
		}
		if (arguments.length === 2)
		{
			return this.WatchPosition_1(successCallback, errorCallback);
		}
		return this.WatchPosition_2(successCallback, errorCallback, options);
	}
	private WatchPosition_0(successCallback: (position: Position) => void): number
	{
		return 0;
	}
	private WatchPosition_1(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void): number
	{
		return 0;
	}
	private WatchPosition_2(successCallback: (position: Position) => void, errorCallback: (positionError: PositionError) => void, options: PositionOptions): number
	{
		return 0;
	}
}
class Position extends NObject
{
	get Coords(): Coordinates
	{
		return null;
	}
	get Timestamp(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class PositionError extends NObject
{
	get Code(): number
	{
		return 0;
	}
	get Message(): string
	{
		return null;
	}
	get PERMISSION_DENIED(): number
	{
		return 0;
	}
	get POSITION_UNAVAILABLE(): number
	{
		return 0;
	}
	get TIMEOUT(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class PositionOptions extends NObject
{
	EnableHighAccuracy: boolean = false;
	MaximumAge: number = 0;
	Timeout: number = 0;
	constructor()
	{
		super();
	}
}
enum AlignSetting
{
	Start,
	Middle,
	End,
	Left,
	Right
}
enum AutoKeyword
{
	Auto
}
enum DirectionSetting
{
	None,
	Rl,
	Lr
}
class MediaStream extends NObject
{
	get CurrentTime(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	GetAudioTracks(): AudioStreamTrack[]
	{
		return null;
	}
	GetVideoTracks(): VideoStreamTrack[]
	{
		return null;
	}
}
class LocalMediaStream extends MediaStream
{
	constructor()
	{
		super();
	}
	Stop(): void
	{
	}
}
enum MediaElementNetworkState
{
	Empty,
	Idle,
	Loading,
	NoSource
}
enum MediaElementReadyState
{
	HaveCurrentData = 2,
	HaveEnoughData = 4,
	HaveFutureData = 3,
	HaveMetadata = 1,
	HaveNothing = 0
}
class MediaError extends NObject
{
	static MEDIA_ERR_ABORTED: number = 1;
	static MEDIA_ERR_DECODE: number = 3;
	static MEDIA_ERR_NETWORK: number = 2;
	static MEDIA_ERR_SRC_NOT_SUPPORTED: number = 4;
	get Code(): MediaErrorCode
	{
		return <MediaErrorCode>0;
	}
	constructor()
	{
		super();
	}
}
enum MediaErrorCode
{
	Aborted = 1,
	Decode = 3,
	Network = 2,
	SrcNotSupported = 4
}
class MediaStreamConstraints extends NObject
{
	Audio: TypeOption<boolean, any> = null;
	Fake: boolean = false;
	Picture: boolean = false;
	Video: TypeOption<boolean, any> = null;
	constructor()
	{
		super();
	}
}
class MediaStreamEvent extends Event
{
	get Stream(): MediaStream
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: MediaStreamEventInit);
	constructor(type?: string, eventInitDict?: MediaStreamEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: MediaStreamEventInit): void
	{
	}
}
class MediaStreamEventInit extends EventInit
{
	Stream: MediaStream = null;
	constructor()
	{
		super();
	}
}
class MediaTrackConstraints extends NObject
{
	Mandatory: any = null;
	Optional: MediaTrackConstraintSet[] = null;
	constructor()
	{
		super();
	}
}
class MediaTrackConstraintSet extends NObject
{
	FacingMode: VideoFacingModeEnum = 0;
	constructor()
	{
		super();
	}
}
class TextTrack extends EventTarget
{
	get ActiveCues(): TextTrackCueList
	{
		return null;
	}
	get Cues(): TextTrackCueList
	{
		return null;
	}
	get Id(): string
	{
		return null;
	}
	get InBandMetadataTrackDispatchType(): string
	{
		return null;
	}
	get Kind(): TextTrackKind
	{
		return TextTrackKind.Subtitles;
	}
	get Label(): string
	{
		return null;
	}
	get Language(): string
	{
		return null;
	}
	set Mode(value: TextTrackMode)
	{
	}
	get Mode(): TextTrackMode
	{
		return TextTrackMode.Disabled;
	}
	set OnCuechange(value: (event: Event) => void)
	{
	}
	get OnCuechange(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddCue(cue: VTTCue): void
	{
	}
	new AddEventListener(type: string, listener: (target: TextTrack, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TextTrack, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackEvents, listener: () => void): void;
	new AddEventListener(type: TextTrackEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TextTrackEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TextTrackEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void): void;
	new AddEventListener(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackEvents, listener: IEventListener): void;
	new AddEventListener(type: TextTrackEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TextTrack, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TextTrack, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TextTrackEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TextTrackEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TextTrackEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TextTrackEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TextTrackEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TextTrackEvents, listener: IEventListener, capture: boolean): void
	{
	}
	RemoveCue(cue: VTTCue): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: TextTrack, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TextTrack, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackEvents, listener: () => void): void;
	new RemoveEventListener(type: TextTrackEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TextTrackEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void): void;
	new RemoveEventListener(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TextTrackEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TextTrack, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TextTrack, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TextTrackEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TextTrackEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TextTrackEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TextTrackEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TextTrackEvents, listener: (target: TextTrack, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TextTrackEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TextTrackEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class TextTrackCueList extends NObject
{
	get_Item(index: number): VTTCue
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetCueById(id: string): VTTCue
	{
		return null;
	}
	GetEnumerator(): IEnumerator<VTTCue>
	{
		return null;
	}
}
enum TextTrackEvents
{
	Cuechange
}
enum TextTrackKind
{
	Subtitles,
	Captions,
	Descriptions,
	Chapters,
	Metadata
}
class TextTrackList extends EventTarget
{
	get_Item(index: number): TextTrack
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	set OnAddtrack(value: (event: Event) => void)
	{
	}
	get OnAddtrack(): (event: Event) => void
	{
		return null;
	}
	set OnChange(value: (event: Event) => void)
	{
	}
	get OnChange(): (event: Event) => void
	{
		return null;
	}
	set OnRemovetrack(value: (event: Event) => void)
	{
	}
	get OnRemovetrack(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: TextTrackList, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackListEvents, listener: () => void): void;
	new AddEventListener(type: TextTrackListEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: TextTrackListEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: TextTrackListEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void): void;
	new AddEventListener(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: TextTrackListEvents, listener: IEventListener): void;
	new AddEventListener(type: TextTrackListEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: TextTrackList, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: TextTrackListEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: TextTrackListEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: TextTrackListEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: TextTrackListEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: TextTrackListEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: TextTrackListEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetEnumerator(): IEnumerator<TextTrack>
	{
		return null;
	}
	GetTrackById(id: string): TextTrack
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: TextTrackList, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: () => void): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: IEventListener): void;
	new RemoveEventListener(type: TextTrackListEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: TextTrackList, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: TextTrackListEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: TextTrackListEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: TextTrackListEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: TextTrackListEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: TextTrackListEvents, listener: (target: TextTrackList, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: TextTrackListEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: TextTrackListEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum TextTrackListEvents
{
	Addtrack,
	Change,
	Removetrack
}
enum TextTrackMode
{
	Disabled,
	Hidden,
	Showing
}
class TimeRanges extends NObject
{
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	End(index: number): number
	{
		return 0.0;
	}
	Start(index: number): number
	{
		return 0.0;
	}
}
class VTTCue extends EventTarget
{
	set Align(value: AlignSetting)
	{
	}
	get Align(): AlignSetting
	{
		return AlignSetting.Start;
	}
	set EndTime(value: number)
	{
	}
	get EndTime(): number
	{
		return 0.0;
	}
	set Id(value: string)
	{
	}
	get Id(): string
	{
		return null;
	}
	set Line(value: TypeOption<number, AutoKeyword>)
	{
	}
	get Line(): TypeOption<number, AutoKeyword>
	{
		return null;
	}
	set LineAlign(value: AlignSetting)
	{
	}
	get LineAlign(): AlignSetting
	{
		return AlignSetting.Start;
	}
	set OnEnter(value: (event: Event) => void)
	{
	}
	get OnEnter(): (event: Event) => void
	{
		return null;
	}
	set OnExit(value: (event: Event) => void)
	{
	}
	get OnExit(): (event: Event) => void
	{
		return null;
	}
	set PauseOnExit(value: boolean)
	{
	}
	get PauseOnExit(): boolean
	{
		return false;
	}
	set Position(value: number)
	{
	}
	get Position(): number
	{
		return 0;
	}
	set PositionAlign(value: AlignSetting)
	{
	}
	get PositionAlign(): AlignSetting
	{
		return AlignSetting.Start;
	}
	set Region(value: VTTRegion)
	{
	}
	get Region(): VTTRegion
	{
		return null;
	}
	set Size(value: number)
	{
	}
	get Size(): number
	{
		return 0;
	}
	set SnapToLines(value: boolean)
	{
	}
	get SnapToLines(): boolean
	{
		return false;
	}
	set StartTime(value: number)
	{
	}
	get StartTime(): number
	{
		return 0.0;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	get Track(): TextTrack
	{
		return null;
	}
	set Vertical(value: DirectionSetting)
	{
	}
	get Vertical(): DirectionSetting
	{
		return DirectionSetting.None;
	}
	constructor();
	constructor(startTime: number, endTime: number, text: string);
	constructor(startTime?: number, endTime?: number, text?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(startTime, endTime, text);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(startTime: number, endTime: number, text: string): void
	{
	}
	new AddEventListener(type: string, listener: (target: VTTCue, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: VTTCue, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VTTCueEvents, listener: () => void): void;
	new AddEventListener(type: VTTCueEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: VTTCueEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: VTTCueEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void): void;
	new AddEventListener(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: VTTCueEvents, listener: IEventListener): void;
	new AddEventListener(type: VTTCueEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: VTTCue, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: VTTCue, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: VTTCueEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: VTTCueEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: VTTCueEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: VTTCueEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: VTTCueEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: VTTCueEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetCueAsHTML(): XmlDocumentFragment
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: VTTCue, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: VTTCue, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VTTCueEvents, listener: () => void): void;
	new RemoveEventListener(type: VTTCueEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: VTTCueEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: VTTCueEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void): void;
	new RemoveEventListener(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: VTTCueEvents, listener: IEventListener): void;
	new RemoveEventListener(type: VTTCueEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: VTTCue, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: VTTCue, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: VTTCueEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: VTTCueEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: VTTCueEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: VTTCueEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: VTTCueEvents, listener: (target: VTTCue, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: VTTCueEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: VTTCueEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum VTTCueEvents
{
	Enter,
	Exit
}
class VTTRegion extends NObject
{
	set Lines(value: number)
	{
	}
	get Lines(): number
	{
		return 0;
	}
	set RegionAnchorX(value: number)
	{
	}
	get RegionAnchorX(): number
	{
		return 0.0;
	}
	set RegionAnchorY(value: number)
	{
	}
	get RegionAnchorY(): number
	{
		return 0.0;
	}
	set Scroll(value: string)
	{
	}
	get Scroll(): string
	{
		return null;
	}
	set ViewportAnchorX(value: number)
	{
	}
	get ViewportAnchorX(): number
	{
		return 0.0;
	}
	set ViewportAnchorY(value: number)
	{
	}
	get ViewportAnchorY(): number
	{
		return 0.0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class MediaStreamOptions extends NObject
{
	set Audio(value: boolean)
	{
	}
	get Audio(): boolean
	{
		return false;
	}
	set Video(value: boolean)
	{
	}
	get Video(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
}
class TextTrackCue extends NObject
{
	Line: TypeOption<number, AutoKeyword> = null;
	constructor()
	{
		super();
	}
}
enum MediaCrossOriginPolicy
{
	Anonymous,
	UseCredentials
}
enum MediaPlayability
{
	Probably,
	Maybe,
	No
}
enum MediaPreload
{
	None,
	Metadata,
	Auto
}
class AudioNode extends EventTarget
{
	set ChannelCount(value: number)
	{
	}
	get ChannelCount(): number
	{
		return 0;
	}
	set ChannelCountMode(value: ChannelCountMode)
	{
	}
	get ChannelCountMode(): ChannelCountMode
	{
		return ChannelCountMode.Max;
	}
	set ChannelInterpretation(value: ChannelInterpretation)
	{
	}
	get ChannelInterpretation(): ChannelInterpretation
	{
		return ChannelInterpretation.Speakers;
	}
	get Context(): AudioContext
	{
		return null;
	}
	get NumberOfInputs(): number
	{
		return 0;
	}
	get NumberOfOutputs(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AudioNodeEvents, listener: () => void): void;
	AddEventListener(type: AudioNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void): void;
	AddEventListener(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioNodeEvents, listener: IEventListener): void;
	AddEventListener(type: AudioNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioNode, event: Event) => void, capture: boolean): void
	{
	}
	Connect(destination: AudioNode): void;
	Connect(destination: AudioNode, output: number): void;
	Connect(destination: AudioNode, output: number, input: number): void;
	Connect(destination: AudioParam): void;
	Connect(destination: AudioParam, output: number): void;
	Connect(destination: any, output?: number, input?: number): void
	{
		if (arguments.length === 1 && (destination === null || destination instanceof AudioNode))
		{
			this.Connect_0(destination);
			return;
		}
		if (arguments.length === 2 && (destination === null || destination instanceof AudioNode) && (output === null || output.constructor === Number))
		{
			this.Connect_1(destination, output);
			return;
		}
		if (arguments.length === 3 && (destination === null || destination instanceof AudioNode) && (output === null || output.constructor === Number) && (input === null || input.constructor === Number))
		{
			this.Connect_2(destination, output, input);
			return;
		}
		if (arguments.length === 1 && (destination === null || destination instanceof AudioParam))
		{
			this.Connect_3(destination);
			return;
		}
		this.Connect_4(destination, output);
	}
	private Connect_0(destination: AudioNode): void
	{
	}
	private Connect_1(destination: AudioNode, output: number): void
	{
	}
	private Connect_2(destination: AudioNode, output: number, input: number): void
	{
	}
	private Connect_3(destination: AudioParam): void
	{
	}
	private Connect_4(destination: AudioParam, output: number): void
	{
	}
	Disconnect(): void;
	Disconnect(output: number): void;
	Disconnect(output?: number): void
	{
		if (arguments.length === 0)
		{
			this.Disconnect_0();
			return;
		}
		this.Disconnect_1(output);
	}
	private Disconnect_0(): void
	{
	}
	private Disconnect_1(output: number): void
	{
	}
	RemoveEventListener(type: AudioNodeEvents, listener: () => void): void;
	RemoveEventListener(type: AudioNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void): void;
	RemoveEventListener(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioNodeEvents, listener: (target: AudioNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioNode, event: Event) => void, capture: boolean): void
	{
	}
}
class AnalyserNode extends AudioNode
{
	set FftSize(value: number)
	{
	}
	get FftSize(): number
	{
		return 0;
	}
	get FrequencyBinCount(): number
	{
		return 0;
	}
	set MaxDecibels(value: number)
	{
	}
	get MaxDecibels(): number
	{
		return 0.0;
	}
	set MinDecibels(value: number)
	{
	}
	get MinDecibels(): number
	{
		return 0.0;
	}
	set SmoothingTimeConstant(value: number)
	{
	}
	get SmoothingTimeConstant(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AnalyserNodeEvents, listener: () => void): void;
	AddEventListener(type: AnalyserNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AnalyserNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AnalyserNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void): void;
	AddEventListener(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AnalyserNodeEvents, listener: IEventListener): void;
	AddEventListener(type: AnalyserNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AnalyserNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AnalyserNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AnalyserNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AnalyserNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AnalyserNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AnalyserNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AnalyserNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AnalyserNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void
	{
	}
	GetByteFrequencyData(array: Uint8Array): void
	{
	}
	GetByteTimeDomainData(array: Uint8Array): void
	{
	}
	GetFloatFrequencyData(array: Float32Array): void
	{
	}
	GetFloatTimeDomainData(array: Float32Array): void
	{
	}
	RemoveEventListener(type: AnalyserNodeEvents, listener: () => void): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: AnalyserNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AnalyserNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AnalyserNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AnalyserNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AnalyserNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AnalyserNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AnalyserNodeEvents, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AnalyserNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AnalyserNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AnalyserNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AnalyserNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum AnalyserNodeEvents
{

}
class AudioBuffer extends NObject
{
	get Duration(): number
	{
		return 0.0;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfChannels(): number
	{
		return 0;
	}
	get SampleRate(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	CopyFromChannel(destination: Float32Array, channelNumber: number): void;
	CopyFromChannel(destination: Float32Array, channelNumber: number, startInChannel: number): void;
	CopyFromChannel(destination: Float32Array, channelNumber: number, startInChannel?: number): void
	{
		if (arguments.length === 2 && (destination === null || destination instanceof Float32Array) && (channelNumber === null || channelNumber.constructor === Number))
		{
			this.CopyFromChannel_0(destination, channelNumber);
			return;
		}
		this.CopyFromChannel_1(destination, channelNumber, startInChannel);
	}
	private CopyFromChannel_0(destination: Float32Array, channelNumber: number): void
	{
	}
	private CopyFromChannel_1(destination: Float32Array, channelNumber: number, startInChannel: number): void
	{
	}
	CopyToChannel(source: Float32Array, channelNumber: number): void;
	CopyToChannel(source: Float32Array, channelNumber: number, startInChannel: number): void;
	CopyToChannel(source: Float32Array, channelNumber: number, startInChannel?: number): void
	{
		if (arguments.length === 2 && (source === null || source instanceof Float32Array) && (channelNumber === null || channelNumber.constructor === Number))
		{
			this.CopyToChannel_0(source, channelNumber);
			return;
		}
		this.CopyToChannel_1(source, channelNumber, startInChannel);
	}
	private CopyToChannel_0(source: Float32Array, channelNumber: number): void
	{
	}
	private CopyToChannel_1(source: Float32Array, channelNumber: number, startInChannel: number): void
	{
	}
	GetChannelData(channel: number): Float32Array
	{
		return null;
	}
}
class AudioBufferSourceNode extends AudioNode
{
	set Buffer(value: AudioBuffer)
	{
	}
	get Buffer(): AudioBuffer
	{
		return null;
	}
	set Loop(value: boolean)
	{
	}
	get Loop(): boolean
	{
		return false;
	}
	set LoopEnd(value: number)
	{
	}
	get LoopEnd(): number
	{
		return 0.0;
	}
	set LoopStart(value: number)
	{
	}
	get LoopStart(): number
	{
		return 0.0;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	get PlaybackRate(): AudioParam
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: () => void): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: IEventListener): void;
	AddEventListener(type: AudioBufferSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioBufferSourceNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioBufferSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioBufferSourceNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioBufferSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	NoteGrainOn(when: number, grainOffset: number, grainDuration: number): void
	{
	}
	NoteOff(when: number): void
	{
	}
	NoteOn(when: number): void
	{
	}
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: () => void): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioBufferSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioBufferSourceNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioBufferSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioBufferSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioBufferSourceNodeEvents, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioBufferSourceNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioBufferSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioBufferSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	Start(): void;
	Start(when: number): void;
	Start(when: number, grainOffset: number): void;
	Start(when: number, grainOffset: number, grainDuration: number): void;
	Start(when?: number, grainOffset?: number, grainDuration?: number): void
	{
		if (arguments.length === 0)
		{
			this.Start_0();
			return;
		}
		if (arguments.length === 1 && (when === null || when.constructor === Number))
		{
			this.Start_1(when);
			return;
		}
		if (arguments.length === 2 && (when === null || when.constructor === Number) && (grainOffset === null || grainOffset.constructor === Number))
		{
			this.Start_2(when, grainOffset);
			return;
		}
		this.Start_3(when, grainOffset, grainDuration);
	}
	private Start_0(): void
	{
	}
	private Start_1(when: number): void
	{
	}
	private Start_2(when: number, grainOffset: number): void
	{
	}
	private Start_3(when: number, grainOffset: number, grainDuration: number): void
	{
	}
	Stop(): void;
	Stop(when: number): void;
	Stop(when?: number): void
	{
		if (arguments.length === 0)
		{
			this.Stop_0();
			return;
		}
		this.Stop_1(when);
	}
	private Stop_0(): void
	{
	}
	private Stop_1(when: number): void
	{
	}
}
enum AudioBufferSourceNodeEvents
{
	Ended
}
class AudioChannelManager extends EventTarget
{
	get Headphones(): boolean
	{
		return false;
	}
	set OnHeadphoneschange(value: (event: Event) => void)
	{
	}
	get OnHeadphoneschange(): (event: Event) => void
	{
		return null;
	}
	set VolumeControlChannel(value: string)
	{
	}
	get VolumeControlChannel(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AudioChannelManagerEvents, listener: () => void): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: IEventListener): void;
	AddEventListener(type: AudioChannelManagerEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioChannelManager, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioChannelManagerEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioChannelManagerEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioChannelManagerEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioChannelManagerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioChannelManagerEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioChannelManagerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioChannelManager, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AudioChannelManagerEvents, listener: () => void): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioChannelManagerEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioChannelManager, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioChannelManagerEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioChannelManagerEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioChannelManagerEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioChannelManagerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioChannelManagerEvents, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioChannelManagerEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioChannelManagerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioChannelManager, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioChannelManager, event: Event) => void, capture: boolean): void
	{
	}
}
enum AudioChannelManagerEvents
{
	Headphoneschange
}
class AudioContext extends EventTarget
{
	get CurrentTime(): number
	{
		return 0.0;
	}
	get Destination(): AudioDestinationNode
	{
		return null;
	}
	get Listener(): AudioListener
	{
		return null;
	}
	get SampleRate(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AudioContextEvents, listener: () => void): void;
	AddEventListener(type: AudioContextEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioContextEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioContextEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void): void;
	AddEventListener(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioContextEvents, listener: IEventListener): void;
	AddEventListener(type: AudioContextEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioContext, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioContext, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioContextEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioContextEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioContextEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioContextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioContextEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioContextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioContext, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioContext, event: Event) => void, capture: boolean): void
	{
	}
	CreateAnalyser(): AnalyserNode
	{
		return null;
	}
	CreateBiquadFilter(): BiquadFilterNode
	{
		return null;
	}
	CreateBuffer(buffer: ArrayBuffer, mixToMono: boolean): AudioBuffer;
	CreateBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;
	CreateBuffer(bufferOrNumberOfChannels: any, mixToMonoOrLength: any, sampleRate?: number): AudioBuffer
	{
		if (arguments.length === 2 && (bufferOrNumberOfChannels === null || bufferOrNumberOfChannels instanceof ArrayBuffer) && (mixToMonoOrLength === null || mixToMonoOrLength.constructor === Boolean))
		{
			return this.CreateBuffer_0(bufferOrNumberOfChannels, mixToMonoOrLength);
		}
		return this.CreateBuffer_1(bufferOrNumberOfChannels, mixToMonoOrLength, sampleRate);
	}
	private CreateBuffer_0(buffer: ArrayBuffer, mixToMono: boolean): AudioBuffer
	{
		return null;
	}
	private CreateBuffer_1(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer
	{
		return null;
	}
	CreateBufferSource(): AudioBufferSourceNode
	{
		return null;
	}
	CreateChannelMerger(): ChannelMergerNode;
	CreateChannelMerger(numberOfInputs: number): ChannelMergerNode;
	CreateChannelMerger(numberOfInputs?: number): ChannelMergerNode
	{
		if (arguments.length === 0)
		{
			return this.CreateChannelMerger_0();
		}
		return this.CreateChannelMerger_1(numberOfInputs);
	}
	private CreateChannelMerger_0(): ChannelMergerNode
	{
		return null;
	}
	private CreateChannelMerger_1(numberOfInputs: number): ChannelMergerNode
	{
		return null;
	}
	CreateChannelSplitter(): ChannelSplitterNode;
	CreateChannelSplitter(numberOfOutputs: number): ChannelSplitterNode;
	CreateChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode
	{
		if (arguments.length === 0)
		{
			return this.CreateChannelSplitter_0();
		}
		return this.CreateChannelSplitter_1(numberOfOutputs);
	}
	private CreateChannelSplitter_0(): ChannelSplitterNode
	{
		return null;
	}
	private CreateChannelSplitter_1(numberOfOutputs: number): ChannelSplitterNode
	{
		return null;
	}
	CreateConvolver(): ConvolverNode
	{
		return null;
	}
	CreateDelay(): DelayNode;
	CreateDelay(maxDelayTime: number): DelayNode;
	CreateDelay(maxDelayTime?: number): DelayNode
	{
		if (arguments.length === 0)
		{
			return this.CreateDelay_0();
		}
		return this.CreateDelay_1(maxDelayTime);
	}
	private CreateDelay_0(): DelayNode
	{
		return null;
	}
	private CreateDelay_1(maxDelayTime: number): DelayNode
	{
		return null;
	}
	CreateDelayNode(): DelayNode;
	CreateDelayNode(maxDelayTime: number): DelayNode;
	CreateDelayNode(maxDelayTime?: number): DelayNode
	{
		if (arguments.length === 0)
		{
			return this.CreateDelayNode_0();
		}
		return this.CreateDelayNode_1(maxDelayTime);
	}
	private CreateDelayNode_0(): DelayNode
	{
		return null;
	}
	private CreateDelayNode_1(maxDelayTime: number): DelayNode
	{
		return null;
	}
	CreateDynamicsCompressor(): DynamicsCompressorNode
	{
		return null;
	}
	CreateGain(): GainNode
	{
		return null;
	}
	CreateGainNode(): GainNode
	{
		return null;
	}
	CreateJavaScriptNode(): ScriptProcessorNode;
	CreateJavaScriptNode(bufferSize: number): ScriptProcessorNode;
	CreateJavaScriptNode(bufferSize: number, numberOfInputChannels: number): ScriptProcessorNode;
	CreateJavaScriptNode(bufferSize: number, numberOfInputChannels: number, numberOfOutputChannels: number): ScriptProcessorNode;
	CreateJavaScriptNode(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode
	{
		if (arguments.length === 0)
		{
			return this.CreateJavaScriptNode_0();
		}
		if (arguments.length === 1 && (bufferSize === null || bufferSize.constructor === Number))
		{
			return this.CreateJavaScriptNode_1(bufferSize);
		}
		if (arguments.length === 2 && (bufferSize === null || bufferSize.constructor === Number) && (numberOfInputChannels === null || numberOfInputChannels.constructor === Number))
		{
			return this.CreateJavaScriptNode_2(bufferSize, numberOfInputChannels);
		}
		return this.CreateJavaScriptNode_3(bufferSize, numberOfInputChannels, numberOfOutputChannels);
	}
	private CreateJavaScriptNode_0(): ScriptProcessorNode
	{
		return null;
	}
	private CreateJavaScriptNode_1(bufferSize: number): ScriptProcessorNode
	{
		return null;
	}
	private CreateJavaScriptNode_2(bufferSize: number, numberOfInputChannels: number): ScriptProcessorNode
	{
		return null;
	}
	private CreateJavaScriptNode_3(bufferSize: number, numberOfInputChannels: number, numberOfOutputChannels: number): ScriptProcessorNode
	{
		return null;
	}
	CreateMediaElementSource(mediaElement: MediaElement): MediaElementAudioSourceNode
	{
		return null;
	}
	CreateMediaStreamDestination(): MediaStreamAudioDestinationNode
	{
		return null;
	}
	CreateMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode
	{
		return null;
	}
	CreateOscillator(): OscillatorNode
	{
		return null;
	}
	CreatePanner(): PannerNode
	{
		return null;
	}
	CreatePeriodicWave(real: Float32Array, imag: Float32Array): PeriodicWave
	{
		return null;
	}
	CreateScriptProcessor(): ScriptProcessorNode;
	CreateScriptProcessor(bufferSize: number): ScriptProcessorNode;
	CreateScriptProcessor(bufferSize: number, numberOfInputChannels: number): ScriptProcessorNode;
	CreateScriptProcessor(bufferSize: number, numberOfInputChannels: number, numberOfOutputChannels: number): ScriptProcessorNode;
	CreateScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode
	{
		if (arguments.length === 0)
		{
			return this.CreateScriptProcessor_0();
		}
		if (arguments.length === 1 && (bufferSize === null || bufferSize.constructor === Number))
		{
			return this.CreateScriptProcessor_1(bufferSize);
		}
		if (arguments.length === 2 && (bufferSize === null || bufferSize.constructor === Number) && (numberOfInputChannels === null || numberOfInputChannels.constructor === Number))
		{
			return this.CreateScriptProcessor_2(bufferSize, numberOfInputChannels);
		}
		return this.CreateScriptProcessor_3(bufferSize, numberOfInputChannels, numberOfOutputChannels);
	}
	private CreateScriptProcessor_0(): ScriptProcessorNode
	{
		return null;
	}
	private CreateScriptProcessor_1(bufferSize: number): ScriptProcessorNode
	{
		return null;
	}
	private CreateScriptProcessor_2(bufferSize: number, numberOfInputChannels: number): ScriptProcessorNode
	{
		return null;
	}
	private CreateScriptProcessor_3(bufferSize: number, numberOfInputChannels: number, numberOfOutputChannels: number): ScriptProcessorNode
	{
		return null;
	}
	CreateWaveShaper(): WaveShaperNode
	{
		return null;
	}
	DecodeAudioData(audioData: ArrayBuffer, successCallback: (decodedData: AudioBuffer) => void): void;
	DecodeAudioData(audioData: ArrayBuffer, successCallback: (decodedData: AudioBuffer) => void, errorCallback: () => void): void;
	DecodeAudioData(audioData: ArrayBuffer, successCallback: (decodedData: AudioBuffer) => void, errorCallback?: () => void): void
	{
		if (arguments.length === 2 && (audioData === null || audioData instanceof ArrayBuffer))
		{
			this.DecodeAudioData_0(audioData, successCallback);
			return;
		}
		this.DecodeAudioData_1(audioData, successCallback, errorCallback);
	}
	private DecodeAudioData_0(audioData: ArrayBuffer, successCallback: (decodedData: AudioBuffer) => void): void
	{
	}
	private DecodeAudioData_1(audioData: ArrayBuffer, successCallback: (decodedData: AudioBuffer) => void, errorCallback: () => void): void
	{
	}
	RemoveEventListener(type: AudioContextEvents, listener: () => void): void;
	RemoveEventListener(type: AudioContextEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioContextEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioContextEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void): void;
	RemoveEventListener(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioContextEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioContextEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioContext, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioContext, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioContextEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioContextEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioContextEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioContextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioContextEvents, listener: (target: AudioContext, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioContextEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioContextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioContext, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioContext, event: Event) => void, capture: boolean): void
	{
	}
}
enum AudioContextEvents
{

}
class AudioDestinationNode extends AudioNode
{
	get MaxChannelCount(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: AudioDestinationNodeEvents, listener: () => void): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: IEventListener): void;
	AddEventListener(type: AudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: AudioDestinationNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: AudioDestinationNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: AudioDestinationNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: AudioDestinationNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: AudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: AudioDestinationNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: AudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: AudioDestinationNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: () => void): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: AudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: AudioDestinationNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: AudioDestinationNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: AudioDestinationNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: AudioDestinationNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: AudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: AudioDestinationNodeEvents, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: AudioDestinationNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: AudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: AudioDestinationNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: AudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum AudioDestinationNodeEvents
{

}
class AudioListener extends NObject
{
	set DopplerFactor(value: number)
	{
	}
	get DopplerFactor(): number
	{
		return 0.0;
	}
	set SpeedOfSound(value: number)
	{
	}
	get SpeedOfSound(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	SetOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void
	{
	}
	SetPosition(x: number, y: number, z: number): void
	{
	}
	SetVelocity(x: number, y: number, z: number): void
	{
	}
}
enum AudioNodeEvents
{

}
class AudioParam extends NObject
{
	get DefaultValue(): number
	{
		return 0.0;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	CancelScheduledValues(startTime: number): void
	{
	}
	ExponentialRampToValueAtTime(value: number, endTime: number): void
	{
	}
	LinearRampToValueAtTime(value: number, endTime: number): void
	{
	}
	SetTargetAtTime(target: number, startTime: number, timeConstant: number): void
	{
	}
	SetTargetValueAtTime(target: number, startTime: number, timeConstant: number): void
	{
	}
	SetValueAtTime(value: number, startTime: number): void
	{
	}
	SetValueCurveAtTime(values: Float32Array, startTime: number, duration: number): void
	{
	}
}
class AudioProcessingEvent extends Event
{
	get InputBuffer(): AudioBuffer
	{
		return null;
	}
	get OutputBuffer(): AudioBuffer
	{
		return null;
	}
	get PlaybackTime(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class MediaStreamTrack extends NObject
{
	set Enabled(value: boolean)
	{
	}
	get Enabled(): boolean
	{
		return false;
	}
	get Id(): string
	{
		return null;
	}
	get Kind(): string
	{
		return null;
	}
	get Label(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class AudioStreamTrack extends MediaStreamTrack
{
	constructor()
	{
		super();
	}
}
class BiquadFilterNode extends AudioNode
{
	static ALLPASS: number = 7;
	static BANDPASS: number = 2;
	static HIGHPASS: number = 1;
	static HIGHSHELF: number = 4;
	static LOWPASS: number = 0;
	static LOWSHELF: number = 3;
	static NOTCH: number = 6;
	static PEAKING: number = 5;
	get Detune(): AudioParam
	{
		return null;
	}
	get Frequency(): AudioParam
	{
		return null;
	}
	get Gain(): AudioParam
	{
		return null;
	}
	get Q(): AudioParam
	{
		return null;
	}
	set Type(value: BiquadFilterType)
	{
	}
	get Type(): BiquadFilterType
	{
		return BiquadFilterType._0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: BiquadFilterNodeEvents, listener: () => void): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: IEventListener): void;
	AddEventListener(type: BiquadFilterNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: BiquadFilterNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: BiquadFilterNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: BiquadFilterNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: BiquadFilterNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: BiquadFilterNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: BiquadFilterNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: BiquadFilterNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: BiquadFilterNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void
	{
	}
	GetFrequencyResponse(frequencyHz: Float32Array, magResponse: Float32Array, phaseResponse: Float32Array): void
	{
	}
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: () => void): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: BiquadFilterNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: BiquadFilterNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: BiquadFilterNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: BiquadFilterNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: BiquadFilterNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: BiquadFilterNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: BiquadFilterNodeEvents, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: BiquadFilterNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: BiquadFilterNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: BiquadFilterNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: BiquadFilterNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum BiquadFilterNodeEvents
{

}
enum BiquadFilterType
{
	_0,
	_1,
	_2,
	_3,
	_4,
	_5,
	_6,
	_7,
	Lowpass,
	Highpass,
	Bandpass,
	Lowshelf,
	Highshelf,
	Peaking,
	Notch,
	Allpass
}
enum ChannelCountMode
{
	Max,
	ClampedMax,
	Explicit
}
enum ChannelInterpretation
{
	Speakers,
	Discrete
}
class ChannelMergerNode extends AudioNode
{
	constructor()
	{
		super();
	}
	AddEventListener(type: ChannelMergerNodeEvents, listener: () => void): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: IEventListener): void;
	AddEventListener(type: ChannelMergerNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ChannelMergerNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ChannelMergerNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ChannelMergerNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ChannelMergerNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ChannelMergerNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ChannelMergerNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ChannelMergerNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ChannelMergerNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: () => void): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: ChannelMergerNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ChannelMergerNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ChannelMergerNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ChannelMergerNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ChannelMergerNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ChannelMergerNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ChannelMergerNodeEvents, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ChannelMergerNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ChannelMergerNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ChannelMergerNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ChannelMergerNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum ChannelMergerNodeEvents
{

}
class ChannelSplitterNode extends AudioNode
{
	constructor()
	{
		super();
	}
	AddEventListener(type: ChannelSplitterNodeEvents, listener: () => void): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: IEventListener): void;
	AddEventListener(type: ChannelSplitterNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ChannelSplitterNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ChannelSplitterNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ChannelSplitterNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ChannelSplitterNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ChannelSplitterNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ChannelSplitterNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ChannelSplitterNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ChannelSplitterNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: () => void): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: ChannelSplitterNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ChannelSplitterNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ChannelSplitterNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ChannelSplitterNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ChannelSplitterNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ChannelSplitterNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ChannelSplitterNodeEvents, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ChannelSplitterNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ChannelSplitterNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ChannelSplitterNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ChannelSplitterNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum ChannelSplitterNodeEvents
{

}
class ConvolverNode extends AudioNode
{
	set Buffer(value: AudioBuffer)
	{
	}
	get Buffer(): AudioBuffer
	{
		return null;
	}
	set Normalize(value: boolean)
	{
	}
	get Normalize(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ConvolverNodeEvents, listener: () => void): void;
	AddEventListener(type: ConvolverNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ConvolverNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ConvolverNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void): void;
	AddEventListener(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ConvolverNodeEvents, listener: IEventListener): void;
	AddEventListener(type: ConvolverNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ConvolverNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ConvolverNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ConvolverNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ConvolverNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ConvolverNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ConvolverNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ConvolverNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ConvolverNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ConvolverNodeEvents, listener: () => void): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: ConvolverNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ConvolverNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ConvolverNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ConvolverNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ConvolverNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ConvolverNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ConvolverNodeEvents, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ConvolverNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ConvolverNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ConvolverNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ConvolverNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum ConvolverNodeEvents
{

}
class DelayNode extends AudioNode
{
	get DelayTime(): AudioParam
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DelayNodeEvents, listener: () => void): void;
	AddEventListener(type: DelayNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DelayNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DelayNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void): void;
	AddEventListener(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DelayNodeEvents, listener: IEventListener): void;
	AddEventListener(type: DelayNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DelayNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DelayNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DelayNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DelayNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DelayNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DelayNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DelayNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DelayNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DelayNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DelayNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DelayNodeEvents, listener: () => void): void;
	RemoveEventListener(type: DelayNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DelayNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DelayNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void): void;
	RemoveEventListener(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DelayNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: DelayNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DelayNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DelayNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DelayNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DelayNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DelayNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DelayNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DelayNodeEvents, listener: (target: DelayNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DelayNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DelayNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DelayNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DelayNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum DelayNodeEvents
{

}
enum DistanceModelType
{
	_0,
	_1,
	_2,
	Linear,
	Inverse,
	Exponential
}
class DynamicsCompressorNode extends AudioNode
{
	get Attack(): AudioParam
	{
		return null;
	}
	get Knee(): AudioParam
	{
		return null;
	}
	get Ratio(): AudioParam
	{
		return null;
	}
	get Reduction(): AudioParam
	{
		return null;
	}
	get Release(): AudioParam
	{
		return null;
	}
	get Threshold(): AudioParam
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: () => void): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: IEventListener): void;
	AddEventListener(type: DynamicsCompressorNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: DynamicsCompressorNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: DynamicsCompressorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: DynamicsCompressorNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: DynamicsCompressorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: () => void): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: DynamicsCompressorNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: DynamicsCompressorNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: DynamicsCompressorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: DynamicsCompressorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: DynamicsCompressorNodeEvents, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: DynamicsCompressorNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: DynamicsCompressorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: DynamicsCompressorNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum DynamicsCompressorNodeEvents
{

}
class GainNode extends AudioNode
{
	get Gain(): AudioParam
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: GainNodeEvents, listener: () => void): void;
	AddEventListener(type: GainNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: GainNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: GainNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void): void;
	AddEventListener(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: GainNodeEvents, listener: IEventListener): void;
	AddEventListener(type: GainNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: GainNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: GainNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: GainNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: GainNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: GainNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: GainNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: GainNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: GainNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: GainNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: GainNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: GainNodeEvents, listener: () => void): void;
	RemoveEventListener(type: GainNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: GainNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: GainNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void): void;
	RemoveEventListener(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: GainNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: GainNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: GainNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: GainNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: GainNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: GainNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: GainNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: GainNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: GainNodeEvents, listener: (target: GainNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: GainNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: GainNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: GainNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: GainNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum GainNodeEvents
{

}
class MediaElementAudioSourceNode extends AudioNode
{
	constructor()
	{
		super();
	}
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: () => void): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: IEventListener): void;
	AddEventListener(type: MediaElementAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaElementAudioSourceNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaElementAudioSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaElementAudioSourceNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaElementAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: () => void): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaElementAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaElementAudioSourceNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaElementAudioSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaElementAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaElementAudioSourceNodeEvents, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaElementAudioSourceNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaElementAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaElementAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum MediaElementAudioSourceNodeEvents
{

}
class MediaStreamAudioDestinationNode extends AudioNode
{
	get Stream(): MediaStream
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: () => void): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener): void;
	AddEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaStreamAudioDestinationNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaStreamAudioDestinationNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: () => void): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaStreamAudioDestinationNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaStreamAudioDestinationNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaStreamAudioDestinationNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaStreamAudioDestinationNodeEvents, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaStreamAudioDestinationNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaStreamAudioDestinationNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum MediaStreamAudioDestinationNodeEvents
{

}
class MediaStreamAudioSourceNode extends AudioNode
{
	constructor()
	{
		super();
	}
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: () => void): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener): void;
	AddEventListener(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaStreamAudioSourceNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaStreamAudioSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: () => void): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaStreamAudioSourceNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaStreamAudioSourceNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaStreamAudioSourceNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaStreamAudioSourceNodeEvents, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaStreamAudioSourceNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaStreamAudioSourceNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum MediaStreamAudioSourceNodeEvents
{

}
class NotifyAudioAvailableEvent extends Event
{
	get FrameBuffer(): Float32Array
	{
		return null;
	}
	get Time(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	InitAudioAvailableEvent(type: string, canBubble: boolean, cancelable: boolean, frameBuffer: number[], frameBufferLength: number, time: number, allowAudioData: boolean): void
	{
	}
}
class OfflineAudioCompletionEvent extends Event
{
	get RenderedBuffer(): AudioBuffer
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class OfflineAudioContext extends AudioContext
{
	set OnComplete(value: (event: Event) => void)
	{
	}
	get OnComplete(): (event: Event) => void
	{
		return null;
	}
	constructor();
	constructor(numberOfChannels: number, length: number, sampleRate: number);
	constructor(numberOfChannels?: number, length?: number, sampleRate?: number)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(numberOfChannels, length, sampleRate);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(numberOfChannels: number, length: number, sampleRate: number): void
	{
	}
	AddEventListener(type: OfflineAudioContextEvents, listener: () => void): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: IEventListener): void;
	AddEventListener(type: OfflineAudioContextEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OfflineAudioContext, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OfflineAudioContextEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OfflineAudioContextEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OfflineAudioContextEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OfflineAudioContextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OfflineAudioContextEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OfflineAudioContextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OfflineAudioContext, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: OfflineAudioContextEvents, listener: () => void): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: IEventListener): void;
	RemoveEventListener(type: OfflineAudioContextEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OfflineAudioContext, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OfflineAudioContextEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OfflineAudioContextEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OfflineAudioContextEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OfflineAudioContextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OfflineAudioContextEvents, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OfflineAudioContextEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OfflineAudioContextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OfflineAudioContext, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OfflineAudioContext, event: Event) => void, capture: boolean): void
	{
	}
	StartRendering(): void
	{
	}
}
enum OfflineAudioContextEvents
{
	Complete
}
class OscillatorNode extends AudioNode
{
	static CUSTOM: number = 4;
	static SAWTOOTH: number = 2;
	static SINE: number = 0;
	static SQUARE: number = 1;
	static TRIANGLE: number = 3;
	get Detune(): AudioParam
	{
		return null;
	}
	get Frequency(): AudioParam
	{
		return null;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	set Type(value: OscillatorType)
	{
	}
	get Type(): OscillatorType
	{
		return OscillatorType._0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: OscillatorNodeEvents, listener: () => void): void;
	AddEventListener(type: OscillatorNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: OscillatorNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: OscillatorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void): void;
	AddEventListener(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: OscillatorNodeEvents, listener: IEventListener): void;
	AddEventListener(type: OscillatorNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: OscillatorNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: OscillatorNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: OscillatorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: OscillatorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: OscillatorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: OscillatorNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: OscillatorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: OscillatorNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void
	{
	}
	NoteOff(when: number): void
	{
	}
	NoteOn(when: number): void
	{
	}
	RemoveEventListener(type: OscillatorNodeEvents, listener: () => void): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: OscillatorNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: OscillatorNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: OscillatorNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: OscillatorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: OscillatorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: OscillatorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: OscillatorNodeEvents, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: OscillatorNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: OscillatorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: OscillatorNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: OscillatorNode, event: Event) => void, capture: boolean): void
	{
	}
	SetPeriodicWave(periodicWave: PeriodicWave): void
	{
	}
	Start(): void;
	Start(when: number): void;
	Start(when?: number): void
	{
		if (arguments.length === 0)
		{
			this.Start_0();
			return;
		}
		this.Start_1(when);
	}
	private Start_0(): void
	{
	}
	private Start_1(when: number): void
	{
	}
	Stop(): void;
	Stop(when: number): void;
	Stop(when?: number): void
	{
		if (arguments.length === 0)
		{
			this.Stop_0();
			return;
		}
		this.Stop_1(when);
	}
	private Stop_0(): void
	{
	}
	private Stop_1(when: number): void
	{
	}
}
enum OscillatorNodeEvents
{
	Ended
}
enum OscillatorType
{
	_0,
	_1,
	_2,
	_3,
	_4,
	Sine,
	Square,
	Sawtooth,
	Triangle,
	Custom
}
class PannerNode extends AudioNode
{
	static EQUALPOWER: number = 0;
	static EXPONENTIAL_DISTANCE: number = 2;
	static HRTF: number = 1;
	static INVERSE_DISTANCE: number = 1;
	static LINEAR_DISTANCE: number = 0;
	set ConeInnerAngle(value: number)
	{
	}
	get ConeInnerAngle(): number
	{
		return 0.0;
	}
	set ConeOuterAngle(value: number)
	{
	}
	get ConeOuterAngle(): number
	{
		return 0.0;
	}
	set ConeOuterGain(value: number)
	{
	}
	get ConeOuterGain(): number
	{
		return 0.0;
	}
	set DistanceModel(value: DistanceModelType)
	{
	}
	get DistanceModel(): DistanceModelType
	{
		return DistanceModelType._0;
	}
	set MaxDistance(value: number)
	{
	}
	get MaxDistance(): number
	{
		return 0.0;
	}
	set PanningModel(value: PanningModelType)
	{
	}
	get PanningModel(): PanningModelType
	{
		return PanningModelType._0;
	}
	set RefDistance(value: number)
	{
	}
	get RefDistance(): number
	{
		return 0.0;
	}
	set RolloffFactor(value: number)
	{
	}
	get RolloffFactor(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: PannerNodeEvents, listener: () => void): void;
	AddEventListener(type: PannerNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: PannerNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: PannerNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void): void;
	AddEventListener(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: PannerNodeEvents, listener: IEventListener): void;
	AddEventListener(type: PannerNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: PannerNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: PannerNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: PannerNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: PannerNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: PannerNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: PannerNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: PannerNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: PannerNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: PannerNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: PannerNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: PannerNodeEvents, listener: () => void): void;
	RemoveEventListener(type: PannerNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: PannerNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: PannerNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void): void;
	RemoveEventListener(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: PannerNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: PannerNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: PannerNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: PannerNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: PannerNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: PannerNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: PannerNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: PannerNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: PannerNodeEvents, listener: (target: PannerNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: PannerNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: PannerNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: PannerNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: PannerNode, event: Event) => void, capture: boolean): void
	{
	}
	SetOrientation(x: number, y: number, z: number): void
	{
	}
	SetPosition(x: number, y: number, z: number): void
	{
	}
	SetVelocity(x: number, y: number, z: number): void
	{
	}
}
enum PannerNodeEvents
{

}
enum PanningModelType
{
	_0,
	_1,
	Equalpower,
	HRTF
}
class PeriodicWave extends NObject
{
	constructor()
	{
		super();
	}
}
class ScriptProcessorNode extends AudioNode
{
	get BufferSize(): number
	{
		return 0;
	}
	set OnAudioprocess(value: (event: Event) => void)
	{
	}
	get OnAudioprocess(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: ScriptProcessorNodeEvents, listener: () => void): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: (event: Event) => void): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: IEventListener): void;
	AddEventListener(type: ScriptProcessorNodeEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: ScriptProcessorNode, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: ScriptProcessorNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: ScriptProcessorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: ScriptProcessorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: ScriptProcessorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: ScriptProcessorNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: ScriptProcessorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: ScriptProcessorNode, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: () => void): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: IEventListener): void;
	RemoveEventListener(type: ScriptProcessorNodeEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: ScriptProcessorNode, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: ScriptProcessorNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: ScriptProcessorNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: ScriptProcessorNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: ScriptProcessorNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: ScriptProcessorNodeEvents, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: ScriptProcessorNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: ScriptProcessorNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: ScriptProcessorNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: ScriptProcessorNode, event: Event) => void, capture: boolean): void
	{
	}
}
enum ScriptProcessorNodeEvents
{
	Audioprocess
}
class SourceBuffer extends EventTarget
{
	set AppendWindowEnd(value: number)
	{
	}
	get AppendWindowEnd(): number
	{
		return 0.0;
	}
	set AppendWindowStart(value: number)
	{
	}
	get AppendWindowStart(): number
	{
		return 0.0;
	}
	get Buffered(): TimeRanges
	{
		return null;
	}
	set Mode(value: SourceBufferAppendMode)
	{
	}
	get Mode(): SourceBufferAppendMode
	{
		return SourceBufferAppendMode.Segments;
	}
	set TimestampOffset(value: number)
	{
	}
	get TimestampOffset(): number
	{
		return 0.0;
	}
	get Updating(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	Abort(): void
	{
	}
	AddEventListener(type: SourceBufferEvents, listener: () => void): void;
	AddEventListener(type: SourceBufferEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SourceBufferEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SourceBufferEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void): void;
	AddEventListener(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceBufferEvents, listener: IEventListener): void;
	AddEventListener(type: SourceBufferEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SourceBuffer, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SourceBufferEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SourceBufferEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SourceBufferEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SourceBufferEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SourceBufferEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SourceBufferEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SourceBuffer, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void
	{
	}
	AppendBuffer(data: ArrayBuffer): void;
	AppendBuffer(data: ArrayBufferView): void;
	AppendBuffer(data: any): void
	{
		if (arguments.length === 1 && (data === null || data instanceof ArrayBuffer))
		{
			this.AppendBuffer_0(data);
			return;
		}
		this.AppendBuffer_1(data);
	}
	private AppendBuffer_0(data: ArrayBuffer): void
	{
	}
	private AppendBuffer_1(data: ArrayBufferView): void
	{
	}
	Remove(start: number, end: number): void
	{
	}
	RemoveEventListener(type: SourceBufferEvents, listener: () => void): void;
	RemoveEventListener(type: SourceBufferEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SourceBufferEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void): void;
	RemoveEventListener(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferEvents, listener: IEventListener): void;
	RemoveEventListener(type: SourceBufferEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SourceBuffer, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SourceBufferEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SourceBufferEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SourceBufferEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SourceBufferEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SourceBufferEvents, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SourceBufferEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SourceBufferEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SourceBuffer, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SourceBuffer, event: Event) => void, capture: boolean): void
	{
	}
}
enum SourceBufferAppendMode
{
	Segments,
	Sequence
}
enum SourceBufferEvents
{

}
class SourceBufferList extends EventTarget
{
	get_Item(index: number): SourceBuffer
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: SourceBufferListEvents, listener: () => void): void;
	AddEventListener(type: SourceBufferListEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SourceBufferListEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SourceBufferListEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void): void;
	AddEventListener(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SourceBufferListEvents, listener: IEventListener): void;
	AddEventListener(type: SourceBufferListEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SourceBufferList, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SourceBufferListEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SourceBufferListEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SourceBufferListEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SourceBufferListEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SourceBufferListEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SourceBufferListEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SourceBufferList, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void
	{
	}
	GetEnumerator(): IEnumerator<SourceBuffer>
	{
		return null;
	}
	RemoveEventListener(type: SourceBufferListEvents, listener: () => void): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: IEventListener): void;
	RemoveEventListener(type: SourceBufferListEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SourceBufferList, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SourceBufferListEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SourceBufferListEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SourceBufferListEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SourceBufferListEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SourceBufferListEvents, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SourceBufferListEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SourceBufferListEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SourceBufferList, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SourceBufferList, event: Event) => void, capture: boolean): void
	{
	}
}
enum SourceBufferListEvents
{

}
class WaveShaperNode extends AudioNode
{
	set Curve(value: Float32Array)
	{
	}
	get Curve(): Float32Array
	{
		return null;
	}
	set Oversample(value: OverSampleType)
	{
	}
	get Oversample(): OverSampleType
	{
		return OverSampleType.None;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: WaveShaperNode, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: () => void): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: IEventListener): void;
	new AddEventListener(type: WaveShaperNodeEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: WaveShaperNode, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: WaveShaperNodeEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: WaveShaperNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: WaveShaperNodeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: WaveShaperNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: WaveShaperNodeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: WaveShaperNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: WaveShaperNode, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: () => void): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: IEventListener): void;
	new RemoveEventListener(type: WaveShaperNodeEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: WaveShaperNode, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: WaveShaperNodeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: WaveShaperNodeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: WaveShaperNodeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: WaveShaperNodeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: WaveShaperNodeEvents, listener: (target: WaveShaperNode, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: WaveShaperNodeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: WaveShaperNodeEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum WaveShaperNodeEvents
{

}
class CanvasGradient extends NObject
{
	constructor()
	{
		super();
	}
	AddColorStop(offset: number, color: string): void
	{
	}
}
class CanvasPattern extends NObject
{
	constructor()
	{
		super();
	}
}
class CanvasRenderingContext extends NObject
{
	constructor()
	{
		super();
	}
}
class CanvasRenderingContext2D extends CanvasRenderingContext
{
	get Canvas(): CanvasElement
	{
		return null;
	}
	set FillStyle(value: TypeOption<string, CanvasGradient, CanvasPattern>)
	{
	}
	get FillStyle(): TypeOption<string, CanvasGradient, CanvasPattern>
	{
		return null;
	}
	set Font(value: string)
	{
	}
	get Font(): string
	{
		return null;
	}
	set GlobalAlpha(value: number)
	{
	}
	get GlobalAlpha(): number
	{
		return 0.0;
	}
	set GlobalCompositeOperation(value: CompositeOperation)
	{
	}
	get GlobalCompositeOperation(): CompositeOperation
	{
		return CompositeOperation.Copy;
	}
	set LineCap(value: LineCap)
	{
	}
	get LineCap(): LineCap
	{
		return LineCap.Butt;
	}
	set LineDashOffset(value: number)
	{
	}
	get LineDashOffset(): number
	{
		return 0.0;
	}
	set LineJoin(value: LineJoin)
	{
	}
	get LineJoin(): LineJoin
	{
		return LineJoin.Miter;
	}
	set LineWidth(value: number)
	{
	}
	get LineWidth(): number
	{
		return 0.0;
	}
	set MiterLimit(value: number)
	{
	}
	get MiterLimit(): number
	{
		return 0.0;
	}
	set ShadowBlur(value: number)
	{
	}
	get ShadowBlur(): number
	{
		return 0.0;
	}
	set ShadowColor(value: string)
	{
	}
	get ShadowColor(): string
	{
		return null;
	}
	set ShadowOffsetX(value: number)
	{
	}
	get ShadowOffsetX(): number
	{
		return 0.0;
	}
	set ShadowOffsetY(value: number)
	{
	}
	get ShadowOffsetY(): number
	{
		return 0.0;
	}
	set StrokeStyle(value: TypeOption<string, CanvasGradient, CanvasPattern>)
	{
	}
	get StrokeStyle(): TypeOption<string, CanvasGradient, CanvasPattern>
	{
		return null;
	}
	set TextAlign(value: TextAlign)
	{
	}
	get TextAlign(): TextAlign
	{
		return TextAlign.Start;
	}
	set TextBaseline(value: TextBaseline)
	{
	}
	get TextBaseline(): TextBaseline
	{
		return TextBaseline.Top;
	}
	constructor()
	{
		super();
	}
	AddHitRegion(): void;
	AddHitRegion(options: HitRegionOptions): void;
	AddHitRegion(options?: HitRegionOptions): void
	{
		if (arguments.length === 0)
		{
			this.AddHitRegion_0();
			return;
		}
		this.AddHitRegion_1(options);
	}
	private AddHitRegion_0(): void
	{
	}
	private AddHitRegion_1(options: HitRegionOptions): void
	{
	}
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number): void;
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean): void;
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void
	{
		if (arguments.length === 5 && (x === null || x.constructor === Number) && (y === null || y.constructor === Number) && (radius === null || radius.constructor === Number) && (startAngle === null || startAngle.constructor === Number) && (endAngle === null || endAngle.constructor === Number))
		{
			this.Arc_0(x, y, radius, startAngle, endAngle);
			return;
		}
		this.Arc_1(x, y, radius, startAngle, endAngle, anticlockwise);
	}
	private Arc_0(x: number, y: number, radius: number, startAngle: number, endAngle: number): void
	{
	}
	private Arc_1(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean): void
	{
	}
	ArcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void
	{
	}
	BeginPath(): void
	{
	}
	BezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void
	{
	}
	ClearRect(x: number, y: number, w: number, h: number): void
	{
	}
	Clip(): void;
	Clip(winding: CanvasWindingRule): void;
	Clip(path: Path2D): void;
	Clip(path: Path2D, winding: CanvasWindingRule): void;
	Clip(windingOrPath?: any, winding?: CanvasWindingRule): void
	{
		if (arguments.length === 0)
		{
			this.Clip_0();
			return;
		}
		if (arguments.length === 1 && (windingOrPath === null || windingOrPath.constructor === Number))
		{
			this.Clip_1(windingOrPath);
			return;
		}
		if (arguments.length === 1 && (windingOrPath === null || windingOrPath instanceof Path2D))
		{
			this.Clip_2(windingOrPath);
			return;
		}
		this.Clip_3(windingOrPath, winding);
	}
	private Clip_0(): void
	{
	}
	private Clip_1(winding: CanvasWindingRule): void
	{
	}
	private Clip_2(path: Path2D): void
	{
	}
	private Clip_3(path: Path2D, winding: CanvasWindingRule): void
	{
	}
	ClosePath(): void
	{
	}
	CreateImageData(sw: number, sh: number): ImageData;
	CreateImageData(imagedata: ImageData): ImageData;
	CreateImageData(swOrImagedata: any, sh?: number): ImageData
	{
		if (arguments.length === 2 && (swOrImagedata === null || swOrImagedata.constructor === Number) && (sh === null || sh.constructor === Number))
		{
			return this.CreateImageData_0(swOrImagedata, sh);
		}
		return this.CreateImageData_1(swOrImagedata);
	}
	private CreateImageData_0(sw: number, sh: number): ImageData
	{
		return null;
	}
	private CreateImageData_1(imagedata: ImageData): ImageData
	{
		return null;
	}
	CreateLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient
	{
		return null;
	}
	CreatePattern(image: TypeOption<ImageElement, CanvasElement, VideoElement>, repetition: string): CanvasPattern
	{
		return null;
	}
	CreateRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient
	{
		return null;
	}
	DrawCustomFocusRing(element: Element): boolean
	{
		return false;
	}
	DrawFocusIfNeeded(element: Element): void
	{
	}
	DrawImage(image: TypeOption<ImageElement, CanvasElement, VideoElement>, dx: number, dy: number): void;
	DrawImage(image: TypeOption<ImageElement, CanvasElement, VideoElement>, dx: number, dy: number, dw: number, dh: number): void;
	DrawImage(image: TypeOption<ImageElement, CanvasElement, VideoElement>, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;
	DrawImage(image: TypeOption<ImageElement, CanvasElement, VideoElement>, dxOrSx: number, dyOrSy: number, dwOrSw?: number, dhOrSh?: number, dx?: number, dy?: number, dw?: number, dh?: number): void
	{
		if (arguments.length === 3 && (image === null || image instanceof TypeOption) && (dxOrSx === null || dxOrSx.constructor === Number) && (dyOrSy === null || dyOrSy.constructor === Number))
		{
			this.DrawImage_0(image, dxOrSx, dyOrSy);
			return;
		}
		if (arguments.length === 5 && (image === null || image instanceof TypeOption) && (dxOrSx === null || dxOrSx.constructor === Number) && (dyOrSy === null || dyOrSy.constructor === Number) && (dwOrSw === null || dwOrSw.constructor === Number) && (dhOrSh === null || dhOrSh.constructor === Number))
		{
			this.DrawImage_1(image, dxOrSx, dyOrSy, dwOrSw, dhOrSh);
			return;
		}
		this.DrawImage_2(image, dxOrSx, dyOrSy, dwOrSw, dhOrSh, dx, dy, dw, dh);
	}
	private DrawImage_0(image: TypeOption<ImageElement, CanvasElement, VideoElement>, dx: number, dy: number): void
	{
	}
	private DrawImage_1(image: TypeOption<ImageElement, CanvasElement, VideoElement>, dx: number, dy: number, dw: number, dh: number): void
	{
	}
	private DrawImage_2(image: TypeOption<ImageElement, CanvasElement, VideoElement>, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void
	{
	}
	Fill(): void;
	Fill(winding: CanvasWindingRule): void;
	Fill(path: Path2D): void;
	Fill(path: Path2D, winding: CanvasWindingRule): void;
	Fill(windingOrPath?: any, winding?: CanvasWindingRule): void
	{
		if (arguments.length === 0)
		{
			this.Fill_0();
			return;
		}
		if (arguments.length === 1 && (windingOrPath === null || windingOrPath.constructor === Number))
		{
			this.Fill_1(windingOrPath);
			return;
		}
		if (arguments.length === 1 && (windingOrPath === null || windingOrPath instanceof Path2D))
		{
			this.Fill_2(windingOrPath);
			return;
		}
		this.Fill_3(windingOrPath, winding);
	}
	private Fill_0(): void
	{
	}
	private Fill_1(winding: CanvasWindingRule): void
	{
	}
	private Fill_2(path: Path2D): void
	{
	}
	private Fill_3(path: Path2D, winding: CanvasWindingRule): void
	{
	}
	FillRect(x: number, y: number, w: number, h: number): void
	{
	}
	FillText(text: string, x: number, y: number): void;
	FillText(text: string, x: number, y: number, maxWidth: number): void;
	FillText(text: string, x: number, y: number, maxWidth?: number): void
	{
		if (arguments.length === 3 && (text === null || text.constructor === String) && (x === null || x.constructor === Number) && (y === null || y.constructor === Number))
		{
			this.FillText_0(text, x, y);
			return;
		}
		this.FillText_1(text, x, y, maxWidth);
	}
	private FillText_0(text: string, x: number, y: number): void
	{
	}
	private FillText_1(text: string, x: number, y: number, maxWidth: number): void
	{
	}
	GetImageData(sx: number, sy: number, sw: number, sh: number): ImageData
	{
		return null;
	}
	GetLineDash(): number[]
	{
		return null;
	}
	IsPointInPath(x: number, y: number): boolean;
	IsPointInPath(x: number, y: number, winding: CanvasWindingRule): boolean;
	IsPointInPath(path: Path2D, x: number, y: number): boolean;
	IsPointInPath(path: Path2D, x: number, y: number, winding: CanvasWindingRule): boolean;
	IsPointInPath(xOrPath: any, yOrX: number, windingOrY?: any, winding?: CanvasWindingRule): boolean
	{
		if (arguments.length === 2 && (xOrPath === null || xOrPath.constructor === Number) && (yOrX === null || yOrX.constructor === Number))
		{
			return this.IsPointInPath_0(xOrPath, yOrX);
		}
		if (arguments.length === 3 && (xOrPath === null || xOrPath.constructor === Number) && (yOrX === null || yOrX.constructor === Number) && (windingOrY === null || windingOrY.constructor === Number))
		{
			return this.IsPointInPath_1(xOrPath, yOrX, windingOrY);
		}
		if (arguments.length === 3 && (xOrPath === null || xOrPath instanceof Path2D) && (yOrX === null || yOrX.constructor === Number) && (windingOrY === null || windingOrY.constructor === Number))
		{
			return this.IsPointInPath_2(xOrPath, yOrX, windingOrY);
		}
		return this.IsPointInPath_3(xOrPath, yOrX, windingOrY, winding);
	}
	private IsPointInPath_0(x: number, y: number): boolean
	{
		return false;
	}
	private IsPointInPath_1(x: number, y: number, winding: CanvasWindingRule): boolean
	{
		return false;
	}
	private IsPointInPath_2(path: Path2D, x: number, y: number): boolean
	{
		return false;
	}
	private IsPointInPath_3(path: Path2D, x: number, y: number, winding: CanvasWindingRule): boolean
	{
		return false;
	}
	IsPointInStroke(x: number, y: number): boolean;
	IsPointInStroke(path: Path2D, x: number, y: number): boolean;
	IsPointInStroke(xOrPath: any, yOrX: number, y?: number): boolean
	{
		if (arguments.length === 2 && (xOrPath === null || xOrPath.constructor === Number) && (yOrX === null || yOrX.constructor === Number))
		{
			return this.IsPointInStroke_0(xOrPath, yOrX);
		}
		return this.IsPointInStroke_1(xOrPath, yOrX, y);
	}
	private IsPointInStroke_0(x: number, y: number): boolean
	{
		return false;
	}
	private IsPointInStroke_1(path: Path2D, x: number, y: number): boolean
	{
		return false;
	}
	LineTo(x: number, y: number): void
	{
	}
	MeasureText(text: string): TextMetrics
	{
		return null;
	}
	MoveTo(x: number, y: number): void
	{
	}
	PutImageData(imagedata: ImageData, dx: number, dy: number): void;
	PutImageData(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;
	PutImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void
	{
		if (arguments.length === 3 && (imagedata === null || imagedata instanceof ImageData) && (dx === null || dx.constructor === Number) && (dy === null || dy.constructor === Number))
		{
			this.PutImageData_0(imagedata, dx, dy);
			return;
		}
		this.PutImageData_1(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);
	}
	private PutImageData_0(imagedata: ImageData, dx: number, dy: number): void
	{
	}
	private PutImageData_1(imagedata: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void
	{
	}
	QuadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void
	{
	}
	Rect(x: number, y: number, w: number, h: number): void
	{
	}
	RemoveHitRegion(id: string): void
	{
	}
	Restore(): void
	{
	}
	Rotate(angle: number): void
	{
	}
	Save(): void
	{
	}
	Scale(x: number, y: number): void
	{
	}
	SetLineDash(segments: number[]): void
	{
	}
	SetTransform(a: number, b: number, c: number, d: number, e: number, f: number): void
	{
	}
	Stroke(): void;
	Stroke(path: Path2D): void;
	Stroke(path?: Path2D): void
	{
		if (arguments.length === 0)
		{
			this.Stroke_0();
			return;
		}
		this.Stroke_1(path);
	}
	private Stroke_0(): void
	{
	}
	private Stroke_1(path: Path2D): void
	{
	}
	StrokeRect(x: number, y: number, w: number, h: number): void
	{
	}
	StrokeText(text: string, x: number, y: number): void;
	StrokeText(text: string, x: number, y: number, maxWidth: number): void;
	StrokeText(text: string, x: number, y: number, maxWidth?: number): void
	{
		if (arguments.length === 3 && (text === null || text.constructor === String) && (x === null || x.constructor === Number) && (y === null || y.constructor === Number))
		{
			this.StrokeText_0(text, x, y);
			return;
		}
		this.StrokeText_1(text, x, y, maxWidth);
	}
	private StrokeText_0(text: string, x: number, y: number): void
	{
	}
	private StrokeText_1(text: string, x: number, y: number, maxWidth: number): void
	{
	}
	Transform(a: number, b: number, c: number, d: number, e: number, f: number): void
	{
	}
	Translate(x: number, y: number): void
	{
	}
}
enum CanvasWindingRule
{
	Nonzero,
	Evenodd
}
class ContextAttributes2D extends NObject
{
	Alpha: boolean = false;
	WillReadFrequently: boolean = false;
	constructor()
	{
		super();
	}
}
class HitRegionOptions extends NObject
{
	Control: Element = null;
	Id: string = null;
	constructor()
	{
		super();
	}
}
class ImageData extends NObject
{
	get Data(): Uint8ClampedArray
	{
		return null;
	}
	get Height(): number
	{
		return 0;
	}
	get Width(): number
	{
		return 0;
	}
	constructor();
	constructor(sw: number, sh: number);
	constructor(data: Uint8ClampedArray, sw: number);
	constructor(data: Uint8ClampedArray, sw: number, sh: number);
	constructor(swOrData?: any, shOrSw?: number, sh?: number)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 2 && (swOrData === null || swOrData.constructor === Number) && (shOrSw === null || shOrSw.constructor === Number))
		{
			super();
			this.constructor_1(swOrData, shOrSw);
			return;
		}
		if (arguments.length === 2 && (swOrData === null || swOrData instanceof Uint8ClampedArray) && (shOrSw === null || shOrSw.constructor === Number))
		{
			super();
			this.constructor_2(swOrData, shOrSw);
			return;
		}
		super();
		this.constructor_3(swOrData, shOrSw, sh);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(sw: number, sh: number): void
	{
	}
	private constructor_2(data: Uint8ClampedArray, sw: number): void
	{
	}
	private constructor_3(data: Uint8ClampedArray, sw: number, sh: number): void
	{
	}
}
class Path2D extends NObject
{
	constructor();
	constructor(other: Path2D);
	constructor(other?: Path2D)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(other);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(other: Path2D): void
	{
	}
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number): void;
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean): void;
	Arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void
	{
		if (arguments.length === 5 && (x === null || x.constructor === Number) && (y === null || y.constructor === Number) && (radius === null || radius.constructor === Number) && (startAngle === null || startAngle.constructor === Number) && (endAngle === null || endAngle.constructor === Number))
		{
			this.Arc_0(x, y, radius, startAngle, endAngle);
			return;
		}
		this.Arc_1(x, y, radius, startAngle, endAngle, anticlockwise);
	}
	private Arc_0(x: number, y: number, radius: number, startAngle: number, endAngle: number): void
	{
	}
	private Arc_1(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise: boolean): void
	{
	}
	ArcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void
	{
	}
	BezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void
	{
	}
	ClosePath(): void
	{
	}
	LineTo(x: number, y: number): void
	{
	}
	MoveTo(x: number, y: number): void
	{
	}
	QuadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void
	{
	}
	Rect(x: number, y: number, w: number, h: number): void
	{
	}
}
class TextMetrics extends NObject
{
	get Width(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
enum VideoFacingModeEnum
{
	User,
	Environment,
	Left,
	Right
}
class VideoPlaybackQuality extends NObject
{
	get CorruptedVideoFrames(): number
	{
		return 0;
	}
	get CreationTime(): number
	{
		return 0.0;
	}
	get DroppedVideoFrames(): number
	{
		return 0;
	}
	get TotalVideoFrames(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class VideoStreamTrack extends MediaStreamTrack
{
	constructor()
	{
		super();
	}
}
enum CanvasContextId
{
	Render2D,
	RenderWebGL
}
enum CompositeOperation
{
	Copy,
	DestinationAtop,
	DestinationIn,
	DestinationOut,
	DestinationOver,
	Lighter,
	SourceAtop,
	SourceIn,
	SourceOut,
	SourceOver,
	Xor
}
enum LineCap
{
	Butt,
	Round,
	Square
}
enum LineJoin
{
	Miter,
	Round,
	Bevel
}
enum TextAlign
{
	Start,
	End,
	Left,
	Right,
	Center
}
enum TextBaseline
{
	Top,
	Hanging,
	Middle,
	Bottom,
	Alphabetic,
	Ideographic
}
class SVGElement extends XmlElement
{
	get ClassName(): SVGAnimatedString
	{
		return null;
	}
	new set Id(value: string)
	{
	}
	new get Id(): string
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnBlur(value: (event: Event) => void)
	{
	}
	get OnBlur(): (event: Event) => void
	{
		return null;
	}
	set OnCanplay(value: (event: Event) => void)
	{
	}
	get OnCanplay(): (event: Event) => void
	{
		return null;
	}
	set OnCanplaythrough(value: (event: Event) => void)
	{
	}
	get OnCanplaythrough(): (event: Event) => void
	{
		return null;
	}
	set OnChange(value: (event: Event) => void)
	{
	}
	get OnChange(): (event: Event) => void
	{
		return null;
	}
	set OnClick(value: (event: Event) => void)
	{
	}
	get OnClick(): (event: Event) => void
	{
		return null;
	}
	set OnContextmenu(value: (event: Event) => void)
	{
	}
	get OnContextmenu(): (event: Event) => void
	{
		return null;
	}
	set OnCopy(value: (event: Event) => void)
	{
	}
	get OnCopy(): (event: Event) => void
	{
		return null;
	}
	set OnCut(value: (event: Event) => void)
	{
	}
	get OnCut(): (event: Event) => void
	{
		return null;
	}
	set OnDblclick(value: (event: Event) => void)
	{
	}
	get OnDblclick(): (event: Event) => void
	{
		return null;
	}
	set OnDrag(value: (event: Event) => void)
	{
	}
	get OnDrag(): (event: Event) => void
	{
		return null;
	}
	set OnDragend(value: (event: Event) => void)
	{
	}
	get OnDragend(): (event: Event) => void
	{
		return null;
	}
	set OnDragenter(value: (event: Event) => void)
	{
	}
	get OnDragenter(): (event: Event) => void
	{
		return null;
	}
	set OnDragleave(value: (event: Event) => void)
	{
	}
	get OnDragleave(): (event: Event) => void
	{
		return null;
	}
	set OnDragover(value: (event: Event) => void)
	{
	}
	get OnDragover(): (event: Event) => void
	{
		return null;
	}
	set OnDragstart(value: (event: Event) => void)
	{
	}
	get OnDragstart(): (event: Event) => void
	{
		return null;
	}
	set OnDrop(value: (event: Event) => void)
	{
	}
	get OnDrop(): (event: Event) => void
	{
		return null;
	}
	set OnDurationchange(value: (event: Event) => void)
	{
	}
	get OnDurationchange(): (event: Event) => void
	{
		return null;
	}
	set OnEmptied(value: (event: Event) => void)
	{
	}
	get OnEmptied(): (event: Event) => void
	{
		return null;
	}
	set OnEnded(value: (event: Event) => void)
	{
	}
	get OnEnded(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnFocus(value: (event: Event) => void)
	{
	}
	get OnFocus(): (event: Event) => void
	{
		return null;
	}
	set OnInput(value: (event: Event) => void)
	{
	}
	get OnInput(): (event: Event) => void
	{
		return null;
	}
	set OnInvalid(value: (event: Event) => void)
	{
	}
	get OnInvalid(): (event: Event) => void
	{
		return null;
	}
	set OnKeydown(value: (event: Event) => void)
	{
	}
	get OnKeydown(): (event: Event) => void
	{
		return null;
	}
	set OnKeypress(value: (event: Event) => void)
	{
	}
	get OnKeypress(): (event: Event) => void
	{
		return null;
	}
	set OnKeyup(value: (event: Event) => void)
	{
	}
	get OnKeyup(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadeddata(value: (event: Event) => void)
	{
	}
	get OnLoadeddata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadedmetadata(value: (event: Event) => void)
	{
	}
	get OnLoadedmetadata(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnMousedown(value: (event: Event) => void)
	{
	}
	get OnMousedown(): (event: Event) => void
	{
		return null;
	}
	set OnMouseenter(value: (event: Event) => void)
	{
	}
	get OnMouseenter(): (event: Event) => void
	{
		return null;
	}
	set OnMouseleave(value: (event: Event) => void)
	{
	}
	get OnMouseleave(): (event: Event) => void
	{
		return null;
	}
	set OnMousemove(value: (event: Event) => void)
	{
	}
	get OnMousemove(): (event: Event) => void
	{
		return null;
	}
	set OnMouseout(value: (event: Event) => void)
	{
	}
	get OnMouseout(): (event: Event) => void
	{
		return null;
	}
	set OnMouseover(value: (event: Event) => void)
	{
	}
	get OnMouseover(): (event: Event) => void
	{
		return null;
	}
	set OnMouseup(value: (event: Event) => void)
	{
	}
	get OnMouseup(): (event: Event) => void
	{
		return null;
	}
	set OnPaste(value: (event: Event) => void)
	{
	}
	get OnPaste(): (event: Event) => void
	{
		return null;
	}
	set OnPause(value: (event: Event) => void)
	{
	}
	get OnPause(): (event: Event) => void
	{
		return null;
	}
	set OnPlay(value: (event: Event) => void)
	{
	}
	get OnPlay(): (event: Event) => void
	{
		return null;
	}
	set OnPlaying(value: (event: Event) => void)
	{
	}
	get OnPlaying(): (event: Event) => void
	{
		return null;
	}
	set OnPointercancel(value: (event: Event) => void)
	{
	}
	get OnPointercancel(): (event: Event) => void
	{
		return null;
	}
	set OnPointerdown(value: (event: Event) => void)
	{
	}
	get OnPointerdown(): (event: Event) => void
	{
		return null;
	}
	set OnPointerenter(value: (event: Event) => void)
	{
	}
	get OnPointerenter(): (event: Event) => void
	{
		return null;
	}
	set OnPointerleave(value: (event: Event) => void)
	{
	}
	get OnPointerleave(): (event: Event) => void
	{
		return null;
	}
	set OnPointermove(value: (event: Event) => void)
	{
	}
	get OnPointermove(): (event: Event) => void
	{
		return null;
	}
	set OnPointerout(value: (event: Event) => void)
	{
	}
	get OnPointerout(): (event: Event) => void
	{
		return null;
	}
	set OnPointerover(value: (event: Event) => void)
	{
	}
	get OnPointerover(): (event: Event) => void
	{
		return null;
	}
	set OnPointerup(value: (event: Event) => void)
	{
	}
	get OnPointerup(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnRatechange(value: (event: Event) => void)
	{
	}
	get OnRatechange(): (event: Event) => void
	{
		return null;
	}
	set OnReset(value: (event: Event) => void)
	{
	}
	get OnReset(): (event: Event) => void
	{
		return null;
	}
	set OnScroll(value: (event: Event) => void)
	{
	}
	get OnScroll(): (event: Event) => void
	{
		return null;
	}
	set OnSeeked(value: (event: Event) => void)
	{
	}
	get OnSeeked(): (event: Event) => void
	{
		return null;
	}
	set OnSeeking(value: (event: Event) => void)
	{
	}
	get OnSeeking(): (event: Event) => void
	{
		return null;
	}
	set OnSelect(value: (event: Event) => void)
	{
	}
	get OnSelect(): (event: Event) => void
	{
		return null;
	}
	set OnShow(value: (event: Event) => void)
	{
	}
	get OnShow(): (event: Event) => void
	{
		return null;
	}
	set OnStalled(value: (event: Event) => void)
	{
	}
	get OnStalled(): (event: Event) => void
	{
		return null;
	}
	set OnSubmit(value: (event: Event) => void)
	{
	}
	get OnSubmit(): (event: Event) => void
	{
		return null;
	}
	set OnSuspend(value: (event: Event) => void)
	{
	}
	get OnSuspend(): (event: Event) => void
	{
		return null;
	}
	set OnTimeupdate(value: (event: Event) => void)
	{
	}
	get OnTimeupdate(): (event: Event) => void
	{
		return null;
	}
	set OnTouchcancel(value: (event: Event) => void)
	{
	}
	get OnTouchcancel(): (event: Event) => void
	{
		return null;
	}
	set OnTouchend(value: (event: Event) => void)
	{
	}
	get OnTouchend(): (event: Event) => void
	{
		return null;
	}
	set OnTouchenter(value: (event: Event) => void)
	{
	}
	get OnTouchenter(): (event: Event) => void
	{
		return null;
	}
	set OnTouchleave(value: (event: Event) => void)
	{
	}
	get OnTouchleave(): (event: Event) => void
	{
		return null;
	}
	set OnTouchmove(value: (event: Event) => void)
	{
	}
	get OnTouchmove(): (event: Event) => void
	{
		return null;
	}
	set OnTouchstart(value: (event: Event) => void)
	{
	}
	get OnTouchstart(): (event: Event) => void
	{
		return null;
	}
	set OnVolumechange(value: (event: Event) => void)
	{
	}
	get OnVolumechange(): (event: Event) => void
	{
		return null;
	}
	set OnWaiting(value: (event: Event) => void)
	{
	}
	get OnWaiting(): (event: Event) => void
	{
		return null;
	}
	get OwnerSVGElement(): SVGSVGElement
	{
		return null;
	}
	get Style(): Style
	{
		return null;
	}
	get ViewportElement(): SVGElement
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void): void;
	new AddEventListener(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGElementEvents, listener: (target: SVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class SVGGraphicsElement extends SVGElement
{
	get FarthestViewportElement(): SVGElement
	{
		return null;
	}
	get NearestViewportElement(): SVGElement
	{
		return null;
	}
	get RequiredExtensions(): SVGStringList
	{
		return null;
	}
	get RequiredFeatures(): SVGStringList
	{
		return null;
	}
	get SystemLanguage(): SVGStringList
	{
		return null;
	}
	get Transform(): SVGAnimatedTransformList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGGraphicsElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGGraphicsElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGGraphicsElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGGraphicsElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGGraphicsElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGGraphicsElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGGraphicsElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGGraphicsElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGGraphicsElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetBBox(): SVGRect
	{
		return null;
	}
	GetCTM(): SVGMatrix
	{
		return null;
	}
	GetScreenCTM(): SVGMatrix
	{
		return null;
	}
	GetTransformToElement(element: SVGGraphicsElement): SVGMatrix
	{
		return null;
	}
	HasExtension(extension: string): boolean
	{
		return false;
	}
	new RemoveEventListener(type: string, listener: (target: SVGGraphicsElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGGraphicsElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGGraphicsElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGGraphicsElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGGraphicsElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGGraphicsElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGGraphicsElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGGraphicsElementEvents, listener: (target: SVGGraphicsElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGGraphicsElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGGraphicsElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class SVGAElement extends SVGGraphicsElement
{
	set Download(value: string)
	{
	}
	get Download(): string
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get Target(): SVGAnimatedString
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void): void;
	new AddEventListener(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGAElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAElementEvents, listener: (target: SVGAElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGAElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGAlign
{
	None = 1,
	Unknown = 0,
	Xmaxymax = 10,
	Xmaxymid = 7,
	Xmaxymin = 4,
	Xmidymax = 9,
	Xmidymid = 6,
	Xmidymin = 3,
	Xminymax = 8,
	Xminymid = 5,
	Xminymin = 2
}
class SVGTextContentElement extends SVGGraphicsElement
{
	static LENGTHADJUST_SPACING: number = 1;
	static LENGTHADJUST_SPACINGANDGLYPHS: number = 2;
	static LENGTHADJUST_UNKNOWN: number = 0;
	get LengthAdjust(): SVGAnimatedEnumeration<SVGLengthAdjust>
	{
		return null;
	}
	get TextLength(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTextContentElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTextContentElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTextContentElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTextContentElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTextContentElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTextContentElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTextContentElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTextContentElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTextContentElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetCharNumAtPosition(point: SVGPoint): number
	{
		return 0;
	}
	GetComputedTextLength(): number
	{
		return 0.0;
	}
	GetEndPositionOfChar(charnum: number): SVGPoint
	{
		return null;
	}
	GetExtentOfChar(charnum: number): SVGRect
	{
		return null;
	}
	GetNumberOfChars(): number
	{
		return 0;
	}
	GetRotationOfChar(charnum: number): number
	{
		return 0.0;
	}
	GetStartPositionOfChar(charnum: number): SVGPoint
	{
		return null;
	}
	GetSubStringLength(charnum: number, nchars: number): number
	{
		return 0.0;
	}
	new RemoveEventListener(type: string, listener: (target: SVGTextContentElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTextContentElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTextContentElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTextContentElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTextContentElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTextContentElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTextContentElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTextContentElementEvents, listener: (target: SVGTextContentElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTextContentElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTextContentElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SelectSubString(charnum: number, nchars: number): void
	{
	}
}
class SVGTextPositioningElement extends SVGTextContentElement
{
	get Dx(): SVGAnimatedLengthList
	{
		return null;
	}
	get Dy(): SVGAnimatedLengthList
	{
		return null;
	}
	get Rotate(): SVGAnimatedNumberList
	{
		return null;
	}
	get X(): SVGAnimatedLengthList
	{
		return null;
	}
	get Y(): SVGAnimatedLengthList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTextPositioningElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTextPositioningElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTextPositioningElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTextPositioningElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTextPositioningElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTextPositioningElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTextPositioningElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTextPositioningElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTextPositioningElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTextPositioningElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTextPositioningElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTextPositioningElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTextPositioningElementEvents, listener: (target: SVGTextPositioningElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTextPositioningElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTextPositioningElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class SVGAltGlyphElement extends SVGTextPositioningElement
{
	set Format(value: string)
	{
	}
	get Format(): string
	{
		return null;
	}
	set GlyphRef(value: string)
	{
	}
	get GlyphRef(): string
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAltGlyphElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAltGlyphElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAltGlyphElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAltGlyphElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAltGlyphElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAltGlyphElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAltGlyphElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAltGlyphElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAltGlyphElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAltGlyphElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAltGlyphElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAltGlyphElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAltGlyphElementEvents, listener: (target: SVGAltGlyphElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAltGlyphElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAltGlyphElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGAltGlyphElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGAngle extends NObject
{
	static SVG_ANGLETYPE_DEG: number = 2;
	static SVG_ANGLETYPE_GRAD: number = 4;
	static SVG_ANGLETYPE_RAD: number = 3;
	static SVG_ANGLETYPE_UNKNOWN: number = 0;
	static SVG_ANGLETYPE_UNSPECIFIED: number = 1;
	get UnitType(): SVGAngleUnitType
	{
		return SVGAngleUnitType.Unknown;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	set ValueAsString(value: string)
	{
	}
	get ValueAsString(): string
	{
		return null;
	}
	set ValueInSpecifiedUnits(value: number)
	{
	}
	get ValueInSpecifiedUnits(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	ConvertToSpecifiedUnits(unitType: SVGAngleUnitType): void
	{
	}
	NewValueSpecifiedUnits(unitType: SVGAngleUnitType, valueInSpecifiedUnits: number): void
	{
	}
}
enum SVGAngleUnitType
{
	Deg = 2,
	Grad = 4,
	Rad = 3,
	Unknown = 0,
	Unspecified
}
class SVGAnimatedAngle extends NObject
{
	get AnimVal(): SVGAngle
	{
		return null;
	}
	get BaseVal(): SVGAngle
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedBoolean extends NObject
{
	get AnimVal(): boolean
	{
		return false;
	}
	set BaseVal(value: boolean)
	{
	}
	get BaseVal(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedInteger extends NObject
{
	get AnimVal(): number
	{
		return 0;
	}
	set BaseVal(value: number)
	{
	}
	get BaseVal(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedLength extends NObject
{
	get AnimVal(): SVGLength
	{
		return null;
	}
	get BaseVal(): SVGLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedLengthList extends NObject
{
	get AnimVal(): SVGLengthList
	{
		return null;
	}
	get BaseVal(): SVGLengthList
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedNumber extends NObject
{
	get AnimVal(): number
	{
		return 0.0;
	}
	set BaseVal(value: number)
	{
	}
	get BaseVal(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedNumberList extends NObject
{
	get AnimVal(): SVGNumberList
	{
		return null;
	}
	get BaseVal(): SVGNumberList
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedPreserveAspectRatio extends NObject
{
	get AnimVal(): SVGPreserveAspectRatio
	{
		return null;
	}
	get BaseVal(): SVGPreserveAspectRatio
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedRect extends NObject
{
	get AnimVal(): SVGRect
	{
		return null;
	}
	get BaseVal(): SVGRect
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedString extends NObject
{
	get AnimVal(): string
	{
		return null;
	}
	set BaseVal(value: string)
	{
	}
	get BaseVal(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedTransformList extends NObject
{
	get AnimVal(): SVGTransformList
	{
		return null;
	}
	get BaseVal(): SVGTransformList
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimationElement extends SVGElement
{
	get RequiredExtensions(): SVGStringList
	{
		return null;
	}
	get RequiredFeatures(): SVGStringList
	{
		return null;
	}
	get SystemLanguage(): SVGStringList
	{
		return null;
	}
	get TargetElement(): SVGElement
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAnimationElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAnimationElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAnimationElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAnimationElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAnimationElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAnimationElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAnimationElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAnimationElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAnimationElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	BeginElement(): void
	{
	}
	BeginElementAt(offset: number): void
	{
	}
	EndElement(): void
	{
	}
	EndElementAt(offset: number): void
	{
	}
	GetCurrentTime(): number
	{
		return 0.0;
	}
	GetSimpleDuration(): number
	{
		return 0.0;
	}
	GetStartTime(): number
	{
		return 0.0;
	}
	HasExtension(extension: string): boolean
	{
		return false;
	}
	new RemoveEventListener(type: string, listener: (target: SVGAnimationElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAnimationElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAnimationElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAnimationElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAnimationElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAnimationElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAnimationElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAnimationElementEvents, listener: (target: SVGAnimationElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAnimationElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAnimationElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class SVGAnimateElement extends SVGAnimationElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAnimateElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAnimateElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAnimateElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAnimateElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAnimateElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAnimateElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAnimateElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAnimateElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAnimateElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGAnimateElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAnimateElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAnimateElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAnimateElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAnimateElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAnimateElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAnimateElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAnimateElementEvents, listener: (target: SVGAnimateElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAnimateElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAnimateElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGAnimateElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGAnimateMotionElement extends SVGAnimationElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAnimateMotionElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAnimateMotionElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAnimateMotionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAnimateMotionElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAnimateMotionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAnimateMotionElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAnimateMotionElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAnimateMotionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAnimateMotionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAnimateMotionElementEvents, listener: (target: SVGAnimateMotionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAnimateMotionElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAnimateMotionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGAnimateMotionElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGAnimateTransformElement extends SVGAnimationElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGAnimateTransformElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGAnimateTransformElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGAnimateTransformElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGAnimateTransformElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGAnimateTransformElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGAnimateTransformElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGAnimateTransformElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGAnimateTransformElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGAnimateTransformElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGAnimateTransformElementEvents, listener: (target: SVGAnimateTransformElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGAnimateTransformElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGAnimateTransformElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGAnimateTransformElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGAnimationElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGCircleElement extends SVGGraphicsElement
{
	get Cx(): SVGAnimatedLength
	{
		return null;
	}
	get Cy(): SVGAnimatedLength
	{
		return null;
	}
	get R(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGCircleElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGCircleElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGCircleElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGCircleElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGCircleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGCircleElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGCircleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGCircleElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGCircleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGCircleElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGCircleElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGCircleElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGCircleElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGCircleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGCircleElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGCircleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGCircleElementEvents, listener: (target: SVGCircleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGCircleElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGCircleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGCircleElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGClipPathElement extends SVGElement
{
	static SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number = 2;
	static SVG_UNIT_TYPE_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_USERSPACEONUSE: number = 1;
	get ClipPathUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get Transform(): SVGAnimatedTransformList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGClipPathElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGClipPathElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGClipPathElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGClipPathElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGClipPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGClipPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGClipPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGClipPathElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGClipPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGClipPathElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGClipPathElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGClipPathElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGClipPathElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGClipPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGClipPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGClipPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGClipPathElementEvents, listener: (target: SVGClipPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGClipPathElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGClipPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGClipPathElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGComponentTransferFunctionElement extends SVGElement
{
	static SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number = 3;
	static SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number = 5;
	static SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number = 1;
	static SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number = 4;
	static SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number = 2;
	static SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number = 0;
	get Amplitude(): SVGAnimatedNumber
	{
		return null;
	}
	get Exponent(): SVGAnimatedNumber
	{
		return null;
	}
	get Intercept(): SVGAnimatedNumber
	{
		return null;
	}
	get Offset(): SVGAnimatedNumber
	{
		return null;
	}
	get Slope(): SVGAnimatedNumber
	{
		return null;
	}
	get TableValues(): SVGAnimatedNumberList
	{
		return null;
	}
	get Type(): SVGAnimatedEnumeration<SVGComponentTransferType>
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGComponentTransferFunctionElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGComponentTransferFunctionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGComponentTransferFunctionElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGComponentTransferFunctionElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGComponentTransferFunctionElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGComponentTransferFunctionElementEvents, listener: (target: SVGComponentTransferFunctionElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGComponentTransferFunctionElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGComponentTransferFunctionElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGComponentTransferType
{
	Discrete = 3,
	Gamma = 5,
	Identity = 1,
	Linear = 4,
	Table = 2,
	Unknown = 0
}
class SVGDefsElement extends SVGGraphicsElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGDefsElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGDefsElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGDefsElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGDefsElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGDefsElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGDefsElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGDefsElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGDefsElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGDefsElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGDefsElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGDefsElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGDefsElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGDefsElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGDefsElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGDefsElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGDefsElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGDefsElementEvents, listener: (target: SVGDefsElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGDefsElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGDefsElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGDefsElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGDescElement extends SVGElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGDescElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDescElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGDescElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGDescElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGDescElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void): void;
	new AddEventListener(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDescElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGDescElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGDescElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGDescElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGDescElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGDescElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGDescElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGDescElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGDescElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGDescElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGDescElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGDescElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGDescElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGDescElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGDescElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGDescElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGDescElementEvents, listener: (target: SVGDescElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGDescElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGDescElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGDescElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGDocument extends DocumentBase
{
	get Domain(): string
	{
		return null;
	}
	get RootElement(): SVGElement
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGDocument, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDocumentEvents, listener: () => void): void;
	new AddEventListener(type: SVGDocumentEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGDocumentEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGDocumentEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void): void;
	new AddEventListener(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGDocumentEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGDocumentEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGDocument, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGDocumentEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGDocumentEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGDocumentEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGDocumentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGDocumentEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGDocumentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGDocument, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGDocumentEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGDocument, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGDocumentEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGDocumentEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGDocumentEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGDocumentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGDocumentEvents, listener: (target: SVGDocument, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGDocumentEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGDocumentEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGDocumentEvents
{
	Abort,
	Afterscriptexecute,
	Beforescriptexecute,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Readystatechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGEllipseElement extends SVGGraphicsElement
{
	get Cx(): SVGAnimatedLength
	{
		return null;
	}
	get Cy(): SVGAnimatedLength
	{
		return null;
	}
	get Rx(): SVGAnimatedLength
	{
		return null;
	}
	get Ry(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGEllipseElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGEllipseElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGEllipseElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGEllipseElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGEllipseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGEllipseElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGEllipseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGEllipseElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGEllipseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGEllipseElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGEllipseElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGEllipseElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGEllipseElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGEllipseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGEllipseElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGEllipseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGEllipseElementEvents, listener: (target: SVGEllipseElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGEllipseElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGEllipseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGEllipseElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEBlendElement extends SVGElement
{
	static SVG_FEBLEND_MODE_DARKEN: number = 4;
	static SVG_FEBLEND_MODE_LIGHTEN: number = 5;
	static SVG_FEBLEND_MODE_MULTIPLY: number = 2;
	static SVG_FEBLEND_MODE_NORMAL: number = 1;
	static SVG_FEBLEND_MODE_SCREEN: number = 3;
	static SVG_FEBLEND_MODE_UNKNOWN: number = 0;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get In2(): SVGAnimatedString
	{
		return null;
	}
	get Mode(): SVGAnimatedEnumeration<SVGFEBlendMode>
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEBlendElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEBlendElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEBlendElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEBlendElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEBlendElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEBlendElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEBlendElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEBlendElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEBlendElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEBlendElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEBlendElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEBlendElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEBlendElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEBlendElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEBlendElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEBlendElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEBlendElementEvents, listener: (target: SVGFEBlendElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEBlendElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEBlendElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEBlendElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFEBlendMode
{
	Darken = 4,
	Lighten,
	Multiply = 2,
	Normal = 1,
	Screen = 3,
	Unknown = 0
}
class SVGFEColorMatrixElement extends SVGElement
{
	static SVG_FECOLORMATRIX_TYPE_HUEROTATE: number = 3;
	static SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number = 4;
	static SVG_FECOLORMATRIX_TYPE_MATRIX: number = 1;
	static SVG_FECOLORMATRIX_TYPE_SATURATE: number = 2;
	static SVG_FECOLORMATRIX_TYPE_UNKNOWN: number = 0;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Type(): SVGAnimatedEnumeration<SVGFEColorMatrixType>
	{
		return null;
	}
	get Values(): SVGAnimatedNumberList
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEColorMatrixElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEColorMatrixElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEColorMatrixElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEColorMatrixElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEColorMatrixElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEColorMatrixElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEColorMatrixElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEColorMatrixElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEColorMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEColorMatrixElementEvents, listener: (target: SVGFEColorMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEColorMatrixElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEColorMatrixElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEColorMatrixElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFEColorMatrixType
{
	Huerotate = 3,
	Luminancetoalpha,
	Matrix = 1,
	Saturate,
	Unknown = 0
}
class SVGFEComponentTransferElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEComponentTransferElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEComponentTransferElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEComponentTransferElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEComponentTransferElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEComponentTransferElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEComponentTransferElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEComponentTransferElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEComponentTransferElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEComponentTransferElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEComponentTransferElementEvents, listener: (target: SVGFEComponentTransferElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEComponentTransferElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEComponentTransferElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEComponentTransferElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFECompositeElement extends SVGElement
{
	static SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number = 6;
	static SVG_FECOMPOSITE_OPERATOR_ATOP: number = 4;
	static SVG_FECOMPOSITE_OPERATOR_IN: number = 2;
	static SVG_FECOMPOSITE_OPERATOR_OUT: number = 3;
	static SVG_FECOMPOSITE_OPERATOR_OVER: number = 1;
	static SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number = 0;
	static SVG_FECOMPOSITE_OPERATOR_XOR: number = 5;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get In2(): SVGAnimatedString
	{
		return null;
	}
	get K1(): SVGAnimatedNumber
	{
		return null;
	}
	get K2(): SVGAnimatedNumber
	{
		return null;
	}
	get K3(): SVGAnimatedNumber
	{
		return null;
	}
	get K4(): SVGAnimatedNumber
	{
		return null;
	}
	get Operator(): SVGAnimatedEnumeration<SVGFECompositeOperator>
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFECompositeElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFECompositeElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFECompositeElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFECompositeElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFECompositeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFECompositeElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFECompositeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFECompositeElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFECompositeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFECompositeElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFECompositeElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFECompositeElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFECompositeElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFECompositeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFECompositeElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFECompositeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFECompositeElementEvents, listener: (target: SVGFECompositeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFECompositeElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFECompositeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFECompositeElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFECompositeOperator
{
	Arithmetic = 6,
	Atop = 4,
	In = 2,
	Out,
	Over = 1,
	Unknown = 0,
	Xor = 5
}
enum SVGFEConvolveMatrixEdgeMode
{
	Duplicate = 1,
	None = 3,
	Unknown = 0,
	Wrap = 2
}
class SVGFEConvolveMatrixElement extends SVGElement
{
	static SVG_EDGEMODE_DUPLICATE: number = 1;
	static SVG_EDGEMODE_NONE: number = 3;
	static SVG_EDGEMODE_UNKNOWN: number = 0;
	static SVG_EDGEMODE_WRAP: number = 2;
	get Bias(): SVGAnimatedNumber
	{
		return null;
	}
	get Divisor(): SVGAnimatedNumber
	{
		return null;
	}
	get EdgeMode(): SVGAnimatedEnumeration<SVGFEConvolveMatrixEdgeMode>
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get KernelMatrix(): SVGAnimatedNumberList
	{
		return null;
	}
	get KernelUnitLengthX(): SVGAnimatedNumber
	{
		return null;
	}
	get KernelUnitLengthY(): SVGAnimatedNumber
	{
		return null;
	}
	get OrderX(): SVGAnimatedInteger
	{
		return null;
	}
	get OrderY(): SVGAnimatedInteger
	{
		return null;
	}
	get PreserveAlpha(): SVGAnimatedBoolean
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get TargetX(): SVGAnimatedInteger
	{
		return null;
	}
	get TargetY(): SVGAnimatedInteger
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEConvolveMatrixElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEConvolveMatrixElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEConvolveMatrixElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEConvolveMatrixElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEConvolveMatrixElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEConvolveMatrixElementEvents, listener: (target: SVGFEConvolveMatrixElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEConvolveMatrixElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEConvolveMatrixElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEDiffuseLightingElement extends SVGElement
{
	get DiffuseConstant(): SVGAnimatedNumber
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get KernelUnitLengthX(): SVGAnimatedNumber
	{
		return null;
	}
	get KernelUnitLengthY(): SVGAnimatedNumber
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get SurfaceScale(): SVGAnimatedNumber
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEDiffuseLightingElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEDiffuseLightingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEDiffuseLightingElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEDiffuseLightingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEDiffuseLightingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEDiffuseLightingElementEvents, listener: (target: SVGFEDiffuseLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEDiffuseLightingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEDiffuseLightingElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFEDisplacementMapChannelSelector
{
	A = 4,
	B = 3,
	G = 2,
	R = 1,
	Unknown = 0
}
class SVGFEDisplacementMapElement extends SVGElement
{
	static SVG_CHANNEL_A: number = 4;
	static SVG_CHANNEL_B: number = 3;
	static SVG_CHANNEL_G: number = 2;
	static SVG_CHANNEL_R: number = 1;
	static SVG_CHANNEL_UNKNOWN: number = 0;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get In2(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Scale(): SVGAnimatedNumber
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get XChannelSelector(): SVGAnimatedEnumeration<SVGFEDisplacementMapChannelSelector>
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	get YChannelSelector(): SVGAnimatedEnumeration<SVGFEDisplacementMapChannelSelector>
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEDisplacementMapElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEDisplacementMapElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEDisplacementMapElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEDisplacementMapElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEDisplacementMapElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEDisplacementMapElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEDisplacementMapElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEDisplacementMapElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEDisplacementMapElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEDisplacementMapElementEvents, listener: (target: SVGFEDisplacementMapElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEDisplacementMapElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEDisplacementMapElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEDisplacementMapElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEDistantLightElement extends SVGElement
{
	get Azimuth(): SVGAnimatedNumber
	{
		return null;
	}
	get Elevation(): SVGAnimatedNumber
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEDistantLightElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEDistantLightElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEDistantLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEDistantLightElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEDistantLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEDistantLightElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEDistantLightElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEDistantLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEDistantLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEDistantLightElementEvents, listener: (target: SVGFEDistantLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEDistantLightElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEDistantLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEDistantLightElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEDropShadowElement extends SVGElement
{
	get Dx(): SVGAnimatedNumber
	{
		return null;
	}
	get Dy(): SVGAnimatedNumber
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get StdDeviationX(): SVGAnimatedNumber
	{
		return null;
	}
	get StdDeviationY(): SVGAnimatedNumber
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEDropShadowElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEDropShadowElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEDropShadowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEDropShadowElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEDropShadowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEDropShadowElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEDropShadowElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEDropShadowElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEDropShadowElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEDropShadowElementEvents, listener: (target: SVGFEDropShadowElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEDropShadowElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEDropShadowElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SetStdDeviation(stdDeviationX: number, stdDeviationY: number): void
	{
	}
}
enum SVGFEDropShadowElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEFloodElement extends SVGElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEFloodElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEFloodElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEFloodElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEFloodElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEFloodElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEFloodElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEFloodElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEFloodElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEFloodElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEFloodElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEFloodElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEFloodElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEFloodElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEFloodElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEFloodElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEFloodElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEFloodElementEvents, listener: (target: SVGFEFloodElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEFloodElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEFloodElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEFloodElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEFuncAElement extends SVGComponentTransferFunctionElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEFuncAElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEFuncAElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEFuncAElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEFuncAElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEFuncAElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEFuncAElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEFuncAElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEFuncAElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEFuncAElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEFuncAElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEFuncAElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEFuncAElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEFuncAElementEvents, listener: (target: SVGFEFuncAElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEFuncAElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEFuncAElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEFuncAElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEFuncBElement extends SVGComponentTransferFunctionElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEFuncBElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEFuncBElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEFuncBElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEFuncBElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEFuncBElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEFuncBElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEFuncBElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEFuncBElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEFuncBElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEFuncBElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEFuncBElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEFuncBElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEFuncBElementEvents, listener: (target: SVGFEFuncBElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEFuncBElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEFuncBElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEFuncBElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEFuncGElement extends SVGComponentTransferFunctionElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEFuncGElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEFuncGElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEFuncGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEFuncGElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEFuncGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEFuncGElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEFuncGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEFuncGElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEFuncGElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEFuncGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEFuncGElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEFuncGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEFuncGElementEvents, listener: (target: SVGFEFuncGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEFuncGElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEFuncGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEFuncGElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEFuncRElement extends SVGComponentTransferFunctionElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEFuncRElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEFuncRElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEFuncRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEFuncRElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEFuncRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEFuncRElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEFuncRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEFuncRElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEFuncRElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEFuncRElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEFuncRElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEFuncRElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEFuncRElementEvents, listener: (target: SVGFEFuncRElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEFuncRElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEFuncRElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEFuncRElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEGaussianBlurElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get StdDeviationX(): SVGAnimatedNumber
	{
		return null;
	}
	get StdDeviationY(): SVGAnimatedNumber
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEGaussianBlurElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEGaussianBlurElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEGaussianBlurElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEGaussianBlurElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEGaussianBlurElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEGaussianBlurElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEGaussianBlurElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEGaussianBlurElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEGaussianBlurElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEGaussianBlurElementEvents, listener: (target: SVGFEGaussianBlurElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEGaussianBlurElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEGaussianBlurElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SetStdDeviation(stdDeviationX: number, stdDeviationY: number): void
	{
	}
}
enum SVGFEGaussianBlurElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEImageElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEImageElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEImageElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEImageElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEImageElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEImageElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEImageElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEImageElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEImageElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEImageElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEImageElementEvents, listener: (target: SVGFEImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEImageElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEImageElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEMergeElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEMergeElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEMergeElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEMergeElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEMergeElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEMergeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEMergeElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEMergeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEMergeElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEMergeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEMergeElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEMergeElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEMergeElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEMergeElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEMergeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEMergeElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEMergeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEMergeElementEvents, listener: (target: SVGFEMergeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEMergeElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEMergeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEMergeElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEMergeNodeElement extends SVGElement
{
	get In1(): SVGAnimatedString
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEMergeNodeElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEMergeNodeElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEMergeNodeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEMergeNodeElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEMergeNodeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEMergeNodeElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEMergeNodeElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEMergeNodeElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEMergeNodeElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEMergeNodeElementEvents, listener: (target: SVGFEMergeNodeElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEMergeNodeElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEMergeNodeElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEMergeNodeElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEMorphologyElement extends SVGElement
{
	static SVG_MORPHOLOGY_OPERATOR_DILATE: number = 2;
	static SVG_MORPHOLOGY_OPERATOR_ERODE: number = 1;
	static SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number = 0;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Operator(): SVGAnimatedEnumeration<SVGFEMorphologyOperator>
	{
		return null;
	}
	get RadiusX(): SVGAnimatedNumber
	{
		return null;
	}
	get RadiusY(): SVGAnimatedNumber
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEMorphologyElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEMorphologyElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEMorphologyElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEMorphologyElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEMorphologyElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEMorphologyElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEMorphologyElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEMorphologyElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEMorphologyElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEMorphologyElementEvents, listener: (target: SVGFEMorphologyElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEMorphologyElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEMorphologyElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEMorphologyElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFEMorphologyOperator
{
	Dilate = 2,
	Erode = 1,
	Unknown = 0
}
class SVGFEOffsetElement extends SVGElement
{
	get Dx(): SVGAnimatedNumber
	{
		return null;
	}
	get Dy(): SVGAnimatedNumber
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEOffsetElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEOffsetElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEOffsetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEOffsetElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEOffsetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEOffsetElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEOffsetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEOffsetElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEOffsetElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEOffsetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEOffsetElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEOffsetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEOffsetElementEvents, listener: (target: SVGFEOffsetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEOffsetElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEOffsetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEOffsetElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFEPointLightElement extends SVGElement
{
	get X(): SVGAnimatedNumber
	{
		return null;
	}
	get Y(): SVGAnimatedNumber
	{
		return null;
	}
	get Z(): SVGAnimatedNumber
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFEPointLightElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFEPointLightElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFEPointLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFEPointLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFEPointLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFEPointLightElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFEPointLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFEPointLightElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFEPointLightElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFEPointLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFEPointLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFEPointLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFEPointLightElementEvents, listener: (target: SVGFEPointLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFEPointLightElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFEPointLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFEPointLightElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFESpecularLightingElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get KernelUnitLengthX(): SVGAnimatedNumber
	{
		return null;
	}
	get KernelUnitLengthY(): SVGAnimatedNumber
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get SpecularConstant(): SVGAnimatedNumber
	{
		return null;
	}
	get SpecularExponent(): SVGAnimatedNumber
	{
		return null;
	}
	get SurfaceScale(): SVGAnimatedNumber
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFESpecularLightingElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFESpecularLightingElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFESpecularLightingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFESpecularLightingElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFESpecularLightingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFESpecularLightingElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFESpecularLightingElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFESpecularLightingElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFESpecularLightingElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFESpecularLightingElementEvents, listener: (target: SVGFESpecularLightingElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFESpecularLightingElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFESpecularLightingElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFESpecularLightingElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFESpotLightElement extends SVGElement
{
	get LimitingConeAngle(): SVGAnimatedNumber
	{
		return null;
	}
	get PointsAtX(): SVGAnimatedNumber
	{
		return null;
	}
	get PointsAtY(): SVGAnimatedNumber
	{
		return null;
	}
	get PointsAtZ(): SVGAnimatedNumber
	{
		return null;
	}
	get SpecularExponent(): SVGAnimatedNumber
	{
		return null;
	}
	get X(): SVGAnimatedNumber
	{
		return null;
	}
	get Y(): SVGAnimatedNumber
	{
		return null;
	}
	get Z(): SVGAnimatedNumber
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFESpotLightElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFESpotLightElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFESpotLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFESpotLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFESpotLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFESpotLightElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFESpotLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFESpotLightElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFESpotLightElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFESpotLightElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFESpotLightElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFESpotLightElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFESpotLightElementEvents, listener: (target: SVGFESpotLightElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFESpotLightElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFESpotLightElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFESpotLightElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFEStitchType
{
	Nostitch = 2,
	Stitch = 1,
	Unknown = 0
}
class SVGFETileElement extends SVGElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get In1(): SVGAnimatedString
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFETileElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFETileElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFETileElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFETileElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFETileElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFETileElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFETileElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFETileElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFETileElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFETileElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFETileElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFETileElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFETileElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFETileElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFETileElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFETileElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFETileElementEvents, listener: (target: SVGFETileElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFETileElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFETileElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFETileElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGFETurbulenceElement extends SVGElement
{
	static SVG_STITCHTYPE_NOSTITCH: number = 2;
	static SVG_STITCHTYPE_STITCH: number = 1;
	static SVG_STITCHTYPE_UNKNOWN: number = 0;
	static SVG_TURBULENCE_TYPE_FRACTALNOISE: number = 1;
	static SVG_TURBULENCE_TYPE_TURBULENCE: number = 2;
	static SVG_TURBULENCE_TYPE_UNKNOWN: number = 0;
	get BaseFrequencyX(): SVGAnimatedNumber
	{
		return null;
	}
	get BaseFrequencyY(): SVGAnimatedNumber
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get NumOctaves(): SVGAnimatedInteger
	{
		return null;
	}
	get Result(): SVGAnimatedString
	{
		return null;
	}
	get Seed(): SVGAnimatedNumber
	{
		return null;
	}
	get StitchTiles(): SVGAnimatedEnumeration<SVGFEStitchType>
	{
		return null;
	}
	get Type(): SVGAnimatedEnumeration<SVGFETurbulenceType>
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFETurbulenceElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFETurbulenceElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFETurbulenceElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFETurbulenceElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFETurbulenceElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFETurbulenceElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFETurbulenceElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFETurbulenceElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFETurbulenceElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFETurbulenceElementEvents, listener: (target: SVGFETurbulenceElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFETurbulenceElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFETurbulenceElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFETurbulenceElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGFETurbulenceType
{
	Fractalnoise = 1,
	Turbulence,
	Unknown = 0
}
class SVGFilterElement extends SVGElement
{
	static SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number = 2;
	static SVG_UNIT_TYPE_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_USERSPACEONUSE: number = 1;
	get FilterUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get PrimitiveUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGFilterElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGFilterElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGFilterElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGFilterElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGFilterElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGFilterElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGFilterElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGFilterElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGFilterElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGFilterElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGFilterElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGFilterElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGFilterElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGFilterElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGFilterElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGFilterElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGFilterElementEvents, listener: (target: SVGFilterElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGFilterElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGFilterElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGFilterElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGForeignObjectElement extends SVGGraphicsElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGForeignObjectElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGForeignObjectElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGForeignObjectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGForeignObjectElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGForeignObjectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGForeignObjectElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGForeignObjectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGForeignObjectElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGForeignObjectElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGForeignObjectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGForeignObjectElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGForeignObjectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGForeignObjectElementEvents, listener: (target: SVGForeignObjectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGForeignObjectElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGForeignObjectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGForeignObjectElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGGElement extends SVGGraphicsElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGGElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGGElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGGElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void): void;
	new AddEventListener(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGGElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGGElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGGElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGGElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGGElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGGElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGGElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGGElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGGElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGGElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGGElementEvents, listener: (target: SVGGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGGElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGGElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGGradientElement extends SVGElement
{
	static SVG_SPREADMETHOD_PAD: number = 1;
	static SVG_SPREADMETHOD_REFLECT: number = 2;
	static SVG_SPREADMETHOD_REPEAT: number = 3;
	static SVG_SPREADMETHOD_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number = 2;
	static SVG_UNIT_TYPE_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_USERSPACEONUSE: number = 1;
	get GradientTransform(): SVGAnimatedTransformList
	{
		return null;
	}
	get GradientUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get SpreadMethod(): SVGAnimatedEnumeration<SVGSpreadMethod>
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGGradientElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGGradientElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGGradientElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGGradientElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGGradientElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGGradientElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGGradientElementEvents, listener: (target: SVGGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGGradientElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGGradientElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGGraphicsElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGImageElement extends SVGGraphicsElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGImageElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGImageElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGImageElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGImageElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void): void;
	new AddEventListener(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGImageElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGImageElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGImageElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGImageElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGImageElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGImageElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGImageElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGImageElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGImageElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGImageElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGImageElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGImageElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGImageElementEvents, listener: (target: SVGImageElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGImageElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGImageElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGImageElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGLength extends NObject
{
	static SVG_LENGTHTYPE_CM: number = 6;
	static SVG_LENGTHTYPE_EMS: number = 3;
	static SVG_LENGTHTYPE_EXS: number = 4;
	static SVG_LENGTHTYPE_IN: number = 8;
	static SVG_LENGTHTYPE_MM: number = 7;
	static SVG_LENGTHTYPE_NUMBER: number = 1;
	static SVG_LENGTHTYPE_PC: number = 10;
	static SVG_LENGTHTYPE_PERCENTAGE: number = 2;
	static SVG_LENGTHTYPE_PT: number = 9;
	static SVG_LENGTHTYPE_PX: number = 5;
	static SVG_LENGTHTYPE_UNKNOWN: number = 0;
	get UnitType(): SVGLengthType
	{
		return SVGLengthType.Unknown;
	}
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	set ValueAsString(value: string)
	{
	}
	get ValueAsString(): string
	{
		return null;
	}
	set ValueInSpecifiedUnits(value: number)
	{
	}
	get ValueInSpecifiedUnits(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	ConvertToSpecifiedUnits(unitType: SVGLengthType): void
	{
	}
	NewValueSpecifiedUnits(unitType: SVGLengthType, valueInSpecifiedUnits: number): void
	{
	}
}
enum SVGLengthAdjust
{
	Spacing = 1,
	Spacingandglyphs,
	Unknown = 0
}
class SVGLengthList extends NObject
{
	get_Item(index: number): SVGLength
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: SVGLength): SVGLength
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<SVGLength>
	{
		return null;
	}
	GetItem(index: number): SVGLength
	{
		return null;
	}
	Initialize(newItem: SVGLength): SVGLength
	{
		return null;
	}
	InsertItemBefore(newItem: SVGLength, index: number): SVGLength
	{
		return null;
	}
	RemoveItem(index: number): SVGLength
	{
		return null;
	}
	ReplaceItem(newItem: SVGLength, index: number): SVGLength
	{
		return null;
	}
}
enum SVGLengthType
{
	Cm = 6,
	Ems = 3,
	Exs,
	In = 8,
	Mm = 7,
	Number = 1,
	Pc = 10,
	Percentage = 2,
	Pt = 9,
	Px = 5,
	Unknown = 0
}
class SVGLinearGradientElement extends SVGGradientElement
{
	get X1(): SVGAnimatedLength
	{
		return null;
	}
	get X2(): SVGAnimatedLength
	{
		return null;
	}
	get Y1(): SVGAnimatedLength
	{
		return null;
	}
	get Y2(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGLinearGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGLinearGradientElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGLinearGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGLinearGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGLinearGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGLinearGradientElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGLinearGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGLinearGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGLinearGradientElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGLinearGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGLinearGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGLinearGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGLinearGradientElementEvents, listener: (target: SVGLinearGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGLinearGradientElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGLinearGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGLinearGradientElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGLineElement extends SVGGraphicsElement
{
	get X1(): SVGAnimatedLength
	{
		return null;
	}
	get X2(): SVGAnimatedLength
	{
		return null;
	}
	get Y1(): SVGAnimatedLength
	{
		return null;
	}
	get Y2(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGLineElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLineElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGLineElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGLineElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGLineElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void): void;
	new AddEventListener(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGLineElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGLineElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGLineElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGLineElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGLineElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGLineElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGLineElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGLineElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGLineElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGLineElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGLineElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGLineElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGLineElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGLineElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGLineElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGLineElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGLineElementEvents, listener: (target: SVGLineElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGLineElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGLineElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGLineElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGMarkerElement extends SVGElement
{
	static SVG_MARKER_ORIENT_ANGLE: number = 2;
	static SVG_MARKER_ORIENT_AUTO: number = 1;
	static SVG_MARKER_ORIENT_UNKNOWN: number = 0;
	static SVG_MARKERUNITS_STROKEWIDTH: number = 2;
	static SVG_MARKERUNITS_UNKNOWN: number = 0;
	static SVG_MARKERUNITS_USERSPACEONUSE: number = 1;
	get MarkerHeight(): SVGAnimatedLength
	{
		return null;
	}
	get MarkerUnits(): SVGAnimatedEnumeration<SVGMarkerUnits>
	{
		return null;
	}
	get MarkerWidth(): SVGAnimatedLength
	{
		return null;
	}
	get OrientAngle(): SVGAnimatedAngle
	{
		return null;
	}
	get OrientType(): SVGAnimatedEnumeration<SVGMarkerOrient>
	{
		return null;
	}
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get RefX(): SVGAnimatedLength
	{
		return null;
	}
	get RefY(): SVGAnimatedLength
	{
		return null;
	}
	get ViewBox(): SVGAnimatedRect
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGMarkerElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGMarkerElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGMarkerElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGMarkerElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGMarkerElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGMarkerElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGMarkerElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGMarkerElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGMarkerElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGMarkerElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGMarkerElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGMarkerElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGMarkerElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGMarkerElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGMarkerElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGMarkerElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGMarkerElementEvents, listener: (target: SVGMarkerElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGMarkerElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGMarkerElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SetOrientToAngle(angle: SVGAngle): void
	{
	}
	SetOrientToAuto(): void
	{
	}
}
enum SVGMarkerElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGMarkerOrient
{
	Angle = 2,
	Auto = 1,
	Unknown = 0
}
enum SVGMarkerUnits
{
	Strokewidth = 2,
	Unknown = 0,
	Userspaceonuse
}
class SVGMaskElement extends SVGElement
{
	static SVG_MASKTYPE_ALPHA: number = 1;
	static SVG_MASKTYPE_LUMINANCE: number = 0;
	static SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number = 2;
	static SVG_UNIT_TYPE_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_USERSPACEONUSE: number = 1;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get MaskContentUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get MaskUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGMaskElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGMaskElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGMaskElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGMaskElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGMaskElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGMaskElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGMaskElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGMaskElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGMaskElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGMaskElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGMaskElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGMaskElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGMaskElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGMaskElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGMaskElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGMaskElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGMaskElementEvents, listener: (target: SVGMaskElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGMaskElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGMaskElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGMaskElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGMatrix extends NObject
{
	set A(value: number)
	{
	}
	get A(): number
	{
		return 0.0;
	}
	set B(value: number)
	{
	}
	get B(): number
	{
		return 0.0;
	}
	set C(value: number)
	{
	}
	get C(): number
	{
		return 0.0;
	}
	set D(value: number)
	{
	}
	get D(): number
	{
		return 0.0;
	}
	set E(value: number)
	{
	}
	get E(): number
	{
		return 0.0;
	}
	set F(value: number)
	{
	}
	get F(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	FlipX(): SVGMatrix
	{
		return null;
	}
	FlipY(): SVGMatrix
	{
		return null;
	}
	Inverse(): SVGMatrix
	{
		return null;
	}
	Multiply(secondMatrix: SVGMatrix): SVGMatrix
	{
		return null;
	}
	Rotate(angle: number): SVGMatrix
	{
		return null;
	}
	RotateFromVector(x: number, y: number): SVGMatrix
	{
		return null;
	}
	Scale(scaleFactor: number): SVGMatrix
	{
		return null;
	}
	ScaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix
	{
		return null;
	}
	SkewX(angle: number): SVGMatrix
	{
		return null;
	}
	SkewY(angle: number): SVGMatrix
	{
		return null;
	}
	Translate(x: number, y: number): SVGMatrix
	{
		return null;
	}
}
enum SVGMeetOrSlice
{
	Meet = 1,
	Slice,
	Unknown = 0
}
class SVGMetadataElement extends SVGElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGMetadataElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGMetadataElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGMetadataElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGMetadataElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGMetadataElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGMetadataElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGMetadataElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGMetadataElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGMetadataElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGMetadataElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGMetadataElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGMetadataElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGMetadataElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGMetadataElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGMetadataElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGMetadataElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGMetadataElementEvents, listener: (target: SVGMetadataElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGMetadataElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGMetadataElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGMetadataElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGMPathElement extends SVGElement
{
	get Href(): SVGAnimatedString
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGMPathElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGMPathElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGMPathElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGMPathElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGMPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGMPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGMPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGMPathElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGMPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGMPathElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGMPathElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGMPathElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGMPathElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGMPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGMPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGMPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGMPathElementEvents, listener: (target: SVGMPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGMPathElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGMPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGMPathElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGNumber extends NObject
{
	set Value(value: number)
	{
	}
	get Value(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGNumberList extends NObject
{
	get_Item(index: number): SVGNumber
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: SVGNumber): SVGNumber
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<SVGNumber>
	{
		return null;
	}
	GetItem(index: number): SVGNumber
	{
		return null;
	}
	Initialize(newItem: SVGNumber): SVGNumber
	{
		return null;
	}
	InsertItemBefore(newItem: SVGNumber, index: number): SVGNumber
	{
		return null;
	}
	RemoveItem(index: number): SVGNumber
	{
		return null;
	}
	ReplaceItem(newItem: SVGNumber, index: number): SVGNumber
	{
		return null;
	}
}
class SVGPathElement extends SVGGraphicsElement
{
	get AnimatedPathSegList(): SVGPathSegList
	{
		return null;
	}
	get PathLength(): SVGAnimatedNumber
	{
		return null;
	}
	get PathSegList(): SVGPathSegList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGPathElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPathElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGPathElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGPathElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void): void;
	new AddEventListener(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPathElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGPathElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGPathElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGPathElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGPathElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	CreateSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs
	{
		return null;
	}
	CreateSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel
	{
		return null;
	}
	CreateSVGPathSegClosePath(): SVGPathSegClosePath
	{
		return null;
	}
	CreateSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs
	{
		return null;
	}
	CreateSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel
	{
		return null;
	}
	CreateSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs
	{
		return null;
	}
	CreateSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel
	{
		return null;
	}
	CreateSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs
	{
		return null;
	}
	CreateSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel
	{
		return null;
	}
	CreateSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs
	{
		return null;
	}
	CreateSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel
	{
		return null;
	}
	CreateSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs
	{
		return null;
	}
	CreateSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs
	{
		return null;
	}
	CreateSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel
	{
		return null;
	}
	CreateSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel
	{
		return null;
	}
	CreateSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs
	{
		return null;
	}
	CreateSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel
	{
		return null;
	}
	CreateSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs
	{
		return null;
	}
	CreateSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel
	{
		return null;
	}
	GetPathSegAtLength(distance: number): number
	{
		return 0;
	}
	GetPointAtLength(distance: number): SVGPoint
	{
		return null;
	}
	GetTotalLength(): number
	{
		return 0.0;
	}
	new RemoveEventListener(type: string, listener: (target: SVGPathElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGPathElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGPathElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGPathElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGPathElementEvents, listener: (target: SVGPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGPathElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGPathElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGPathSeg extends NObject
{
	static PATHSEG_ARC_ABS: number = 10;
	static PATHSEG_ARC_REL: number = 11;
	static PATHSEG_CLOSEPATH: number = 1;
	static PATHSEG_CURVETO_CUBIC_ABS: number = 6;
	static PATHSEG_CURVETO_CUBIC_REL: number = 7;
	static PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number = 16;
	static PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number = 17;
	static PATHSEG_CURVETO_QUADRATIC_ABS: number = 8;
	static PATHSEG_CURVETO_QUADRATIC_REL: number = 9;
	static PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number = 18;
	static PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number = 19;
	static PATHSEG_LINETO_ABS: number = 4;
	static PATHSEG_LINETO_HORIZONTAL_ABS: number = 12;
	static PATHSEG_LINETO_HORIZONTAL_REL: number = 13;
	static PATHSEG_LINETO_REL: number = 5;
	static PATHSEG_LINETO_VERTICAL_ABS: number = 14;
	static PATHSEG_LINETO_VERTICAL_REL: number = 15;
	static PATHSEG_MOVETO_ABS: number = 2;
	static PATHSEG_MOVETO_REL: number = 3;
	static PATHSEG_UNKNOWN: number = 0;
	get PathSegType(): SVGPathSegType
	{
		return SVGPathSegType.Unknown;
	}
	get PathSegTypeAsLetter(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegArcAbs extends SVGPathSeg
{
	set Angle(value: number)
	{
	}
	get Angle(): number
	{
		return 0.0;
	}
	set LargeArcFlag(value: boolean)
	{
	}
	get LargeArcFlag(): boolean
	{
		return false;
	}
	set R1(value: number)
	{
	}
	get R1(): number
	{
		return 0.0;
	}
	set R2(value: number)
	{
	}
	get R2(): number
	{
		return 0.0;
	}
	set SweepFlag(value: boolean)
	{
	}
	get SweepFlag(): boolean
	{
		return false;
	}
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegArcRel extends SVGPathSeg
{
	set Angle(value: number)
	{
	}
	get Angle(): number
	{
		return 0.0;
	}
	set LargeArcFlag(value: boolean)
	{
	}
	get LargeArcFlag(): boolean
	{
		return false;
	}
	set R1(value: number)
	{
	}
	get R1(): number
	{
		return 0.0;
	}
	set R2(value: number)
	{
	}
	get R2(): number
	{
		return 0.0;
	}
	set SweepFlag(value: boolean)
	{
	}
	get SweepFlag(): boolean
	{
		return false;
	}
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegClosePath extends SVGPathSeg
{
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoCubicAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X1(value: number)
	{
	}
	get X1(): number
	{
		return 0.0;
	}
	set X2(value: number)
	{
	}
	get X2(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y1(value: number)
	{
	}
	get Y1(): number
	{
		return 0.0;
	}
	set Y2(value: number)
	{
	}
	get Y2(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoCubicRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X1(value: number)
	{
	}
	get X1(): number
	{
		return 0.0;
	}
	set X2(value: number)
	{
	}
	get X2(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y1(value: number)
	{
	}
	get Y1(): number
	{
		return 0.0;
	}
	set Y2(value: number)
	{
	}
	get Y2(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X2(value: number)
	{
	}
	get X2(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y2(value: number)
	{
	}
	get Y2(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X2(value: number)
	{
	}
	get X2(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y2(value: number)
	{
	}
	get Y2(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X1(value: number)
	{
	}
	get X1(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y1(value: number)
	{
	}
	get Y1(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoQuadraticRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set X1(value: number)
	{
	}
	get X1(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	set Y1(value: number)
	{
	}
	get Y1(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoHorizontalAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoHorizontalRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoVerticalAbs extends SVGPathSeg
{
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegLinetoVerticalRel extends SVGPathSeg
{
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegList extends NObject
{
	get_Item(index: number): SVGPathSeg
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: SVGPathSeg): SVGPathSeg
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<SVGPathSeg>
	{
		return null;
	}
	GetItem(index: number): SVGPathSeg
	{
		return null;
	}
	Initialize(newItem: SVGPathSeg): SVGPathSeg
	{
		return null;
	}
	InsertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg
	{
		return null;
	}
	RemoveItem(index: number): SVGPathSeg
	{
		return null;
	}
	ReplaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg
	{
		return null;
	}
}
class SVGPathSegMovetoAbs extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGPathSegMovetoRel extends SVGPathSeg
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
enum SVGPathSegType
{
	ArcAbs = 10,
	ArcRel,
	Closepath = 1,
	CurvetoCubicAbs = 6,
	CurvetoCubicRel,
	CurvetoCubicSmoothAbs = 16,
	CurvetoCubicSmoothRel,
	CurvetoQuadraticAbs = 8,
	CurvetoQuadraticRel,
	CurvetoQuadraticSmoothAbs = 18,
	CurvetoQuadraticSmoothRel,
	LinetoAbs = 4,
	LinetoHorizontalAbs = 12,
	LinetoHorizontalRel,
	LinetoRel = 5,
	LinetoVerticalAbs = 14,
	LinetoVerticalRel,
	MovetoAbs = 2,
	MovetoRel,
	Unknown = 0
}
class SVGPatternElement extends SVGElement
{
	static SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number = 2;
	static SVG_UNIT_TYPE_UNKNOWN: number = 0;
	static SVG_UNIT_TYPE_USERSPACEONUSE: number = 1;
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get PatternContentUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get PatternTransform(): SVGAnimatedTransformList
	{
		return null;
	}
	get PatternUnits(): SVGAnimatedEnumeration<SVGUnitType>
	{
		return null;
	}
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get ViewBox(): SVGAnimatedRect
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGPatternElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGPatternElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGPatternElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGPatternElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGPatternElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGPatternElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGPatternElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGPatternElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGPatternElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGPatternElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGPatternElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGPatternElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGPatternElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGPatternElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGPatternElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGPatternElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGPatternElementEvents, listener: (target: SVGPatternElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGPatternElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGPatternElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGPatternElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGPoint extends NObject
{
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
	MatrixTransform(matrix: SVGMatrix): SVGPoint
	{
		return null;
	}
}
class SVGPointList extends NObject
{
	get_Item(index: number): SVGPoint
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: SVGPoint): SVGPoint
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<SVGPoint>
	{
		return null;
	}
	GetItem(index: number): SVGPoint
	{
		return null;
	}
	Initialize(newItem: SVGPoint): SVGPoint
	{
		return null;
	}
	InsertItemBefore(newItem: SVGPoint, index: number): SVGPoint
	{
		return null;
	}
	RemoveItem(index: number): SVGPoint
	{
		return null;
	}
	ReplaceItem(newItem: SVGPoint, index: number): SVGPoint
	{
		return null;
	}
}
class SVGPolygonElement extends SVGGraphicsElement
{
	get AnimatedPoints(): SVGPointList
	{
		return null;
	}
	get Points(): SVGPointList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGPolygonElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGPolygonElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGPolygonElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGPolygonElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGPolygonElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGPolygonElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGPolygonElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGPolygonElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGPolygonElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGPolygonElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGPolygonElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGPolygonElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGPolygonElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGPolygonElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGPolygonElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGPolygonElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGPolygonElementEvents, listener: (target: SVGPolygonElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGPolygonElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGPolygonElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGPolygonElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGPolylineElement extends SVGGraphicsElement
{
	get AnimatedPoints(): SVGPointList
	{
		return null;
	}
	get Points(): SVGPointList
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGPolylineElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGPolylineElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGPolylineElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGPolylineElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGPolylineElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGPolylineElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGPolylineElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGPolylineElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGPolylineElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGPolylineElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGPolylineElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGPolylineElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGPolylineElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGPolylineElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGPolylineElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGPolylineElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGPolylineElementEvents, listener: (target: SVGPolylineElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGPolylineElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGPolylineElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGPolylineElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGPreserveAspectRatio extends NObject
{
	static SVG_MEETORSLICE_MEET: number = 1;
	static SVG_MEETORSLICE_SLICE: number = 2;
	static SVG_MEETORSLICE_UNKNOWN: number = 0;
	static SVG_PRESERVEASPECTRATIO_NONE: number = 1;
	static SVG_PRESERVEASPECTRATIO_UNKNOWN: number = 0;
	static SVG_PRESERVEASPECTRATIO_XMAXYMAX: number = 10;
	static SVG_PRESERVEASPECTRATIO_XMAXYMID: number = 7;
	static SVG_PRESERVEASPECTRATIO_XMAXYMIN: number = 4;
	static SVG_PRESERVEASPECTRATIO_XMIDYMAX: number = 9;
	static SVG_PRESERVEASPECTRATIO_XMIDYMID: number = 6;
	static SVG_PRESERVEASPECTRATIO_XMIDYMIN: number = 3;
	static SVG_PRESERVEASPECTRATIO_XMINYMAX: number = 8;
	static SVG_PRESERVEASPECTRATIO_XMINYMID: number = 5;
	static SVG_PRESERVEASPECTRATIO_XMINYMIN: number = 2;
	set Align(value: SVGAlign)
	{
	}
	get Align(): SVGAlign
	{
		return SVGAlign.Unknown;
	}
	set MeetOrSlice(value: SVGMeetOrSlice)
	{
	}
	get MeetOrSlice(): SVGMeetOrSlice
	{
		return SVGMeetOrSlice.Unknown;
	}
	constructor()
	{
		super();
	}
}
class SVGRadialGradientElement extends SVGGradientElement
{
	get Cx(): SVGAnimatedLength
	{
		return null;
	}
	get Cy(): SVGAnimatedLength
	{
		return null;
	}
	get Fx(): SVGAnimatedLength
	{
		return null;
	}
	get Fy(): SVGAnimatedLength
	{
		return null;
	}
	get R(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGRadialGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGRadialGradientElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGRadialGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGRadialGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGRadialGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGRadialGradientElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGRadialGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGRadialGradientElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGRadialGradientElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGRadialGradientElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGRadialGradientElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGRadialGradientElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGRadialGradientElementEvents, listener: (target: SVGRadialGradientElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGRadialGradientElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGRadialGradientElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGRadialGradientElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGRect extends NObject
{
	set Height(value: number)
	{
	}
	get Height(): number
	{
		return 0.0;
	}
	set Width(value: number)
	{
	}
	get Width(): number
	{
		return 0.0;
	}
	set X(value: number)
	{
	}
	get X(): number
	{
		return 0.0;
	}
	set Y(value: number)
	{
	}
	get Y(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SVGRectElement extends SVGGraphicsElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Rx(): SVGAnimatedLength
	{
		return null;
	}
	get Ry(): SVGAnimatedLength
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGRectElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRectElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGRectElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGRectElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGRectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void): void;
	new AddEventListener(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGRectElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGRectElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGRectElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGRectElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGRectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGRectElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGRectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGRectElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGRectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGRectElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGRectElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGRectElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGRectElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGRectElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGRectElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGRectElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGRectElementEvents, listener: (target: SVGRectElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGRectElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGRectElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGRectElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGScriptElement extends SVGElement
{
	set CrossOrigin(value: string)
	{
	}
	get CrossOrigin(): string
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGScriptElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGScriptElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGScriptElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGScriptElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGScriptElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGScriptElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGScriptElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGScriptElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGScriptElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGScriptElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGScriptElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGScriptElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGScriptElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGScriptElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGScriptElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGScriptElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGScriptElementEvents, listener: (target: SVGScriptElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGScriptElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGScriptElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGScriptElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGSetElement extends SVGAnimationElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGSetElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSetElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGSetElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGSetElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void): void;
	new AddEventListener(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSetElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGSetElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGSetElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGSetElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGSetElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGSetElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGSetElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGSetElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGSetElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGSetElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGSetElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGSetElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGSetElementEvents, listener: (target: SVGSetElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGSetElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGSetElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGSetElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGSpreadMethod
{
	Pad = 1,
	Reflect,
	Repeat,
	Unknown = 0
}
class SVGStopElement extends SVGElement
{
	get Offset(): SVGAnimatedNumber
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGStopElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStopElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGStopElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGStopElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGStopElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void): void;
	new AddEventListener(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStopElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGStopElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGStopElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGStopElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGStopElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGStopElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGStopElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGStopElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGStopElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGStopElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGStopElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGStopElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGStopElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGStopElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGStopElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGStopElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGStopElementEvents, listener: (target: SVGStopElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGStopElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGStopElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGStopElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGStringList extends NObject
{
	get_Item(index: number): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: string): string
	{
		return null;
	}
	Clear(): void
	{
	}
	GetEnumerator(): IEnumerator<string>
	{
		return null;
	}
	GetItem(index: number): string
	{
		return null;
	}
	Initialize(newItem: string): string
	{
		return null;
	}
	InsertItemBefore(newItem: string, index: number): string
	{
		return null;
	}
	RemoveItem(index: number): string
	{
		return null;
	}
	ReplaceItem(newItem: string, index: number): string
	{
		return null;
	}
}
class SVGStyleElement extends SVGElement
{
	set Media(value: string)
	{
	}
	get Media(): string
	{
		return null;
	}
	set Scoped(value: boolean)
	{
	}
	get Scoped(): boolean
	{
		return false;
	}
	set Title(value: string)
	{
	}
	get Title(): string
	{
		return null;
	}
	set Type(value: string)
	{
	}
	get Type(): string
	{
		return null;
	}
	set Xmlspace(value: string)
	{
	}
	get Xmlspace(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGStyleElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGStyleElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGStyleElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGStyleElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGStyleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGStyleElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGStyleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGStyleElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGStyleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGStyleElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGStyleElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGStyleElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGStyleElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGStyleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGStyleElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGStyleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGStyleElementEvents, listener: (target: SVGStyleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGStyleElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGStyleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGStyleElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGSVGElement extends SVGGraphicsElement
{
	static SVG_ZOOMANDPAN_DISABLE: number = 1;
	static SVG_ZOOMANDPAN_MAGNIFY: number = 2;
	static SVG_ZOOMANDPAN_UNKNOWN: number = 0;
	set CurrentScale(value: number)
	{
	}
	get CurrentScale(): number
	{
		return 0.0;
	}
	get CurrentTranslate(): SVGPoint
	{
		return null;
	}
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get PixelUnitToMillimeterX(): number
	{
		return 0.0;
	}
	get PixelUnitToMillimeterY(): number
	{
		return 0.0;
	}
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get ScreenPixelToMillimeterX(): number
	{
		return 0.0;
	}
	get ScreenPixelToMillimeterY(): number
	{
		return 0.0;
	}
	get UseCurrentView(): boolean
	{
		return false;
	}
	get ViewBox(): SVGAnimatedRect
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	set ZoomAndPan(value: SVGZoomAndPanType)
	{
	}
	get ZoomAndPan(): SVGZoomAndPanType
	{
		return SVGZoomAndPanType.Unknown;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGSVGElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGSVGElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGSVGElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGSVGElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGSVGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGSVGElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGSVGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGSVGElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGSVGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	AnimationsPaused(): boolean
	{
		return false;
	}
	CreateSVGAngle(): SVGAngle
	{
		return null;
	}
	CreateSVGLength(): SVGLength
	{
		return null;
	}
	CreateSVGMatrix(): SVGMatrix
	{
		return null;
	}
	CreateSVGNumber(): SVGNumber
	{
		return null;
	}
	CreateSVGPoint(): SVGPoint
	{
		return null;
	}
	CreateSVGRect(): SVGRect
	{
		return null;
	}
	CreateSVGTransform(): SVGTransform
	{
		return null;
	}
	CreateSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
	{
		return null;
	}
	DeselectAll(): void
	{
	}
	ForceRedraw(): void
	{
	}
	GetCurrentTime(): number
	{
		return 0.0;
	}
	GetElementById(elementId: string): Element
	{
		return null;
	}
	PauseAnimations(): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGSVGElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGSVGElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGSVGElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGSVGElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGSVGElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGSVGElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGSVGElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGSVGElementEvents, listener: (target: SVGSVGElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGSVGElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGSVGElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SetCurrentTime(seconds: number): void
	{
	}
	SuspendRedraw(maxWaitMilliseconds: number): number
	{
		return 0;
	}
	UnpauseAnimations(): void
	{
	}
	UnsuspendRedraw(suspendHandleID: number): void
	{
	}
	UnsuspendRedrawAll(): void
	{
	}
}
enum SVGSVGElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGSwitchElement extends SVGGraphicsElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGSwitchElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGSwitchElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGSwitchElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGSwitchElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGSwitchElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGSwitchElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGSwitchElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGSwitchElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGSwitchElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGSwitchElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGSwitchElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGSwitchElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGSwitchElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGSwitchElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGSwitchElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGSwitchElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGSwitchElementEvents, listener: (target: SVGSwitchElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGSwitchElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGSwitchElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGSwitchElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGSymbolElement extends SVGElement
{
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get RequiredExtensions(): SVGStringList
	{
		return null;
	}
	get RequiredFeatures(): SVGStringList
	{
		return null;
	}
	get SystemLanguage(): SVGStringList
	{
		return null;
	}
	get ViewBox(): SVGAnimatedRect
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGSymbolElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGSymbolElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGSymbolElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGSymbolElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGSymbolElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGSymbolElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGSymbolElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGSymbolElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGSymbolElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	HasExtension(extension: string): boolean
	{
		return false;
	}
	new RemoveEventListener(type: string, listener: (target: SVGSymbolElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGSymbolElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGSymbolElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGSymbolElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGSymbolElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGSymbolElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGSymbolElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGSymbolElementEvents, listener: (target: SVGSymbolElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGSymbolElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGSymbolElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGSymbolElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGTextContentElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGTextElement extends SVGTextPositioningElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTextElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTextElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTextElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTextElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void): void;
	new AddEventListener(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTextElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTextElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTextElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTextElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTextElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTextElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTextElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTextElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGTextElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTextElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTextElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTextElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTextElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTextElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTextElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTextElementEvents, listener: (target: SVGTextElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTextElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTextElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGTextElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGTextPathElement extends SVGTextContentElement
{
	static TEXTPATH_METHODTYPE_ALIGN: number = 1;
	static TEXTPATH_METHODTYPE_STRETCH: number = 2;
	static TEXTPATH_METHODTYPE_UNKNOWN: number = 0;
	static TEXTPATH_SPACINGTYPE_AUTO: number = 1;
	static TEXTPATH_SPACINGTYPE_EXACT: number = 2;
	static TEXTPATH_SPACINGTYPE_UNKNOWN: number = 0;
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get Method(): SVGAnimatedEnumeration<SVGTextPathMethod>
	{
		return null;
	}
	get Spacing(): SVGAnimatedEnumeration<SVGTextPathSpacing>
	{
		return null;
	}
	get StartOffset(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTextPathElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTextPathElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTextPathElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTextPathElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTextPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTextPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTextPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTextPathElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTextPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGTextPathElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTextPathElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTextPathElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTextPathElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTextPathElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTextPathElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTextPathElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTextPathElementEvents, listener: (target: SVGTextPathElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTextPathElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTextPathElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGTextPathElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGTextPathMethod
{
	Align = 1,
	Stretch,
	Unknown = 0
}
enum SVGTextPathSpacing
{
	Auto = 1,
	Exact,
	Unknown = 0
}
enum SVGTextPositioningElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGTitleElement extends SVGElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTitleElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTitleElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTitleElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTitleElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTitleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTitleElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTitleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTitleElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTitleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGTitleElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTitleElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTitleElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTitleElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTitleElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTitleElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTitleElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTitleElementEvents, listener: (target: SVGTitleElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTitleElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTitleElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGTitleElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGTransform extends NObject
{
	static SVG_TRANSFORM_MATRIX: number = 1;
	static SVG_TRANSFORM_ROTATE: number = 4;
	static SVG_TRANSFORM_SCALE: number = 3;
	static SVG_TRANSFORM_SKEWX: number = 5;
	static SVG_TRANSFORM_SKEWY: number = 6;
	static SVG_TRANSFORM_TRANSLATE: number = 2;
	static SVG_TRANSFORM_UNKNOWN: number = 0;
	get Angle(): number
	{
		return 0.0;
	}
	get Matrix(): SVGMatrix
	{
		return null;
	}
	get Type(): SVGTransformType
	{
		return SVGTransformType.Unknown;
	}
	constructor()
	{
		super();
	}
	SetMatrix(matrix: SVGMatrix): void
	{
	}
	SetRotate(angle: number, cx: number, cy: number): void
	{
	}
	SetScale(sx: number, sy: number): void
	{
	}
	SetSkewX(angle: number): void
	{
	}
	SetSkewY(angle: number): void
	{
	}
	SetTranslate(tx: number, ty: number): void
	{
	}
}
class SVGTransformList extends NObject
{
	get_Item(index: number): SVGTransform
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NumberOfItems(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AppendItem(newItem: SVGTransform): SVGTransform
	{
		return null;
	}
	Clear(): void
	{
	}
	Consolidate(): SVGTransform
	{
		return null;
	}
	CreateSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform
	{
		return null;
	}
	GetEnumerator(): IEnumerator<SVGTransform>
	{
		return null;
	}
	GetItem(index: number): SVGTransform
	{
		return null;
	}
	Initialize(newItem: SVGTransform): SVGTransform
	{
		return null;
	}
	InsertItemBefore(newItem: SVGTransform, index: number): SVGTransform
	{
		return null;
	}
	RemoveItem(index: number): SVGTransform
	{
		return null;
	}
	ReplaceItem(newItem: SVGTransform, index: number): SVGTransform
	{
		return null;
	}
}
enum SVGTransformType
{
	Matrix = 1,
	Rotate = 4,
	Scale = 3,
	Skewx = 5,
	Skewy,
	Translate = 2,
	Unknown = 0
}
class SVGTSpanElement extends SVGTextPositioningElement
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGTSpanElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGTSpanElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGTSpanElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGTSpanElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGTSpanElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGTSpanElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGTSpanElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGTSpanElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGTSpanElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGTSpanElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGTSpanElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGTSpanElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGTSpanElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGTSpanElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGTSpanElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGTSpanElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGTSpanElementEvents, listener: (target: SVGTSpanElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGTSpanElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGTSpanElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGTSpanElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGUnitType
{
	Objectboundingbox = 2,
	Unknown = 0,
	Userspaceonuse
}
class SVGUseElement extends SVGGraphicsElement
{
	get Height(): SVGAnimatedLength
	{
		return null;
	}
	get Href(): SVGAnimatedString
	{
		return null;
	}
	get Width(): SVGAnimatedLength
	{
		return null;
	}
	get X(): SVGAnimatedLength
	{
		return null;
	}
	get Y(): SVGAnimatedLength
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGUseElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGUseElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGUseElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGUseElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGUseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void): void;
	new AddEventListener(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGUseElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGUseElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGUseElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGUseElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGUseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGUseElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGUseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGUseElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGUseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGUseElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGUseElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGUseElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGUseElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGUseElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGUseElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGUseElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGUseElementEvents, listener: (target: SVGUseElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGUseElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGUseElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGUseElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
class SVGViewElement extends SVGElement
{
	static SVG_ZOOMANDPAN_DISABLE: number = 1;
	static SVG_ZOOMANDPAN_MAGNIFY: number = 2;
	static SVG_ZOOMANDPAN_UNKNOWN: number = 0;
	get PreserveAspectRatio(): SVGAnimatedPreserveAspectRatio
	{
		return null;
	}
	get ViewBox(): SVGAnimatedRect
	{
		return null;
	}
	get ViewTarget(): SVGStringList
	{
		return null;
	}
	set ZoomAndPan(value: SVGZoomAndPanType)
	{
	}
	get ZoomAndPan(): SVGZoomAndPanType
	{
		return SVGZoomAndPanType.Unknown;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: SVGViewElement, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGViewElementEvents, listener: () => void): void;
	new AddEventListener(type: SVGViewElementEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: SVGViewElementEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: SVGViewElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void): void;
	new AddEventListener(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: SVGViewElementEvents, listener: IEventListener): void;
	new AddEventListener(type: SVGViewElementEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: SVGViewElement, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SVGViewElementEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: SVGViewElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SVGViewElementEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SVGViewElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: SVGViewElementEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: SVGViewElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: SVGViewElement, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: () => void): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: IEventListener): void;
	new RemoveEventListener(type: SVGViewElementEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: SVGViewElement, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SVGViewElementEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: SVGViewElementEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SVGViewElementEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SVGViewElementEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: SVGViewElementEvents, listener: (target: SVGViewElement, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: SVGViewElementEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: SVGViewElementEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum SVGViewElementEvents
{
	Abort,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum SVGZoomAndPanType
{
	Disable = 1,
	Magnify,
	Unknown = 0
}
class SVGZoomEvent extends UIEvent
{
	get NewScale(): number
	{
		return 0.0;
	}
	get NewTranslate(): SVGPoint
	{
		return null;
	}
	get PreviousScale(): number
	{
		return 0.0;
	}
	get PreviousTranslate(): SVGPoint
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SVGAnimatedEnumeration<TEnumeration> extends NObject
{
	get AnimVal(): TEnumeration
	{
		return null;
	}
	set BaseVal(value: TEnumeration)
	{
	}
	get BaseVal(): TEnumeration
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
enum OverSampleType
{
	None,
	_2x,
	_4x
}
class WebGLRenderingContext extends CanvasRenderingContext
{
	static ACTIVE_ATTRIBUTES: number = 35721;
	static ACTIVE_TEXTURE: number = 34016;
	static ACTIVE_UNIFORMS: number = 35718;
	static ALIASED_LINE_WIDTH_RANGE: number = 33902;
	static ALIASED_POINT_SIZE_RANGE: number = 33901;
	static ALPHA: number = 6406;
	static ALPHA_BITS: number = 3413;
	static ALWAYS: number = 519;
	static ARRAY_BUFFER: number = 34962;
	static ARRAY_BUFFER_BINDING: number = 34964;
	static ATTACHED_SHADERS: number = 35717;
	static BACK: number = 1029;
	static BLEND: number = 3042;
	static BLEND_COLOR: number = 32773;
	static BLEND_DST_ALPHA: number = 32970;
	static BLEND_DST_RGB: number = 32968;
	static BLEND_EQUATION: number = 32777;
	static BLEND_EQUATION_ALPHA: number = 34877;
	static BLEND_EQUATION_RGB: number = 32777;
	static BLEND_SRC_ALPHA: number = 32971;
	static BLEND_SRC_RGB: number = 32969;
	static BLUE_BITS: number = 3412;
	static BOOL: number = 35670;
	static BOOL_VEC2: number = 35671;
	static BOOL_VEC3: number = 35672;
	static BOOL_VEC4: number = 35673;
	static BROWSER_DEFAULT_WEBGL: number = 37444;
	static BUFFER_SIZE: number = 34660;
	static BUFFER_USAGE: number = 34661;
	static BYTE: number = 5120;
	static CCW: number = 2305;
	static CLAMP_TO_EDGE: number = 33071;
	static COLOR_ATTACHMENT0: number = 36064;
	static COLOR_BUFFER_BIT: number = 16384;
	static COLOR_CLEAR_VALUE: number = 3106;
	static COLOR_WRITEMASK: number = 3107;
	static COMPILE_STATUS: number = 35713;
	static COMPRESSED_TEXTURE_FORMATS: number = 34467;
	static CONSTANT_ALPHA: number = 32771;
	static CONSTANT_COLOR: number = 32769;
	static CONTEXT_LOST_WEBGL: number = 37442;
	static CULL_FACE: number = 2884;
	static CULL_FACE_MODE: number = 2885;
	static CURRENT_PROGRAM: number = 35725;
	static CURRENT_VERTEX_ATTRIB: number = 34342;
	static CW: number = 2304;
	static DECR: number = 7683;
	static DECR_WRAP: number = 34056;
	static DELETE_STATUS: number = 35712;
	static DEPTH_ATTACHMENT: number = 36096;
	static DEPTH_BITS: number = 3414;
	static DEPTH_BUFFER_BIT: number = 256;
	static DEPTH_CLEAR_VALUE: number = 2931;
	static DEPTH_COMPONENT: number = 6402;
	static DEPTH_COMPONENT16: number = 33189;
	static DEPTH_FUNC: number = 2932;
	static DEPTH_RANGE: number = 2928;
	static DEPTH_STENCIL: number = 34041;
	static DEPTH_STENCIL_ATTACHMENT: number = 33306;
	static DEPTH_TEST: number = 2929;
	static DEPTH_WRITEMASK: number = 2930;
	static DITHER: number = 3024;
	static DONT_CARE: number = 4352;
	static DST_ALPHA: number = 772;
	static DST_COLOR: number = 774;
	static DYNAMIC_DRAW: number = 35048;
	static ELEMENT_ARRAY_BUFFER: number = 34963;
	static ELEMENT_ARRAY_BUFFER_BINDING: number = 34965;
	static EQUAL: number = 514;
	static FASTEST: number = 4353;
	static FLOAT: number = 5126;
	static FLOAT_MAT2: number = 35674;
	static FLOAT_MAT3: number = 35675;
	static FLOAT_MAT4: number = 35676;
	static FLOAT_VEC2: number = 35664;
	static FLOAT_VEC3: number = 35665;
	static FLOAT_VEC4: number = 35666;
	static FRAGMENT_SHADER: number = 35632;
	static FRAMEBUFFER: number = 36160;
	static FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number = 36049;
	static FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number = 36048;
	static FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number = 36051;
	static FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number = 36050;
	static FRAMEBUFFER_BINDING: number = 36006;
	static FRAMEBUFFER_COMPLETE: number = 36053;
	static FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number = 36054;
	static FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number = 36057;
	static FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number = 36055;
	static FRAMEBUFFER_UNSUPPORTED: number = 36061;
	static FRONT: number = 1028;
	static FRONT_AND_BACK: number = 1032;
	static FRONT_FACE: number = 2886;
	static FUNC_ADD: number = 32774;
	static FUNC_REVERSE_SUBTRACT: number = 32779;
	static FUNC_SUBTRACT: number = 32778;
	static GENERATE_MIPMAP_HINT: number = 33170;
	static GEQUAL: number = 518;
	static GREATER: number = 516;
	static GREEN_BITS: number = 3411;
	static HIGH_FLOAT: number = 36338;
	static HIGH_INT: number = 36341;
	static INCR: number = 7682;
	static INCR_WRAP: number = 34055;
	static INT: number = 5124;
	static INT_VEC2: number = 35667;
	static INT_VEC3: number = 35668;
	static INT_VEC4: number = 35669;
	static INVALID_ENUM: number = 1280;
	static INVALID_FRAMEBUFFER_OPERATION: number = 1286;
	static INVALID_OPERATION: number = 1282;
	static INVALID_VALUE: number = 1281;
	static INVERT: number = 5386;
	static KEEP: number = 7680;
	static LEQUAL: number = 515;
	static LESS: number = 513;
	static LINE_LOOP: number = 2;
	static LINE_STRIP: number = 3;
	static LINE_WIDTH: number = 2849;
	static LINEAR: number = 9729;
	static LINEAR_MIPMAP_LINEAR: number = 9987;
	static LINEAR_MIPMAP_NEAREST: number = 9985;
	static LINES: number = 1;
	static LINK_STATUS: number = 35714;
	static LOW_FLOAT: number = 36336;
	static LOW_INT: number = 36339;
	static LUMINANCE: number = 6409;
	static LUMINANCE_ALPHA: number = 6410;
	static MAX_COMBINED_TEXTURE_IMAGE_UNITS: number = 35661;
	static MAX_CUBE_MAP_TEXTURE_SIZE: number = 34076;
	static MAX_FRAGMENT_UNIFORM_VECTORS: number = 36349;
	static MAX_RENDERBUFFER_SIZE: number = 34024;
	static MAX_TEXTURE_IMAGE_UNITS: number = 34930;
	static MAX_TEXTURE_SIZE: number = 3379;
	static MAX_VARYING_VECTORS: number = 36348;
	static MAX_VERTEX_ATTRIBS: number = 34921;
	static MAX_VERTEX_TEXTURE_IMAGE_UNITS: number = 35660;
	static MAX_VERTEX_UNIFORM_VECTORS: number = 36347;
	static MAX_VIEWPORT_DIMS: number = 3386;
	static MEDIUM_FLOAT: number = 36337;
	static MEDIUM_INT: number = 36340;
	static MIRRORED_REPEAT: number = 33648;
	static NEAREST: number = 9728;
	static NEAREST_MIPMAP_LINEAR: number = 9986;
	static NEAREST_MIPMAP_NEAREST: number = 9984;
	static NEVER: number = 512;
	static NICEST: number = 4354;
	static NO_ERROR: number = 0;
	static NONE: number = 0;
	static NOTEQUAL: number = 517;
	static ONE: number = 1;
	static ONE_MINUS_CONSTANT_ALPHA: number = 32772;
	static ONE_MINUS_CONSTANT_COLOR: number = 32770;
	static ONE_MINUS_DST_ALPHA: number = 773;
	static ONE_MINUS_DST_COLOR: number = 775;
	static ONE_MINUS_SRC_ALPHA: number = 771;
	static ONE_MINUS_SRC_COLOR: number = 769;
	static OUT_OF_MEMORY: number = 1285;
	static PACK_ALIGNMENT: number = 3333;
	static POINTS: number = 0;
	static POLYGON_OFFSET_FACTOR: number = 32824;
	static POLYGON_OFFSET_FILL: number = 32823;
	static POLYGON_OFFSET_UNITS: number = 10752;
	static RED_BITS: number = 3410;
	static RENDERBUFFER: number = 36161;
	static RENDERBUFFER_ALPHA_SIZE: number = 36179;
	static RENDERBUFFER_BINDING: number = 36007;
	static RENDERBUFFER_BLUE_SIZE: number = 36178;
	static RENDERBUFFER_DEPTH_SIZE: number = 36180;
	static RENDERBUFFER_GREEN_SIZE: number = 36177;
	static RENDERBUFFER_HEIGHT: number = 36163;
	static RENDERBUFFER_INTERNAL_FORMAT: number = 36164;
	static RENDERBUFFER_RED_SIZE: number = 36176;
	static RENDERBUFFER_STENCIL_SIZE: number = 36181;
	static RENDERBUFFER_WIDTH: number = 36162;
	static RENDERER: number = 7937;
	static REPEAT: number = 10497;
	static REPLACE: number = 7681;
	static RGB: number = 6407;
	static RGB5_A1: number = 32855;
	static RGB565: number = 36194;
	static RGBA: number = 6408;
	static RGBA4: number = 32854;
	static SAMPLE_ALPHA_TO_COVERAGE: number = 32926;
	static SAMPLE_BUFFERS: number = 32936;
	static SAMPLE_COVERAGE: number = 32928;
	static SAMPLE_COVERAGE_INVERT: number = 32939;
	static SAMPLE_COVERAGE_VALUE: number = 32938;
	static SAMPLER_2D: number = 35678;
	static SAMPLER_CUBE: number = 35680;
	static SAMPLES: number = 32937;
	static SCISSOR_BOX: number = 3088;
	static SCISSOR_TEST: number = 3089;
	static SHADER_TYPE: number = 35663;
	static SHADING_LANGUAGE_VERSION: number = 35724;
	static SHORT: number = 5122;
	static SRC_ALPHA: number = 770;
	static SRC_ALPHA_SATURATE: number = 776;
	static SRC_COLOR: number = 768;
	static STATIC_DRAW: number = 35044;
	static STENCIL_ATTACHMENT: number = 36128;
	static STENCIL_BACK_FAIL: number = 34817;
	static STENCIL_BACK_FUNC: number = 34816;
	static STENCIL_BACK_PASS_DEPTH_FAIL: number = 34818;
	static STENCIL_BACK_PASS_DEPTH_PASS: number = 34819;
	static STENCIL_BACK_REF: number = 36003;
	static STENCIL_BACK_VALUE_MASK: number = 36004;
	static STENCIL_BACK_WRITEMASK: number = 36005;
	static STENCIL_BITS: number = 3415;
	static STENCIL_BUFFER_BIT: number = 1024;
	static STENCIL_CLEAR_VALUE: number = 2961;
	static STENCIL_FAIL: number = 2964;
	static STENCIL_FUNC: number = 2962;
	static STENCIL_INDEX: number = 6401;
	static STENCIL_INDEX8: number = 36168;
	static STENCIL_PASS_DEPTH_FAIL: number = 2965;
	static STENCIL_PASS_DEPTH_PASS: number = 2966;
	static STENCIL_REF: number = 2967;
	static STENCIL_TEST: number = 2960;
	static STENCIL_VALUE_MASK: number = 2963;
	static STENCIL_WRITEMASK: number = 2968;
	static STREAM_DRAW: number = 35040;
	static SUBPIXEL_BITS: number = 3408;
	static TEXTURE: number = 5890;
	static TEXTURE_2D: number = 3553;
	static TEXTURE_BINDING_2D: number = 32873;
	static TEXTURE_BINDING_CUBE_MAP: number = 34068;
	static TEXTURE_CUBE_MAP: number = 34067;
	static TEXTURE_CUBE_MAP_NEGATIVE_X: number = 34070;
	static TEXTURE_CUBE_MAP_NEGATIVE_Y: number = 34072;
	static TEXTURE_CUBE_MAP_NEGATIVE_Z: number = 34074;
	static TEXTURE_CUBE_MAP_POSITIVE_X: number = 34069;
	static TEXTURE_CUBE_MAP_POSITIVE_Y: number = 34071;
	static TEXTURE_CUBE_MAP_POSITIVE_Z: number = 34073;
	static TEXTURE_MAG_FILTER: number = 10240;
	static TEXTURE_MIN_FILTER: number = 10241;
	static TEXTURE_WRAP_S: number = 10242;
	static TEXTURE_WRAP_T: number = 10243;
	static TEXTURE0: number = 33984;
	static TEXTURE1: number = 33985;
	static TEXTURE10: number = 33994;
	static TEXTURE11: number = 33995;
	static TEXTURE12: number = 33996;
	static TEXTURE13: number = 33997;
	static TEXTURE14: number = 33998;
	static TEXTURE15: number = 33999;
	static TEXTURE16: number = 34000;
	static TEXTURE17: number = 34001;
	static TEXTURE18: number = 34002;
	static TEXTURE19: number = 34003;
	static TEXTURE2: number = 33986;
	static TEXTURE20: number = 34004;
	static TEXTURE21: number = 34005;
	static TEXTURE22: number = 34006;
	static TEXTURE23: number = 34007;
	static TEXTURE24: number = 34008;
	static TEXTURE25: number = 34009;
	static TEXTURE26: number = 34010;
	static TEXTURE27: number = 34011;
	static TEXTURE28: number = 34012;
	static TEXTURE29: number = 34013;
	static TEXTURE3: number = 33987;
	static TEXTURE30: number = 34014;
	static TEXTURE31: number = 34015;
	static TEXTURE4: number = 33988;
	static TEXTURE5: number = 33989;
	static TEXTURE6: number = 33990;
	static TEXTURE7: number = 33991;
	static TEXTURE8: number = 33992;
	static TEXTURE9: number = 33993;
	static TRIANGLE_FAN: number = 6;
	static TRIANGLE_STRIP: number = 5;
	static TRIANGLES: number = 4;
	static UNPACK_ALIGNMENT: number = 3317;
	static UNPACK_COLORSPACE_CONVERSION_WEBGL: number = 37443;
	static UNPACK_FLIP_Y_WEBGL: number = 37440;
	static UNPACK_PREMULTIPLY_ALPHA_WEBGL: number = 37441;
	static UNSIGNED_BYTE: number = 5121;
	static UNSIGNED_INT: number = 5125;
	static UNSIGNED_SHORT: number = 5123;
	static UNSIGNED_SHORT_4_4_4_4: number = 32819;
	static UNSIGNED_SHORT_5_5_5_1: number = 32820;
	static UNSIGNED_SHORT_5_6_5: number = 33635;
	static VALIDATE_STATUS: number = 35715;
	static VENDOR: number = 7936;
	static VERSION: number = 7938;
	static VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number = 34975;
	static VERTEX_ATTRIB_ARRAY_ENABLED: number = 34338;
	static VERTEX_ATTRIB_ARRAY_NORMALIZED: number = 34922;
	static VERTEX_ATTRIB_ARRAY_POINTER: number = 34373;
	static VERTEX_ATTRIB_ARRAY_SIZE: number = 34339;
	static VERTEX_ATTRIB_ARRAY_STRIDE: number = 34340;
	static VERTEX_ATTRIB_ARRAY_TYPE: number = 34341;
	static VERTEX_SHADER: number = 35633;
	static VIEWPORT: number = 2978;
	static ZERO: number = 0;
	get Canvas(): CanvasElement
	{
		return null;
	}
	get DrawingBufferHeight(): number
	{
		return 0;
	}
	get DrawingBufferWidth(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	ActiveTexture(texture: number): void
	{
	}
	AttachShader(program: WebGLProgram, shader: WebGLShader): void
	{
	}
	BindAttribLocation(program: WebGLProgram, index: number, name: string): void
	{
	}
	BindBuffer(target: number, buffer: WebGLBuffer): void
	{
	}
	BindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void
	{
	}
	BindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void
	{
	}
	BindTexture(target: number, texture: WebGLTexture): void
	{
	}
	BlendColor(red: number, green: number, blue: number, alpha: number): void
	{
	}
	BlendEquation(mode: number): void
	{
	}
	BlendEquationSeparate(modeRGB: number, modeAlpha: number): void
	{
	}
	BlendFunc(sfactor: number, dfactor: number): void
	{
	}
	BlendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void
	{
	}
	BufferData(target: number, data: ArrayBuffer, usage: number): void;
	BufferData(target: number, data: ArrayBufferView, usage: number): void;
	BufferData(target: number, size: number, usage: number): void;
	BufferData(target: number, dataOrSize: any, usage: number): void
	{
		if (arguments.length === 3 && (target === null || target.constructor === Number) && (dataOrSize === null || dataOrSize instanceof ArrayBuffer) && (usage === null || usage.constructor === Number))
		{
			this.BufferData_0(target, dataOrSize, usage);
			return;
		}
		if (arguments.length === 3 && (target === null || target.constructor === Number) && (dataOrSize === null || dataOrSize instanceof ArrayBufferView) && (usage === null || usage.constructor === Number))
		{
			this.BufferData_1(target, dataOrSize, usage);
			return;
		}
		this.BufferData_2(target, dataOrSize, usage);
	}
	private BufferData_0(target: number, data: ArrayBuffer, usage: number): void
	{
	}
	private BufferData_1(target: number, data: ArrayBufferView, usage: number): void
	{
	}
	private BufferData_2(target: number, size: number, usage: number): void
	{
	}
	BufferSubData(target: number, offset: number, data: ArrayBuffer): void;
	BufferSubData(target: number, offset: number, data: ArrayBufferView): void;
	BufferSubData(target: number, offset: number, data: any): void
	{
		if (arguments.length === 3 && (target === null || target.constructor === Number) && (offset === null || offset.constructor === Number) && (data === null || data instanceof ArrayBuffer))
		{
			this.BufferSubData_0(target, offset, data);
			return;
		}
		this.BufferSubData_1(target, offset, data);
	}
	private BufferSubData_0(target: number, offset: number, data: ArrayBuffer): void
	{
	}
	private BufferSubData_1(target: number, offset: number, data: ArrayBufferView): void
	{
	}
	CheckFramebufferStatus(target: number): number
	{
		return 0;
	}
	Clear(mask: number): void
	{
	}
	ClearColor(red: number, green: number, blue: number, alpha: number): void
	{
	}
	ClearDepth(depth: number): void
	{
	}
	ClearStencil(s: number): void
	{
	}
	ColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void
	{
	}
	CompileShader(shader: WebGLShader): void
	{
	}
	CompressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void
	{
	}
	CompressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void
	{
	}
	CopyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void
	{
	}
	CopyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void
	{
	}
	CreateBuffer(): WebGLBuffer
	{
		return null;
	}
	CreateFramebuffer(): WebGLFramebuffer
	{
		return null;
	}
	CreateProgram(): WebGLProgram
	{
		return null;
	}
	CreateRenderbuffer(): WebGLRenderbuffer
	{
		return null;
	}
	CreateShader(type: number): WebGLShader
	{
		return null;
	}
	CreateTexture(): WebGLTexture
	{
		return null;
	}
	CullFace(mode: number): void
	{
	}
	DeleteBuffer(buffer: WebGLBuffer): void
	{
	}
	DeleteFramebuffer(framebuffer: WebGLFramebuffer): void
	{
	}
	DeleteProgram(program: WebGLProgram): void
	{
	}
	DeleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void
	{
	}
	DeleteShader(shader: WebGLShader): void
	{
	}
	DeleteTexture(texture: WebGLTexture): void
	{
	}
	DepthFunc(func: number): void
	{
	}
	DepthMask(flag: boolean): void
	{
	}
	DepthRange(zNear: number, zFar: number): void
	{
	}
	DetachShader(program: WebGLProgram, shader: WebGLShader): void
	{
	}
	Disable(cap: number): void
	{
	}
	DisableVertexAttribArray(index: number): void
	{
	}
	DrawArrays(mode: number, first: number, count: number): void
	{
	}
	DrawElements(mode: number, count: number, type: number, offset: number): void
	{
	}
	Enable(cap: number): void
	{
	}
	EnableVertexAttribArray(index: number): void
	{
	}
	Finish(): void
	{
	}
	Flush(): void
	{
	}
	FramebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void
	{
	}
	FramebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void
	{
	}
	FrontFace(mode: number): void
	{
	}
	GenerateMipmap(target: number): void
	{
	}
	GetActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo
	{
		return null;
	}
	GetActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo
	{
		return null;
	}
	GetAttachedShaders(program: WebGLProgram): WebGLShader[]
	{
		return null;
	}
	GetAttribLocation(program: WebGLProgram, name: string): number
	{
		return 0;
	}
	GetBufferParameter(target: number, pname: number): any
	{
		return null;
	}
	GetContextAttributes(): WebGLContextAttributes
	{
		return null;
	}
	GetError(): number
	{
		return 0;
	}
	GetExtension(name: string): any
	{
		return null;
	}
	GetFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any
	{
		return null;
	}
	GetParameter(pname: number): any
	{
		return null;
	}
	GetProgramInfoLog(program: WebGLProgram): string
	{
		return null;
	}
	GetProgramParameter(program: WebGLProgram, pname: number): any
	{
		return null;
	}
	GetRenderbufferParameter(target: number, pname: number): any
	{
		return null;
	}
	GetShaderInfoLog(shader: WebGLShader): string
	{
		return null;
	}
	GetShaderParameter(shader: WebGLShader, pname: number): any
	{
		return null;
	}
	GetShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat
	{
		return null;
	}
	GetShaderSource(shader: WebGLShader): string
	{
		return null;
	}
	GetSupportedExtensions(): string[]
	{
		return null;
	}
	GetTexParameter(target: number, pname: number): any
	{
		return null;
	}
	GetUniform(program: WebGLProgram, location: WebGLUniformLocation): any
	{
		return null;
	}
	GetUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation
	{
		return null;
	}
	GetVertexAttrib(index: number, pname: number): any
	{
		return null;
	}
	GetVertexAttribOffset(index: number, pname: number): number
	{
		return 0;
	}
	Hint(target: number, mode: number): void
	{
	}
	IsBuffer(buffer: WebGLBuffer): boolean
	{
		return false;
	}
	IsContextLost(): boolean
	{
		return false;
	}
	IsEnabled(cap: number): boolean
	{
		return false;
	}
	IsFramebuffer(framebuffer: WebGLFramebuffer): boolean
	{
		return false;
	}
	IsProgram(program: WebGLProgram): boolean
	{
		return false;
	}
	IsRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean
	{
		return false;
	}
	IsShader(shader: WebGLShader): boolean
	{
		return false;
	}
	IsTexture(texture: WebGLTexture): boolean
	{
		return false;
	}
	LineWidth(width: number): void
	{
	}
	LinkProgram(program: WebGLProgram): void
	{
	}
	PixelStorei(pname: number, param: number): void
	{
	}
	PolygonOffset(factor: number, units: number): void
	{
	}
	ReadPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void
	{
	}
	RenderbufferStorage(target: number, internalformat: number, width: number, height: number): void
	{
	}
	SampleCoverage(value: number, invert: boolean): void
	{
	}
	Scissor(x: number, y: number, width: number, height: number): void
	{
	}
	ShaderSource(shader: WebGLShader, source: string): void
	{
	}
	StencilFunc(func: number, ref: number, mask: number): void
	{
	}
	StencilFuncSeparate(face: number, func: number, ref: number, mask: number): void
	{
	}
	StencilMask(mask: number): void
	{
	}
	StencilMaskSeparate(face: number, mask: number): void
	{
	}
	StencilOp(fail: number, zfail: number, zpass: number): void
	{
	}
	StencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void
	{
	}
	TexImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: CanvasElement): void;
	TexImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;
	TexImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: ImageElement): void;
	TexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;
	TexImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: VideoElement): void;
	TexImage2D(target: number, level: number, internalformat: number, formatOrWidth: number, typeOrHeight: number, canvasOrPixelsOrImageOrBorderOrVideo: any, format?: number, type?: number, pixels?: ArrayBufferView): void
	{
		if (arguments.length === 6 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (internalformat === null || internalformat.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrBorderOrVideo === null || canvasOrPixelsOrImageOrBorderOrVideo instanceof CanvasElement))
		{
			this.TexImage2D_0(target, level, internalformat, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrBorderOrVideo);
			return;
		}
		if (arguments.length === 6 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (internalformat === null || internalformat.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrBorderOrVideo === null || canvasOrPixelsOrImageOrBorderOrVideo instanceof ImageData))
		{
			this.TexImage2D_1(target, level, internalformat, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrBorderOrVideo);
			return;
		}
		if (arguments.length === 6 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (internalformat === null || internalformat.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrBorderOrVideo === null || canvasOrPixelsOrImageOrBorderOrVideo instanceof ImageElement))
		{
			this.TexImage2D_2(target, level, internalformat, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrBorderOrVideo);
			return;
		}
		if (arguments.length === 9 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (internalformat === null || internalformat.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrBorderOrVideo === null || canvasOrPixelsOrImageOrBorderOrVideo.constructor === Number) && (format === null || format.constructor === Number) && (type === null || type.constructor === Number) && (pixels === null || pixels instanceof ArrayBufferView))
		{
			this.TexImage2D_3(target, level, internalformat, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrBorderOrVideo, format, type, pixels);
			return;
		}
		this.TexImage2D_4(target, level, internalformat, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrBorderOrVideo);
	}
	private TexImage2D_0(target: number, level: number, internalformat: number, format: number, type: number, canvas: CanvasElement): void
	{
	}
	private TexImage2D_1(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void
	{
	}
	private TexImage2D_2(target: number, level: number, internalformat: number, format: number, type: number, image: ImageElement): void
	{
	}
	private TexImage2D_3(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void
	{
	}
	private TexImage2D_4(target: number, level: number, internalformat: number, format: number, type: number, video: VideoElement): void
	{
	}
	TexParameterf(target: number, pname: number, param: number): void
	{
	}
	TexParameteri(target: number, pname: number, param: number): void
	{
	}
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: CanvasElement): void;
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: ImageElement): void;
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: VideoElement): void;
	TexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, formatOrWidth: number, typeOrHeight: number, canvasOrPixelsOrImageOrFormatOrVideo: any, type?: number, pixels?: ArrayBufferView): void
	{
		if (arguments.length === 7 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (xoffset === null || xoffset.constructor === Number) && (yoffset === null || yoffset.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrFormatOrVideo === null || canvasOrPixelsOrImageOrFormatOrVideo instanceof CanvasElement))
		{
			this.TexSubImage2D_0(target, level, xoffset, yoffset, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrFormatOrVideo);
			return;
		}
		if (arguments.length === 7 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (xoffset === null || xoffset.constructor === Number) && (yoffset === null || yoffset.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrFormatOrVideo === null || canvasOrPixelsOrImageOrFormatOrVideo instanceof ImageData))
		{
			this.TexSubImage2D_1(target, level, xoffset, yoffset, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrFormatOrVideo);
			return;
		}
		if (arguments.length === 7 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (xoffset === null || xoffset.constructor === Number) && (yoffset === null || yoffset.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrFormatOrVideo === null || canvasOrPixelsOrImageOrFormatOrVideo instanceof ImageElement))
		{
			this.TexSubImage2D_2(target, level, xoffset, yoffset, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrFormatOrVideo);
			return;
		}
		if (arguments.length === 9 && (target === null || target.constructor === Number) && (level === null || level.constructor === Number) && (xoffset === null || xoffset.constructor === Number) && (yoffset === null || yoffset.constructor === Number) && (formatOrWidth === null || formatOrWidth.constructor === Number) && (typeOrHeight === null || typeOrHeight.constructor === Number) && (canvasOrPixelsOrImageOrFormatOrVideo === null || canvasOrPixelsOrImageOrFormatOrVideo.constructor === Number) && (type === null || type.constructor === Number) && (pixels === null || pixels instanceof ArrayBufferView))
		{
			this.TexSubImage2D_3(target, level, xoffset, yoffset, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrFormatOrVideo, type, pixels);
			return;
		}
		this.TexSubImage2D_4(target, level, xoffset, yoffset, formatOrWidth, typeOrHeight, canvasOrPixelsOrImageOrFormatOrVideo);
	}
	private TexSubImage2D_0(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: CanvasElement): void
	{
	}
	private TexSubImage2D_1(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void
	{
	}
	private TexSubImage2D_2(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: ImageElement): void
	{
	}
	private TexSubImage2D_3(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void
	{
	}
	private TexSubImage2D_4(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: VideoElement): void
	{
	}
	Uniform1f(location: WebGLUniformLocation, x: number): void
	{
	}
	Uniform1fv(location: WebGLUniformLocation, v: number[]): void;
	Uniform1fv(location: WebGLUniformLocation, v: Float32Array): void;
	Uniform1fv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform1fv_0(location, v);
			return;
		}
		this.Uniform1fv_1(location, v);
	}
	private Uniform1fv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform1fv_1(location: WebGLUniformLocation, v: Float32Array): void
	{
	}
	Uniform1i(location: WebGLUniformLocation, x: number): void
	{
	}
	Uniform1iv(location: WebGLUniformLocation, v: number[]): void;
	Uniform1iv(location: WebGLUniformLocation, v: Int32Array): void;
	Uniform1iv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform1iv_0(location, v);
			return;
		}
		this.Uniform1iv_1(location, v);
	}
	private Uniform1iv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform1iv_1(location: WebGLUniformLocation, v: Int32Array): void
	{
	}
	Uniform2f(location: WebGLUniformLocation, x: number, y: number): void
	{
	}
	Uniform2fv(location: WebGLUniformLocation, v: number[]): void;
	Uniform2fv(location: WebGLUniformLocation, v: Float32Array): void;
	Uniform2fv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform2fv_0(location, v);
			return;
		}
		this.Uniform2fv_1(location, v);
	}
	private Uniform2fv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform2fv_1(location: WebGLUniformLocation, v: Float32Array): void
	{
	}
	Uniform2i(location: WebGLUniformLocation, x: number, y: number): void
	{
	}
	Uniform2iv(location: WebGLUniformLocation, v: number[]): void;
	Uniform2iv(location: WebGLUniformLocation, v: Int32Array): void;
	Uniform2iv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform2iv_0(location, v);
			return;
		}
		this.Uniform2iv_1(location, v);
	}
	private Uniform2iv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform2iv_1(location: WebGLUniformLocation, v: Int32Array): void
	{
	}
	Uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void
	{
	}
	Uniform3fv(location: WebGLUniformLocation, v: number[]): void;
	Uniform3fv(location: WebGLUniformLocation, v: Float32Array): void;
	Uniform3fv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform3fv_0(location, v);
			return;
		}
		this.Uniform3fv_1(location, v);
	}
	private Uniform3fv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform3fv_1(location: WebGLUniformLocation, v: Float32Array): void
	{
	}
	Uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void
	{
	}
	Uniform3iv(location: WebGLUniformLocation, v: number[]): void;
	Uniform3iv(location: WebGLUniformLocation, v: Int32Array): void;
	Uniform3iv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform3iv_0(location, v);
			return;
		}
		this.Uniform3iv_1(location, v);
	}
	private Uniform3iv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform3iv_1(location: WebGLUniformLocation, v: Int32Array): void
	{
	}
	Uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void
	{
	}
	Uniform4fv(location: WebGLUniformLocation, v: number[]): void;
	Uniform4fv(location: WebGLUniformLocation, v: Float32Array): void;
	Uniform4fv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform4fv_0(location, v);
			return;
		}
		this.Uniform4fv_1(location, v);
	}
	private Uniform4fv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform4fv_1(location: WebGLUniformLocation, v: Float32Array): void
	{
	}
	Uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void
	{
	}
	Uniform4iv(location: WebGLUniformLocation, v: number[]): void;
	Uniform4iv(location: WebGLUniformLocation, v: Int32Array): void;
	Uniform4iv(location: WebGLUniformLocation, v: any): void
	{
		if (arguments.length === 2 && (location === null || location instanceof WebGLUniformLocation) && (v === null || v instanceof Array))
		{
			this.Uniform4iv_0(location, v);
			return;
		}
		this.Uniform4iv_1(location, v);
	}
	private Uniform4iv_0(location: WebGLUniformLocation, v: number[]): void
	{
	}
	private Uniform4iv_1(location: WebGLUniformLocation, v: Int32Array): void
	{
	}
	UniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
	UniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
	UniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: any): void
	{
		if (arguments.length === 3 && (location === null || location instanceof WebGLUniformLocation) && (transpose === null || transpose.constructor === Boolean) && (value === null || value instanceof Array))
		{
			this.UniformMatrix2fv_0(location, transpose, value);
			return;
		}
		this.UniformMatrix2fv_1(location, transpose, value);
	}
	private UniformMatrix2fv_0(location: WebGLUniformLocation, transpose: boolean, value: number[]): void
	{
	}
	private UniformMatrix2fv_1(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void
	{
	}
	UniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
	UniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
	UniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: any): void
	{
		if (arguments.length === 3 && (location === null || location instanceof WebGLUniformLocation) && (transpose === null || transpose.constructor === Boolean) && (value === null || value instanceof Array))
		{
			this.UniformMatrix3fv_0(location, transpose, value);
			return;
		}
		this.UniformMatrix3fv_1(location, transpose, value);
	}
	private UniformMatrix3fv_0(location: WebGLUniformLocation, transpose: boolean, value: number[]): void
	{
	}
	private UniformMatrix3fv_1(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void
	{
	}
	UniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;
	UniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;
	UniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: any): void
	{
		if (arguments.length === 3 && (location === null || location instanceof WebGLUniformLocation) && (transpose === null || transpose.constructor === Boolean) && (value === null || value instanceof Array))
		{
			this.UniformMatrix4fv_0(location, transpose, value);
			return;
		}
		this.UniformMatrix4fv_1(location, transpose, value);
	}
	private UniformMatrix4fv_0(location: WebGLUniformLocation, transpose: boolean, value: number[]): void
	{
	}
	private UniformMatrix4fv_1(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void
	{
	}
	UseProgram(program: WebGLProgram): void
	{
	}
	ValidateProgram(program: WebGLProgram): void
	{
	}
	VertexAttrib1f(indx: number, x: number): void
	{
	}
	VertexAttrib1fv(indx: number, values: number[]): void;
	VertexAttrib1fv(indx: number, values: Float32Array): void;
	VertexAttrib1fv(indx: number, values: any): void
	{
		if (arguments.length === 2 && (indx === null || indx.constructor === Number) && (values === null || values instanceof Array))
		{
			this.VertexAttrib1fv_0(indx, values);
			return;
		}
		this.VertexAttrib1fv_1(indx, values);
	}
	private VertexAttrib1fv_0(indx: number, values: number[]): void
	{
	}
	private VertexAttrib1fv_1(indx: number, values: Float32Array): void
	{
	}
	VertexAttrib2f(indx: number, x: number, y: number): void
	{
	}
	VertexAttrib2fv(indx: number, values: number[]): void;
	VertexAttrib2fv(indx: number, values: Float32Array): void;
	VertexAttrib2fv(indx: number, values: any): void
	{
		if (arguments.length === 2 && (indx === null || indx.constructor === Number) && (values === null || values instanceof Array))
		{
			this.VertexAttrib2fv_0(indx, values);
			return;
		}
		this.VertexAttrib2fv_1(indx, values);
	}
	private VertexAttrib2fv_0(indx: number, values: number[]): void
	{
	}
	private VertexAttrib2fv_1(indx: number, values: Float32Array): void
	{
	}
	VertexAttrib3f(indx: number, x: number, y: number, z: number): void
	{
	}
	VertexAttrib3fv(indx: number, values: number[]): void;
	VertexAttrib3fv(indx: number, values: Float32Array): void;
	VertexAttrib3fv(indx: number, values: any): void
	{
		if (arguments.length === 2 && (indx === null || indx.constructor === Number) && (values === null || values instanceof Array))
		{
			this.VertexAttrib3fv_0(indx, values);
			return;
		}
		this.VertexAttrib3fv_1(indx, values);
	}
	private VertexAttrib3fv_0(indx: number, values: number[]): void
	{
	}
	private VertexAttrib3fv_1(indx: number, values: Float32Array): void
	{
	}
	VertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void
	{
	}
	VertexAttrib4fv(indx: number, values: number[]): void;
	VertexAttrib4fv(indx: number, values: Float32Array): void;
	VertexAttrib4fv(indx: number, values: any): void
	{
		if (arguments.length === 2 && (indx === null || indx.constructor === Number) && (values === null || values instanceof Array))
		{
			this.VertexAttrib4fv_0(indx, values);
			return;
		}
		this.VertexAttrib4fv_1(indx, values);
	}
	private VertexAttrib4fv_0(indx: number, values: number[]): void
	{
	}
	private VertexAttrib4fv_1(indx: number, values: Float32Array): void
	{
	}
	VertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void
	{
	}
	Viewport(x: number, y: number, width: number, height: number): void
	{
	}
}
class WebGL2RenderingContext extends WebGLRenderingContext
{
	static ANY_SAMPLES_PASSED: number = 35887;
	static ANY_SAMPLES_PASSED_CONSERVATIVE: number = 36202;
	static COLOR_ATTACHMENT1: number = 36065;
	static COLOR_ATTACHMENT10: number = 36074;
	static COLOR_ATTACHMENT11: number = 36075;
	static COLOR_ATTACHMENT12: number = 36076;
	static COLOR_ATTACHMENT13: number = 36077;
	static COLOR_ATTACHMENT14: number = 36078;
	static COLOR_ATTACHMENT15: number = 36079;
	static COLOR_ATTACHMENT2: number = 36066;
	static COLOR_ATTACHMENT3: number = 36067;
	static COLOR_ATTACHMENT4: number = 36068;
	static COLOR_ATTACHMENT5: number = 36069;
	static COLOR_ATTACHMENT6: number = 36070;
	static COLOR_ATTACHMENT7: number = 36071;
	static COLOR_ATTACHMENT8: number = 36072;
	static COLOR_ATTACHMENT9: number = 36073;
	static CURRENT_QUERY: number = 34917;
	static DRAW_BUFFER0: number = 34853;
	static DRAW_BUFFER1: number = 34854;
	static DRAW_BUFFER10: number = 34863;
	static DRAW_BUFFER11: number = 34864;
	static DRAW_BUFFER12: number = 34865;
	static DRAW_BUFFER13: number = 34866;
	static DRAW_BUFFER14: number = 34867;
	static DRAW_BUFFER15: number = 34868;
	static DRAW_BUFFER2: number = 34855;
	static DRAW_BUFFER3: number = 34856;
	static DRAW_BUFFER4: number = 34857;
	static DRAW_BUFFER5: number = 34858;
	static DRAW_BUFFER6: number = 34859;
	static DRAW_BUFFER7: number = 34860;
	static DRAW_BUFFER8: number = 34861;
	static DRAW_BUFFER9: number = 34862;
	static FRAGMENT_SHADER_DERIVATIVE_HINT: number = 35723;
	static MAX: number = 32776;
	static MAX_COLOR_ATTACHMENTS: number = 36063;
	static MAX_DRAW_BUFFERS: number = 34852;
	static MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: number = 35979;
	static MIN: number = 32775;
	static QUERY_RESULT: number = 34918;
	static QUERY_RESULT_AVAILABLE: number = 34919;
	static RASTERIZER_DISCARD: number = 35977;
	static TRANSFORM_FEEDBACK_BUFFER: number = 35982;
	static TRANSFORM_FEEDBACK_BUFFER_BINDING: number = 35983;
	static TRANSFORM_FEEDBACK_BUFFER_SIZE: number = 35973;
	static TRANSFORM_FEEDBACK_BUFFER_START: number = 35972;
	static TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: number = 35976;
	static UNSIGNED_INT_24_8: number = 34042;
	static VERTEX_ARRAY_BINDING: number = 34229;
	static VERTEX_ATTRIB_ARRAY_DIVISOR: number = 35070;
	constructor()
	{
		super();
	}
	BeginQuery(target: number, queryObject: WebGLQuery): void
	{
	}
	BindBufferBase(target: number, index: number, buffer: WebGLBuffer): void
	{
	}
	BindBufferRange(target: number, index: number, buffer: WebGLBuffer, offset: number, size: number): void
	{
	}
	BindVertexArray(arrayObject: WebGLVertexArray): void
	{
	}
	CreateQuery(): WebGLQuery
	{
		return null;
	}
	CreateVertexArray(): WebGLVertexArray
	{
		return null;
	}
	DeleteQuery(queryObject: WebGLQuery): void
	{
	}
	DeleteVertexArray(arrayObject: WebGLVertexArray): void
	{
	}
	DrawArraysInstanced(mode: number, first: number, count: number, primcount: number): void
	{
	}
	DrawBuffers(buffers: number[]): void
	{
	}
	DrawElementsInstanced(mode: number, count: number, type: number, offset: number, primcount: number): void
	{
	}
	EndQuery(target: number): void
	{
	}
	GetParameterIndexed(pname: number, index: number): any
	{
		return null;
	}
	GetQuery(target: number, pname: number): WebGLQuery
	{
		return null;
	}
	GetQueryObject(queryObject: WebGLQuery, pname: number): any
	{
		return null;
	}
	IsQuery(queryObject: WebGLQuery): boolean
	{
		return false;
	}
	IsVertexArray(arrayObject: WebGLVertexArray): boolean
	{
		return false;
	}
	VertexAttribDivisor(index: number, divisor: number): void
	{
	}
}
class WebGLActiveInfo extends NObject
{
	get Name(): string
	{
		return null;
	}
	get Size(): number
	{
		return 0;
	}
	get Type(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLBuffer extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLContextAttributes extends NObject
{
	Alpha: boolean = false;
	Antialias: boolean = false;
	Depth: boolean = false;
	PremultipliedAlpha: boolean = false;
	PreserveDrawingBuffer: boolean = false;
	Stencil: boolean = false;
	constructor()
	{
		super();
	}
}
class WebGLExtensionColorBufferFloat extends NObject
{
	get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT(): number
	{
		return 0;
	}
	get RGB32F_EXT(): number
	{
		return 0;
	}
	get RGBA32F_EXT(): number
	{
		return 0;
	}
	get UNSIGNED_NORMALIZED_EXT(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionColorBufferHalfFloat extends NObject
{
	get FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT(): number
	{
		return 0;
	}
	get RGB16F_EXT(): number
	{
		return 0;
	}
	get RGBA16F_EXT(): number
	{
		return 0;
	}
	get UNSIGNED_NORMALIZED_EXT(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionCompressedTextureATC extends NObject
{
	get COMPRESSED_RGB_ATC_WEBGL(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionCompressedTextureETC1 extends NObject
{
	get COMPRESSED_RGB_ETC1_WEBGL(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionCompressedTexturePVRTC extends NObject
{
	get COMPRESSED_RGB_PVRTC_2BPPV1(): number
	{
		return 0;
	}
	get COMPRESSED_RGB_PVRTC_4BPPV1(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_PVRTC_2BPPV1(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_PVRTC_4BPPV1(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionCompressedTextureS3TC extends NObject
{
	get COMPRESSED_RGB_S3TC_DXT1_EXT(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_S3TC_DXT1_EXT(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_S3TC_DXT3_EXT(): number
	{
		return 0;
	}
	get COMPRESSED_RGBA_S3TC_DXT5_EXT(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionDebugRendererInfo extends NObject
{
	get UNMASKED_RENDERER_WEBGL(): number
	{
		return 0;
	}
	get UNMASKED_VENDOR_WEBGL(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionDebugShaders extends NObject
{
	constructor()
	{
		super();
	}
	GetTranslatedShaderSource(shader: WebGLShader): string
	{
		return null;
	}
}
class WebGLExtensionDepthTexture extends NObject
{
	get UNSIGNED_INT_24_8_WEBGL(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionDrawBuffers extends NObject
{
	get COLOR_ATTACHMENT0_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT1_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT10_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT11_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT12_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT13_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT14_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT15_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT2_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT3_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT4_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT5_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT6_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT7_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT8_WEBGL(): number
	{
		return 0;
	}
	get COLOR_ATTACHMENT9_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER0_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER1_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER10_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER11_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER12_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER13_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER14_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER15_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER2_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER3_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER4_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER5_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER6_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER7_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER8_WEBGL(): number
	{
		return 0;
	}
	get DRAW_BUFFER9_WEBGL(): number
	{
		return 0;
	}
	get MAX_COLOR_ATTACHMENTS_WEBGL(): number
	{
		return 0;
	}
	get MAX_DRAW_BUFFERS_WEBGL(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	DrawBuffersWEBGL(buffers: number[]): void
	{
	}
}
class WebGLExtensionElementIndexUint extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLExtensionFragDepth extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLExtensionInstancedArrays extends NObject
{
	get VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	DrawArraysInstancedANGLE(mode: number, first: number, count: number, primcount: number): void
	{
	}
	DrawElementsInstancedANGLE(mode: number, count: number, type: number, offset: number, primcount: number): void
	{
	}
	VertexAttribDivisorANGLE(index: number, divisor: number): void
	{
	}
}
class WebGLExtensionLoseContext extends NObject
{
	constructor()
	{
		super();
	}
	LoseContext(): void
	{
	}
	RestoreContext(): void
	{
	}
}
class WebGLExtensionStandardDerivatives extends NObject
{
	get FRAGMENT_SHADER_DERIVATIVE_HINT_OES(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionTextureFilterAnisotropic extends NObject
{
	get MAX_TEXTURE_MAX_ANISOTROPY_EXT(): number
	{
		return 0;
	}
	get TEXTURE_MAX_ANISOTROPY_EXT(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionTextureFloat extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLExtensionTextureFloatLinear extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLExtensionTextureHalfFloat extends NObject
{
	get HALF_FLOAT_OES(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLExtensionTextureHalfFloatLinear extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLExtensionVertexArray extends NObject
{
	get VERTEX_ARRAY_BINDING_OES(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	BindVertexArrayOES(arrayObject: WebGLVertexArray): void
	{
	}
	CreateVertexArrayOES(): WebGLVertexArray
	{
		return null;
	}
	DeleteVertexArrayOES(arrayObject: WebGLVertexArray): void
	{
	}
	IsVertexArrayOES(arrayObject: WebGLVertexArray): boolean
	{
		return false;
	}
}
class WebGLFramebuffer extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLProgram extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLQuery extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLRenderbuffer extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLShader extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLShaderPrecisionFormat extends NObject
{
	get Precision(): number
	{
		return 0;
	}
	get RangeMax(): number
	{
		return 0;
	}
	get RangeMin(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class WebGLTexture extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLUniformLocation extends NObject
{
	constructor()
	{
		super();
	}
}
class WebGLVertexArray extends NObject
{
	constructor()
	{
		super();
	}
}
class BatteryManager extends EventTarget
{
	get Charging(): boolean
	{
		return false;
	}
	get ChargingTime(): number
	{
		return 0.0;
	}
	get DischargingTime(): number
	{
		return 0.0;
	}
	get Level(): number
	{
		return 0.0;
	}
	set OnChargingchange(value: (event: Event) => void)
	{
	}
	get OnChargingchange(): (event: Event) => void
	{
		return null;
	}
	set OnChargingtimechange(value: (event: Event) => void)
	{
	}
	get OnChargingtimechange(): (event: Event) => void
	{
		return null;
	}
	set OnDischargingtimechange(value: (event: Event) => void)
	{
	}
	get OnDischargingtimechange(): (event: Event) => void
	{
		return null;
	}
	set OnLevelchange(value: (event: Event) => void)
	{
	}
	get OnLevelchange(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: BatteryManagerEvents, listener: () => void): void;
	AddEventListener(type: BatteryManagerEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: BatteryManagerEvents, listener: (event: Event) => void): void;
	AddEventListener(type: BatteryManagerEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void): void;
	AddEventListener(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void;
	AddEventListener(type: BatteryManagerEvents, listener: IEventListener): void;
	AddEventListener(type: BatteryManagerEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: BatteryManager, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: BatteryManagerEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: BatteryManagerEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: BatteryManagerEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: BatteryManagerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: BatteryManagerEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: BatteryManagerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: BatteryManager, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: BatteryManagerEvents, listener: () => void): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: IEventListener): void;
	RemoveEventListener(type: BatteryManagerEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: BatteryManager, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: BatteryManagerEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: BatteryManagerEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: BatteryManagerEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: BatteryManagerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: BatteryManagerEvents, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: BatteryManagerEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: BatteryManagerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: BatteryManager, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: BatteryManager, event: Event) => void, capture: boolean): void
	{
	}
}
enum BatteryManagerEvents
{
	Chargingchange,
	Chargingtimechange,
	Dischargingtimechange,
	Levelchange
}
class DeviceAcceleration extends NObject
{
	get X(): Nullable<number>
	{
		return null;
	}
	get Y(): Nullable<number>
	{
		return null;
	}
	get Z(): Nullable<number>
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class DeviceAccelerationInit extends NObject
{
	X: Nullable<number> = null;
	Y: Nullable<number> = null;
	Z: Nullable<number> = null;
	constructor()
	{
		super();
	}
}
class DeviceLightEvent extends Event
{
	get Value(): number
	{
		return 0.0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: DeviceLightEventInit);
	constructor(type?: string, eventInitDict?: DeviceLightEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: DeviceLightEventInit): void
	{
	}
}
class DeviceLightEventInit extends EventInit
{
	Value: number = 0;
	constructor()
	{
		super();
	}
}
class DeviceMotionEvent extends Event
{
	get Acceleration(): DeviceAcceleration
	{
		return null;
	}
	get AccelerationIncludingGravity(): DeviceAcceleration
	{
		return null;
	}
	get Interval(): Nullable<number>
	{
		return null;
	}
	get RotationRate(): DeviceRotationRate
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: DeviceMotionEventInit);
	constructor(type?: string, eventInitDict?: DeviceMotionEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: DeviceMotionEventInit): void
	{
	}
	InitDeviceMotionEvent(type: string, canBubble: boolean, cancelable: boolean, acceleration: DeviceAccelerationInit, accelerationIncludingGravity: DeviceAccelerationInit, rotationRate: DeviceRotationRateInit, interval: Nullable<number>): void
	{
	}
}
class DeviceMotionEventInit extends EventInit
{
	Acceleration: DeviceAccelerationInit = null;
	AccelerationIncludingGravity: DeviceAccelerationInit = null;
	Interval: Nullable<number> = null;
	RotationRate: DeviceRotationRateInit = null;
	constructor()
	{
		super();
	}
}
class DeviceOrientationEvent extends Event
{
	get Absolute(): boolean
	{
		return false;
	}
	get Alpha(): number
	{
		return 0.0;
	}
	get Beta(): number
	{
		return 0.0;
	}
	get Gamma(): number
	{
		return 0.0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: DeviceOrientationEventInit);
	constructor(type?: string, eventInitDict?: DeviceOrientationEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: DeviceOrientationEventInit): void
	{
	}
	InitDeviceOrientationEvent(type: string, canBubble: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void
	{
	}
}
class DeviceOrientationEventInit extends EventInit
{
	Absolute: boolean = false;
	Alpha: number = 0;
	Beta: number = 0;
	Gamma: number = 0;
	constructor()
	{
		super();
	}
}
class DeviceProximityEvent extends Event
{
	get Max(): number
	{
		return 0.0;
	}
	get Min(): number
	{
		return 0.0;
	}
	get Value(): number
	{
		return 0.0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: DeviceProximityEventInit);
	constructor(type?: string, eventInitDict?: DeviceProximityEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: DeviceProximityEventInit): void
	{
	}
}
class DeviceProximityEventInit extends EventInit
{
	Max: number = 0;
	Min: number = 0;
	Value: number = 0;
	constructor()
	{
		super();
	}
}
class DeviceRotationRate extends NObject
{
	get Alpha(): Nullable<number>
	{
		return null;
	}
	get Beta(): Nullable<number>
	{
		return null;
	}
	get Gamma(): Nullable<number>
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class DeviceRotationRateInit extends NObject
{
	Alpha: Nullable<number> = null;
	Beta: Nullable<number> = null;
	Gamma: Nullable<number> = null;
	constructor()
	{
		super();
	}
}
class UserProximityEvent extends Event
{
	get Near(): boolean
	{
		return false;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: UserProximityEventInit);
	constructor(type?: string, eventInitDict?: UserProximityEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: UserProximityEventInit): void
	{
	}
}
class UserProximityEventInit extends EventInit
{
	Near: boolean = false;
	constructor()
	{
		super();
	}
}
class Notification extends EventTarget
{
	get Body(): string
	{
		return null;
	}
	get Dir(): NotificationDirection
	{
		return NotificationDirection.Auto;
	}
	get Icon(): string
	{
		return null;
	}
	get Lang(): string
	{
		return null;
	}
	set OnClick(value: (event: Event) => void)
	{
	}
	get OnClick(): (event: Event) => void
	{
		return null;
	}
	set OnClose(value: (event: Event) => void)
	{
	}
	get OnClose(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnShow(value: (event: Event) => void)
	{
	}
	get OnShow(): (event: Event) => void
	{
		return null;
	}
	static get Permission(): NotificationPermission
	{
		return NotificationPermission.Default;
	}
	get Tag(): string
	{
		return null;
	}
	get Title(): string
	{
		return null;
	}
	constructor();
	constructor(title: string);
	constructor(title: string, options: NotificationOptions);
	constructor(title?: string, options?: NotificationOptions)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (title === null || title.constructor === String))
		{
			super();
			this.constructor_1(title);
			return;
		}
		super();
		this.constructor_2(title, options);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(title: string): void
	{
	}
	private constructor_2(title: string, options: NotificationOptions): void
	{
	}
	AddEventListener(type: NotificationEvents, listener: () => void): void;
	AddEventListener(type: NotificationEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: NotificationEvents, listener: (event: Event) => void): void;
	AddEventListener(type: NotificationEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: NotificationEvents, listener: (target: Notification, event: Event) => void): void;
	AddEventListener(type: NotificationEvents, listener: (target: Notification, event: Event) => void, capture: boolean): void;
	AddEventListener(type: NotificationEvents, listener: IEventListener): void;
	AddEventListener(type: NotificationEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: Notification, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: Notification, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: NotificationEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: NotificationEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: NotificationEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: NotificationEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: NotificationEvents, listener: (target: Notification, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: NotificationEvents, listener: (target: Notification, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: NotificationEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: NotificationEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: Notification, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: Notification, event: Event) => void, capture: boolean): void
	{
	}
	Close(): void
	{
	}
	RemoveEventListener(type: NotificationEvents, listener: () => void): void;
	RemoveEventListener(type: NotificationEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: NotificationEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: NotificationEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: NotificationEvents, listener: (target: Notification, event: Event) => void): void;
	RemoveEventListener(type: NotificationEvents, listener: (target: Notification, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: NotificationEvents, listener: IEventListener): void;
	RemoveEventListener(type: NotificationEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: Notification, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: Notification, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: NotificationEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: NotificationEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: NotificationEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: NotificationEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: NotificationEvents, listener: (target: Notification, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: NotificationEvents, listener: (target: Notification, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: NotificationEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: NotificationEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: Notification, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: Notification, event: Event) => void, capture: boolean): void
	{
	}
	static RequestPermission(): void;
	static RequestPermission(permissionCallback: (permission: NotificationPermission) => void): void;
	static RequestPermission(permissionCallback?: (permission: NotificationPermission) => void): void
	{
		if (arguments.length === 0)
		{
			Notification.RequestPermission_0();
			return;
		}
		Notification.RequestPermission_1(permissionCallback);
	}
	private static RequestPermission_0(): void
	{
	}
	private static RequestPermission_1(permissionCallback: (permission: NotificationPermission) => void): void
	{
	}
}
enum NotificationDirection
{
	Auto,
	Ltr,
	Rtl
}
enum NotificationEvents
{
	Click,
	Close,
	Error,
	Show
}
class NotificationOptions extends NObject
{
	Body: string = null;
	Dir: NotificationDirection = 0;
	Icon: string = null;
	Lang: string = null;
	Tag: string = null;
	constructor()
	{
		super();
	}
}
enum NotificationPermission
{
	Default,
	Denied,
	Granted
}
class SpeechGrammar extends NObject
{
	set Src(value: string)
	{
	}
	get Src(): string
	{
		return null;
	}
	set Weight(value: number)
	{
	}
	get Weight(): number
	{
		return 0.0;
	}
	constructor()
	{
		super();
	}
}
class SpeechGrammarList extends NObject
{
	get_Item(index: number): SpeechGrammar
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddFromString($string: string): void;
	AddFromString($string: string, weight: number): void;
	AddFromString($string: string, weight?: number): void
	{
		if (arguments.length === 1 && ($string === null || $string.constructor === String))
		{
			this.AddFromString_0($string);
			return;
		}
		this.AddFromString_1($string, weight);
	}
	private AddFromString_0($string: string): void
	{
	}
	private AddFromString_1($string: string, weight: number): void
	{
	}
	AddFromURI(src: string): void;
	AddFromURI(src: string, weight: number): void;
	AddFromURI(src: string, weight?: number): void
	{
		if (arguments.length === 1 && (src === null || src.constructor === String))
		{
			this.AddFromURI_0(src);
			return;
		}
		this.AddFromURI_1(src, weight);
	}
	private AddFromURI_0(src: string): void
	{
	}
	private AddFromURI_1(src: string, weight: number): void
	{
	}
	GetEnumerator(): IEnumerator<SpeechGrammar>
	{
		return null;
	}
	Item(index: number): SpeechGrammar
	{
		return null;
	}
}
class SpeechRecognition extends EventTarget
{
	set Continuous(value: boolean)
	{
	}
	get Continuous(): boolean
	{
		return false;
	}
	set Grammars(value: SpeechGrammarList)
	{
	}
	get Grammars(): SpeechGrammarList
	{
		return null;
	}
	set InterimResults(value: boolean)
	{
	}
	get InterimResults(): boolean
	{
		return false;
	}
	set Lang(value: string)
	{
	}
	get Lang(): string
	{
		return null;
	}
	set MaxAlternatives(value: number)
	{
	}
	get MaxAlternatives(): number
	{
		return 0;
	}
	set OnAudioend(value: (event: Event) => void)
	{
	}
	get OnAudioend(): (event: Event) => void
	{
		return null;
	}
	set OnAudiostart(value: (event: Event) => void)
	{
	}
	get OnAudiostart(): (event: Event) => void
	{
		return null;
	}
	set OnEnd(value: (event: Event) => void)
	{
	}
	get OnEnd(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnNomatch(value: (event: Event) => void)
	{
	}
	get OnNomatch(): (event: Event) => void
	{
		return null;
	}
	set OnResult(value: (event: Event) => void)
	{
	}
	get OnResult(): (event: Event) => void
	{
		return null;
	}
	set OnSoundend(value: (event: Event) => void)
	{
	}
	get OnSoundend(): (event: Event) => void
	{
		return null;
	}
	set OnSoundstart(value: (event: Event) => void)
	{
	}
	get OnSoundstart(): (event: Event) => void
	{
		return null;
	}
	set OnSpeechend(value: (event: Event) => void)
	{
	}
	get OnSpeechend(): (event: Event) => void
	{
		return null;
	}
	set OnSpeechstart(value: (event: Event) => void)
	{
	}
	get OnSpeechstart(): (event: Event) => void
	{
		return null;
	}
	set OnStart(value: (event: Event) => void)
	{
	}
	get OnStart(): (event: Event) => void
	{
		return null;
	}
	set ServiceURI(value: string)
	{
	}
	get ServiceURI(): string
	{
		return null;
	}
	Abort(): void
	{
	}
	AddEventListener(type: SpeechRecognitionEvents, listener: () => void): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: IEventListener): void;
	AddEventListener(type: SpeechRecognitionEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SpeechRecognition, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SpeechRecognitionEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SpeechRecognitionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SpeechRecognitionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SpeechRecognitionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SpeechRecognitionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SpeechRecognitionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SpeechRecognition, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: SpeechRecognitionEvents, listener: () => void): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: IEventListener): void;
	RemoveEventListener(type: SpeechRecognitionEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SpeechRecognition, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SpeechRecognitionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SpeechRecognitionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SpeechRecognitionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SpeechRecognitionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SpeechRecognitionEvents, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SpeechRecognitionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SpeechRecognitionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SpeechRecognition, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SpeechRecognition, event: Event) => void, capture: boolean): void
	{
	}
	Start(): void
	{
	}
	Stop(): void
	{
	}
	constructor()
	{
		super();
	}
}
class SpeechRecognitionAlternative extends NObject
{
	get Confidence(): number
	{
		return 0.0;
	}
	get Transcript(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SpeechRecognitionError extends Event
{
	get Error(): SpeechRecognitionErrorCode
	{
		return SpeechRecognitionErrorCode.NoSpeech;
	}
	get Message(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: SpeechRecognitionErrorInit);
	constructor(type?: string, eventInitDict?: SpeechRecognitionErrorInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: SpeechRecognitionErrorInit): void
	{
	}
}
enum SpeechRecognitionErrorCode
{
	NoSpeech,
	Aborted,
	AudioCapture,
	Network,
	NotAllowed,
	ServiceNotAllowed,
	BadGrammar,
	LanguageNotSupported
}
class SpeechRecognitionErrorInit extends EventInit
{
	Error: SpeechRecognitionErrorCode = 0;
	Message: string = null;
	constructor()
	{
		super();
	}
}
class SpeechRecognitionEvent extends Event
{
	get Emma(): DocumentBase
	{
		return null;
	}
	get Interpretation(): string
	{
		return null;
	}
	get ResultIndex(): number
	{
		return 0;
	}
	get Results(): any
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: SpeechRecognitionEventInit);
	constructor(type?: string, eventInitDict?: SpeechRecognitionEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: SpeechRecognitionEventInit): void
	{
	}
}
class SpeechRecognitionEventInit extends EventInit
{
	Emma: DocumentBase = null;
	Interpretation: string = null;
	ResultIndex: number = 0;
	Results: any = null;
	constructor()
	{
		super();
	}
}
enum SpeechRecognitionEvents
{
	Audioend,
	Audiostart,
	End,
	Error,
	Nomatch,
	Result,
	Soundend,
	Soundstart,
	Speechend,
	Speechstart,
	Start
}
class SpeechRecognitionResult extends NObject
{
	get_Item(index: number): SpeechRecognitionAlternative
	{
		return null;
	}
	get Final(): boolean
	{
		return false;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<SpeechRecognitionAlternative>
	{
		return null;
	}
	Item(index: number): SpeechRecognitionAlternative
	{
		return null;
	}
}
class SpeechRecognitionResultList extends NObject
{
	get_Item(index: number): SpeechRecognitionResult
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<SpeechRecognitionResult>
	{
		return null;
	}
	Item(index: number): SpeechRecognitionResult
	{
		return null;
	}
}
class SpeechSynthesis extends NObject
{
	get Paused(): boolean
	{
		return false;
	}
	get Pending(): boolean
	{
		return false;
	}
	get Speaking(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	Cancel(): void
	{
	}
	GetVoices(): SpeechSynthesisVoice[]
	{
		return null;
	}
	Pause(): void
	{
	}
	Resume(): void
	{
	}
	Speak(utterance: SpeechSynthesisUtterance): void
	{
	}
}
class SpeechSynthesisEvent extends Event
{
	get CharIndex(): number
	{
		return 0;
	}
	get ElapsedTime(): number
	{
		return 0.0;
	}
	get Name(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: SpeechSynthesisEventInit);
	constructor(type?: string, eventInitDict?: SpeechSynthesisEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: SpeechSynthesisEventInit): void
	{
	}
}
class SpeechSynthesisEventInit extends EventInit
{
	CharIndex: number = 0;
	ElapsedTime: number = 0;
	Name: string = null;
	constructor()
	{
		super();
	}
}
class SpeechSynthesisUtterance extends EventTarget
{
	set Lang(value: string)
	{
	}
	get Lang(): string
	{
		return null;
	}
	set OnBoundary(value: (event: Event) => void)
	{
	}
	get OnBoundary(): (event: Event) => void
	{
		return null;
	}
	set OnEnd(value: (event: Event) => void)
	{
	}
	get OnEnd(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnMark(value: (event: Event) => void)
	{
	}
	get OnMark(): (event: Event) => void
	{
		return null;
	}
	set OnPause(value: (event: Event) => void)
	{
	}
	get OnPause(): (event: Event) => void
	{
		return null;
	}
	set OnResume(value: (event: Event) => void)
	{
	}
	get OnResume(): (event: Event) => void
	{
		return null;
	}
	set OnStart(value: (event: Event) => void)
	{
	}
	get OnStart(): (event: Event) => void
	{
		return null;
	}
	set Pitch(value: number)
	{
	}
	get Pitch(): number
	{
		return 0.0;
	}
	set Rate(value: number)
	{
	}
	get Rate(): number
	{
		return 0.0;
	}
	set Text(value: string)
	{
	}
	get Text(): string
	{
		return null;
	}
	set Voice(value: SpeechSynthesisVoice)
	{
	}
	get Voice(): SpeechSynthesisVoice
	{
		return null;
	}
	set Volume(value: number)
	{
	}
	get Volume(): number
	{
		return 0.0;
	}
	constructor();
	constructor(text: string);
	constructor(text?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(text);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(text: string): void
	{
	}
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: () => void): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: IEventListener): void;
	AddEventListener(type: SpeechSynthesisUtteranceEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SpeechSynthesisUtteranceEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SpeechSynthesisUtteranceEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SpeechSynthesisUtteranceEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SpeechSynthesisUtteranceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: () => void): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: IEventListener): void;
	RemoveEventListener(type: SpeechSynthesisUtteranceEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SpeechSynthesisUtteranceEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SpeechSynthesisUtteranceEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SpeechSynthesisUtteranceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SpeechSynthesisUtteranceEvents, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SpeechSynthesisUtteranceEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SpeechSynthesisUtteranceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SpeechSynthesisUtterance, event: Event) => void, capture: boolean): void
	{
	}
}
enum SpeechSynthesisUtteranceEvents
{
	Boundary,
	End,
	Error,
	Mark,
	Pause,
	Resume,
	Start
}
class SpeechSynthesisVoice extends NObject
{
	get Default(): boolean
	{
		return false;
	}
	get Lang(): string
	{
		return null;
	}
	get LocalService(): boolean
	{
		return false;
	}
	get Name(): string
	{
		return null;
	}
	get VoiceURI(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class ElementRegistrationOptions extends NObject
{
	Extends: string = null;
	Prototype: any = null;
	constructor()
	{
		super();
	}
}
class ElementReplaceEvent extends Event
{
	get Upgrade(): Element
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: ElementReplaceEventInit);
	constructor(type?: string, eventInitDict?: ElementReplaceEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: ElementReplaceEventInit): void
	{
	}
	InitElementReplaceEvent(type: string, canBubble: boolean, cancelable: boolean, upgrade: Element): void
	{
	}
}
class ElementReplaceEventInit extends EventInit
{
	Upgrade: Element = null;
	constructor()
	{
		super();
	}
}
class LifecycleCallbacks extends NObject
{
	AttachedCallback: () => void = null;
	AttributeChangedCallback: (attrName: string, oldValue: string, newValue: string) => void = null;
	CreatedCallback: () => void = null;
	DetachedCallback: () => void = null;
	constructor()
	{
		super();
	}
}
class Blob extends NObject
{
	get Size(): number
	{
		return 0;
	}
	get Type(): string
	{
		return null;
	}
	constructor();
	constructor(blobParts: TypeOption<ArrayBuffer, ArrayBufferView, Blob, string>[]);
	constructor(blobParts: TypeOption<ArrayBuffer, ArrayBufferView, Blob, string>[], options: BlobPropertyBag);
	constructor(blobParts?: any, options?: BlobPropertyBag)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (blobParts === null || blobParts instanceof Array))
		{
			super();
			this.constructor_1(blobParts);
			return;
		}
		super();
		this.constructor_2(blobParts, options);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(blobParts: TypeOption<ArrayBuffer, ArrayBufferView, Blob, string>[]): void
	{
	}
	private constructor_2(blobParts: TypeOption<ArrayBuffer, ArrayBufferView, Blob, string>[], options: BlobPropertyBag): void
	{
	}
	Close(): void
	{
	}
	Slice(): Blob;
	Slice(start: number): Blob;
	Slice(start: number, end: number): Blob;
	Slice(start: number, end: number, contentType: string): Blob;
	Slice(start?: number, end?: number, contentType?: string): Blob
	{
		if (arguments.length === 0)
		{
			return this.Slice_0();
		}
		if (arguments.length === 1 && (start === null || start.constructor === Number))
		{
			return this.Slice_1(start);
		}
		if (arguments.length === 2 && (start === null || start.constructor === Number) && (end === null || end.constructor === Number))
		{
			return this.Slice_2(start, end);
		}
		return this.Slice_3(start, end, contentType);
	}
	private Slice_0(): Blob
	{
		return null;
	}
	private Slice_1(start: number): Blob
	{
		return null;
	}
	private Slice_2(start: number, end: number): Blob
	{
		return null;
	}
	private Slice_3(start: number, end: number, contentType: string): Blob
	{
		return null;
	}
}
class BlobEvent extends Event
{
	get Data(): Blob
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: BlobEventInit);
	constructor(type?: string, eventInitDict?: BlobEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: BlobEventInit): void
	{
	}
}
class BlobEventInit extends EventInit
{
	Data: Blob = null;
	constructor()
	{
		super();
	}
}
class BlobPropertyBag extends NObject
{
	Endings: EndingTypes = 0;
	Type: string = null;
	constructor()
	{
		super();
	}
}
enum EndingTypes
{
	Transparent,
	Native
}
class File extends Blob
{
	get LastModifiedDate(): DateTime
	{
		return null;
	}
	get Name(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class FileList extends NObject
{
	get_Item(index: number): File
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<File>
	{
		return null;
	}
	Item(index: number): File
	{
		return null;
	}
}
class FilePropertyBag extends BlobPropertyBag
{
	Name: string = null;
	constructor()
	{
		super();
	}
}
class FileReader extends EventTarget
{
	static DONE: number = 2;
	static EMPTY: number = 0;
	static LOADING: number = 1;
	get Error(): DOMError
	{
		return null;
	}
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadend(value: (event: Event) => void)
	{
	}
	get OnLoadend(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	get ReadyState(): number
	{
		return 0;
	}
	get Result(): any
	{
		return null;
	}
	Abort(): void
	{
	}
	AddEventListener(type: FileReaderEvents, listener: () => void): void;
	AddEventListener(type: FileReaderEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: FileReaderEvents, listener: (event: Event) => void): void;
	AddEventListener(type: FileReaderEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void): void;
	AddEventListener(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void, capture: boolean): void;
	AddEventListener(type: FileReaderEvents, listener: IEventListener): void;
	AddEventListener(type: FileReaderEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: FileReader, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: FileReader, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: FileReaderEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: FileReaderEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: FileReaderEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: FileReaderEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: FileReaderEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: FileReaderEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: FileReader, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: FileReader, event: Event) => void, capture: boolean): void
	{
	}
	ReadAsArrayBuffer(blob: Blob): void
	{
	}
	ReadAsBinaryString(filedata: Blob): void
	{
	}
	ReadAsDataURL(blob: Blob): void
	{
	}
	ReadAsText(blob: Blob): void;
	ReadAsText(blob: Blob, label: string): void;
	ReadAsText(blob: Blob, label?: string): void
	{
		if (arguments.length === 1 && (blob === null || blob instanceof Blob))
		{
			this.ReadAsText_0(blob);
			return;
		}
		this.ReadAsText_1(blob, label);
	}
	private ReadAsText_0(blob: Blob): void
	{
	}
	private ReadAsText_1(blob: Blob, label: string): void
	{
	}
	RemoveEventListener(type: FileReaderEvents, listener: () => void): void;
	RemoveEventListener(type: FileReaderEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: FileReaderEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: FileReaderEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void): void;
	RemoveEventListener(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: FileReaderEvents, listener: IEventListener): void;
	RemoveEventListener(type: FileReaderEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: FileReader, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: FileReader, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: FileReaderEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: FileReaderEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: FileReaderEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: FileReaderEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: FileReaderEvents, listener: (target: FileReader, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: FileReaderEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: FileReaderEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: FileReader, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: FileReader, event: Event) => void, capture: boolean): void
	{
	}
	constructor()
	{
		super();
	}
}
enum FileReaderEvents
{
	Abort,
	Error,
	Load,
	Loadend,
	Loadstart,
	Progress
}
class FileReaderSync extends NObject
{
	ReadAsArrayBuffer(blob: Blob): ArrayBuffer
	{
		return null;
	}
	ReadAsBinaryString(blob: Blob): string
	{
		return null;
	}
	ReadAsDataURL(blob: Blob): string
	{
		return null;
	}
	ReadAsText(blob: Blob): string;
	ReadAsText(blob: Blob, encoding: string): string;
	ReadAsText(blob: Blob, encoding?: string): string
	{
		if (arguments.length === 1 && (blob === null || blob instanceof Blob))
		{
			return this.ReadAsText_0(blob);
		}
		return this.ReadAsText_1(blob, encoding);
	}
	private ReadAsText_0(blob: Blob): string
	{
		return null;
	}
	private ReadAsText_1(blob: Blob, encoding: string): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class MediaRecorder extends EventTarget
{
	get MimeType(): string
	{
		return null;
	}
	set OnDataavailable(value: (event: Event) => void)
	{
	}
	get OnDataavailable(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnStop(value: (event: Event) => void)
	{
	}
	get OnStop(): (event: Event) => void
	{
		return null;
	}
	set OnWarning(value: (event: Event) => void)
	{
	}
	get OnWarning(): (event: Event) => void
	{
		return null;
	}
	get State(): RecordingState
	{
		return RecordingState.Inactive;
	}
	get Stream(): MediaStream
	{
		return null;
	}
	constructor();
	constructor(stream: MediaStream);
	constructor(stream: MediaStream, options: MediaRecorderOptions);
	constructor(stream?: MediaStream, options?: MediaRecorderOptions)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (stream === null || stream instanceof MediaStream))
		{
			super();
			this.constructor_1(stream);
			return;
		}
		super();
		this.constructor_2(stream, options);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(stream: MediaStream): void
	{
	}
	private constructor_2(stream: MediaStream, options: MediaRecorderOptions): void
	{
	}
	AddEventListener(type: MediaRecorderEvents, listener: () => void): void;
	AddEventListener(type: MediaRecorderEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaRecorderEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaRecorderEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void): void;
	AddEventListener(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaRecorderEvents, listener: IEventListener): void;
	AddEventListener(type: MediaRecorderEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaRecorder, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaRecorderEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaRecorderEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaRecorderEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaRecorderEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaRecorderEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaRecorderEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaRecorder, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void
	{
	}
	Pause(): void
	{
	}
	RemoveEventListener(type: MediaRecorderEvents, listener: () => void): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaRecorderEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaRecorder, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaRecorderEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaRecorderEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaRecorderEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaRecorderEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaRecorderEvents, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaRecorderEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaRecorderEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaRecorder, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaRecorder, event: Event) => void, capture: boolean): void
	{
	}
	RequestData(): void
	{
	}
	Resume(): void
	{
	}
	Start(): void;
	Start(timeSlice: number): void;
	Start(timeSlice?: number): void
	{
		if (arguments.length === 0)
		{
			this.Start_0();
			return;
		}
		this.Start_1(timeSlice);
	}
	private Start_0(): void
	{
	}
	private Start_1(timeSlice: number): void
	{
	}
	Stop(): void
	{
	}
}
enum MediaRecorderEvents
{
	Dataavailable,
	Error,
	Stop,
	Warning
}
class MediaRecorderOptions extends NObject
{
	MimeType: string = null;
	constructor()
	{
		super();
	}
}
class RecordErrorEvent extends Event
{
	get Name(): string
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: RecordErrorEventInit);
	constructor(type?: string, eventInitDict?: RecordErrorEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: RecordErrorEventInit): void
	{
	}
}
class RecordErrorEventInit extends EventInit
{
	Name: string = null;
	constructor()
	{
		super();
	}
}
enum RecordingState
{
	Inactive,
	Recording,
	Paused
}
class MediaSource extends EventTarget
{
	get ActiveSourceBuffers(): SourceBufferList
	{
		return null;
	}
	set Duration(value: number)
	{
	}
	get Duration(): number
	{
		return 0.0;
	}
	get ReadyState(): MediaSourceReadyState
	{
		return MediaSourceReadyState.Closed;
	}
	get SourceBuffers(): SourceBufferList
	{
		return null;
	}
	AddEventListener(type: MediaSourceEvents, listener: () => void): void;
	AddEventListener(type: MediaSourceEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MediaSourceEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MediaSourceEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void): void;
	AddEventListener(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MediaSourceEvents, listener: IEventListener): void;
	AddEventListener(type: MediaSourceEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MediaSource, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MediaSource, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MediaSourceEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MediaSourceEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MediaSourceEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MediaSourceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MediaSourceEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MediaSourceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MediaSource, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MediaSource, event: Event) => void, capture: boolean): void
	{
	}
	AddSourceBuffer(type: string): SourceBuffer
	{
		return null;
	}
	EndOfStream(): void;
	EndOfStream(error: MediaSourceEndOfStreamError): void;
	EndOfStream(error?: MediaSourceEndOfStreamError): void
	{
		if (arguments.length === 0)
		{
			this.EndOfStream_0();
			return;
		}
		this.EndOfStream_1(error);
	}
	private EndOfStream_0(): void
	{
	}
	private EndOfStream_1(error: MediaSourceEndOfStreamError): void
	{
	}
	static IsTypeSupported(type: string): boolean
	{
		return false;
	}
	RemoveEventListener(type: MediaSourceEvents, listener: () => void): void;
	RemoveEventListener(type: MediaSourceEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MediaSourceEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MediaSourceEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void): void;
	RemoveEventListener(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MediaSourceEvents, listener: IEventListener): void;
	RemoveEventListener(type: MediaSourceEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MediaSource, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MediaSource, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MediaSourceEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MediaSourceEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MediaSourceEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MediaSourceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MediaSourceEvents, listener: (target: MediaSource, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MediaSourceEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MediaSourceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MediaSource, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MediaSource, event: Event) => void, capture: boolean): void
	{
	}
	RemoveSourceBuffer(sourceBuffer: SourceBuffer): void
	{
	}
	constructor()
	{
		super();
	}
}
enum MediaSourceEndOfStreamError
{
	Network,
	Decode
}
enum MediaSourceEvents
{

}
enum MediaSourceReadyState
{
	Closed,
	Open,
	Ended
}
class FormData extends NObject
{
	constructor();
	constructor(form: FormElement);
	constructor(form?: FormElement)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(form);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(form: FormElement): void
	{
	}
	Append(name: string, value: Blob): void;
	Append(name: string, value: Blob, filename: string): void;
	Append(name: string, value: string): void;
	Append(name: string, value: any, filename?: string): void
	{
		if (arguments.length === 2 && (name === null || name.constructor === String) && (value === null || value instanceof Blob))
		{
			this.Append_0(name, value);
			return;
		}
		if (arguments.length === 3 && (name === null || name.constructor === String) && (value === null || value instanceof Blob) && (filename === null || filename.constructor === String))
		{
			this.Append_1(name, value, filename);
			return;
		}
		this.Append_2(name, value);
	}
	private Append_0(name: string, value: Blob): void
	{
	}
	private Append_1(name: string, value: Blob, filename: string): void
	{
	}
	private Append_2(name: string, value: string): void
	{
	}
}
class ProgressEvent extends Event
{
	get LengthComputable(): boolean
	{
		return false;
	}
	get Loaded(): number
	{
		return 0;
	}
	get Total(): number
	{
		return 0;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: ProgressEventInit);
	constructor(type?: string, eventInitDict?: ProgressEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: ProgressEventInit): void
	{
	}
}
class ProgressEventInit extends EventInit
{
	LengthComputable: boolean = false;
	Loaded: number = 0;
	Total: number = 0;
	constructor()
	{
		super();
	}
}
enum ReadyState
{
	Done = 4,
	HeadersReceived = 2,
	Loading,
	Opened = 1,
	Unsent = 0
}
class XmlHttpRequestEventTarget extends EventTarget
{
	set OnAbort(value: (event: Event) => void)
	{
	}
	get OnAbort(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnLoad(value: (event: Event) => void)
	{
	}
	get OnLoad(): (event: Event) => void
	{
		return null;
	}
	set OnLoadend(value: (event: Event) => void)
	{
	}
	get OnLoadend(): (event: Event) => void
	{
		return null;
	}
	set OnLoadstart(value: (event: Event) => void)
	{
	}
	get OnLoadstart(): (event: Event) => void
	{
		return null;
	}
	set OnProgress(value: (event: Event) => void)
	{
	}
	get OnProgress(): (event: Event) => void
	{
		return null;
	}
	set OnTimeout(value: (event: Event) => void)
	{
	}
	get OnTimeout(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: () => void): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlHttpRequestEventTargetEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlHttpRequestEventTargetEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlHttpRequestEventTargetEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlHttpRequestEventTargetEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlHttpRequestEventTargetEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlHttpRequestEventTargetEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlHttpRequestEventTargetEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlHttpRequestEventTargetEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlHttpRequestEventTargetEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlHttpRequestEventTargetEvents, listener: (target: XmlHttpRequestEventTarget, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlHttpRequestEventTargetEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlHttpRequestEventTargetEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
class XmlHttpRequest extends XmlHttpRequestEventTarget
{
	static DONE: number = 4;
	static HEADERS_RECEIVED: number = 2;
	static LOADING: number = 3;
	static OPENED: number = 1;
	static UNSENT: number = 0;
	set OnReadyStateChange(value: (event: Event) => void)
	{
	}
	get OnReadyStateChange(): (event: Event) => void
	{
		return null;
	}
	get ReadyState(): ReadyState
	{
		return ReadyState.Unsent;
	}
	get Response(): any
	{
		return null;
	}
	get ResponseText(): string
	{
		return null;
	}
	set ResponseType(value: XmlHttpRequestResponseType)
	{
	}
	get ResponseType(): XmlHttpRequestResponseType
	{
		return XmlHttpRequestResponseType.String;
	}
	get ResponseXML(): DocumentBase
	{
		return null;
	}
	get Status(): number
	{
		return 0;
	}
	get StatusText(): string
	{
		return null;
	}
	set Timeout(value: number)
	{
	}
	get Timeout(): number
	{
		return 0;
	}
	get Upload(): XmlHttpRequestUpload
	{
		return null;
	}
	set WithCredentials(value: boolean)
	{
	}
	get WithCredentials(): boolean
	{
		return false;
	}
	Abort(): void
	{
	}
	new AddEventListener(type: string, listener: (target: XmlHttpRequest, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: () => void): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlHttpRequestEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlHttpRequest, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlHttpRequestEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlHttpRequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlHttpRequestEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlHttpRequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlHttpRequestEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlHttpRequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	GetAllResponseHeaders(): string
	{
		return null;
	}
	GetResponseHeader(header: string): string
	{
		return null;
	}
	Open(method: string, url: string): void;
	Open(method: string, url: string, async: boolean): void;
	Open(method: string, url: string, async: boolean, user: string): void;
	Open(method: string, url: string, async: boolean, user: string, password: string): void;
	Open(verb: HttpVerb, url: string): void;
	Open(verb: HttpVerb, url: string, async: boolean): void;
	Open(verb: HttpVerb, url: string, async: boolean, userName: string, password: string): void;
	Open(methodOrVerb: any, url: string, async?: boolean, userOrUserName?: string, password?: string): void
	{
		if (arguments.length === 2 && (methodOrVerb === null || methodOrVerb.constructor === String) && (url === null || url.constructor === String))
		{
			this.Open_0(methodOrVerb, url);
			return;
		}
		if (arguments.length === 3 && (methodOrVerb === null || methodOrVerb.constructor === String) && (url === null || url.constructor === String) && (async === null || async.constructor === Boolean))
		{
			this.Open_1(methodOrVerb, url, async);
			return;
		}
		if (arguments.length === 4 && (methodOrVerb === null || methodOrVerb.constructor === String) && (url === null || url.constructor === String) && (async === null || async.constructor === Boolean) && (userOrUserName === null || userOrUserName.constructor === String))
		{
			this.Open_2(methodOrVerb, url, async, userOrUserName);
			return;
		}
		if (arguments.length === 5 && (methodOrVerb === null || methodOrVerb.constructor === String) && (url === null || url.constructor === String) && (async === null || async.constructor === Boolean) && (userOrUserName === null || userOrUserName.constructor === String) && (password === null || password.constructor === String))
		{
			this.Open_3(methodOrVerb, url, async, userOrUserName, password);
			return;
		}
		if (arguments.length === 2 && (methodOrVerb === null || methodOrVerb.constructor === Number) && (url === null || url.constructor === String))
		{
			this.Open_4(methodOrVerb, url);
			return;
		}
		if (arguments.length === 3 && (methodOrVerb === null || methodOrVerb.constructor === Number) && (url === null || url.constructor === String) && (async === null || async.constructor === Boolean))
		{
			this.Open_5(methodOrVerb, url, async);
			return;
		}
		this.Open_6(methodOrVerb, url, async, userOrUserName, password);
	}
	private Open_0(method: string, url: string): void
	{
	}
	private Open_1(method: string, url: string, async: boolean): void
	{
	}
	private Open_2(method: string, url: string, async: boolean, user: string): void
	{
	}
	private Open_3(method: string, url: string, async: boolean, user: string, password: string): void
	{
	}
	OverrideMimeType(mime: string): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequest, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlHttpRequestEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlHttpRequest, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlHttpRequestEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlHttpRequestEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlHttpRequestEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlHttpRequestEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlHttpRequestEvents, listener: (target: XmlHttpRequest, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlHttpRequestEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlHttpRequestEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Send(): void;
	Send(data: ArrayBuffer): void;
	Send(data: ArrayBufferView): void;
	Send(data: Blob): void;
	Send(data: DocumentBase): void;
	Send(data: FormData): void;
	Send(data: string): void;
	Send(data?: any): void
	{
		if (arguments.length === 0)
		{
			this.Send_0();
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof ArrayBuffer))
		{
			this.Send_1(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof ArrayBufferView))
		{
			this.Send_2(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof Blob))
		{
			this.Send_3(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof DocumentBase))
		{
			this.Send_4(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof FormData))
		{
			this.Send_5(data);
			return;
		}
		this.Send_6(data);
	}
	private Send_0(): void
	{
	}
	private Send_1(data: ArrayBuffer): void
	{
	}
	private Send_2(data: ArrayBufferView): void
	{
	}
	private Send_3(data: Blob): void
	{
	}
	private Send_4(data: DocumentBase): void
	{
	}
	private Send_5(data: FormData): void
	{
	}
	private Send_6(data: string): void
	{
	}
	SendAsBinary(body: string): void
	{
	}
	SetRequestHeader(header: string, value: string): void
	{
	}
	private Open_4(verb: HttpVerb, url: string): void
	{
	}
	private Open_5(verb: HttpVerb, url: string, async: boolean): void
	{
	}
	private Open_6(verb: HttpVerb, url: string, async: boolean, userName: string, password: string): void
	{
	}
	constructor()
	{
		super();
	}
}
enum XmlHttpRequestEvents
{
	Abort,
	Error,
	Load,
	Loadend,
	Loadstart,
	Progress,
	Readystatechange,
	Timeout
}
enum XmlHttpRequestEventTargetEvents
{
	Abort,
	Error,
	Load,
	Loadend,
	Loadstart,
	Progress,
	Timeout
}
enum XmlHttpRequestResponseType
{
	String,
	Arraybuffer,
	Blob,
	Document,
	Json,
	Text
}
class XmlHttpRequestUpload extends XmlHttpRequestEventTarget
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: () => void): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlHttpRequestUploadEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlHttpRequestUploadEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlHttpRequestUploadEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlHttpRequestUploadEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlHttpRequestUploadEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlHttpRequestUploadEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlHttpRequestUploadEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlHttpRequestUploadEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlHttpRequestUploadEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlHttpRequestUploadEvents, listener: (target: XmlHttpRequestUpload, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlHttpRequestUploadEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlHttpRequestUploadEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlHttpRequestUploadEvents
{
	Abort,
	Error,
	Load,
	Loadend,
	Loadstart,
	Progress,
	Timeout
}
enum HttpVerb
{
	Get,
	Post,
	Put,
	Delete,
	Head
}
class MessageChannel extends NObject
{
	get Port1(): MessagePort
	{
		return null;
	}
	get Port2(): MessagePort
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class MessageEvent extends Event
{
	get Data(): any
	{
		return null;
	}
	get LastEventId(): string
	{
		return null;
	}
	get Origin(): string
	{
		return null;
	}
	get Ports(): MessagePortList
	{
		return null;
	}
	get Source(): TypeOption<WindowInstance, MessagePort>
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: MessageEventInit);
	constructor(type?: string, eventInitDict?: MessageEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: MessageEventInit): void
	{
	}
}
class MessageEventInit extends EventInit
{
	Data: any = null;
	LastEventId: string = null;
	Origin: string = null;
	Ports: MessagePort[] = null;
	Source: TypeOption<WindowInstance, MessagePort> = null;
	constructor()
	{
		super();
	}
}
class MessagePort extends EventTarget
{
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: MessagePortEvents, listener: () => void): void;
	AddEventListener(type: MessagePortEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: MessagePortEvents, listener: (event: Event) => void): void;
	AddEventListener(type: MessagePortEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void): void;
	AddEventListener(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void, capture: boolean): void;
	AddEventListener(type: MessagePortEvents, listener: IEventListener): void;
	AddEventListener(type: MessagePortEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: MessagePort, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: MessagePort, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: MessagePortEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: MessagePortEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: MessagePortEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: MessagePortEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: MessagePortEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: MessagePortEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: MessagePort, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: MessagePort, event: Event) => void, capture: boolean): void
	{
	}
	Close(): void
	{
	}
	PostMessage(message: any): void;
	PostMessage(message: any, transferable: any[]): void;
	PostMessage(message: any, transferable?: any[]): void
	{
		if (arguments.length === 1 && (message === null || message.constructor === Object))
		{
			this.PostMessage_0(message);
			return;
		}
		this.PostMessage_1(message, transferable);
	}
	private PostMessage_0(message: any): void
	{
	}
	private PostMessage_1(message: any, transferable: any[]): void
	{
	}
	RemoveEventListener(type: MessagePortEvents, listener: () => void): void;
	RemoveEventListener(type: MessagePortEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: MessagePortEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: MessagePortEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void): void;
	RemoveEventListener(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: MessagePortEvents, listener: IEventListener): void;
	RemoveEventListener(type: MessagePortEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: MessagePort, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: MessagePort, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: MessagePortEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: MessagePortEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: MessagePortEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: MessagePortEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: MessagePortEvents, listener: (target: MessagePort, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: MessagePortEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: MessagePortEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: MessagePort, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: MessagePort, event: Event) => void, capture: boolean): void
	{
	}
	Start(): void
	{
	}
}
enum MessagePortEvents
{
	Message
}
class MessagePortList extends NObject
{
	get_Item(index: number): MessagePort
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<MessagePort>
	{
		return null;
	}
	Item(index: number): MessagePort
	{
		return null;
	}
}
class EventSource extends EventTarget
{
	static CLOSED: number = 2;
	static CONNECTING: number = 0;
	static OPEN: number = 1;
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnOpen(value: (event: Event) => void)
	{
	}
	get OnOpen(): (event: Event) => void
	{
		return null;
	}
	get ReadyState(): number
	{
		return 0;
	}
	get Url(): string
	{
		return null;
	}
	get WithCredentials(): boolean
	{
		return false;
	}
	constructor();
	constructor(url: string);
	constructor(url: string, eventSourceInitDict: EventSourceInit);
	constructor(url?: string, eventSourceInitDict?: EventSourceInit)
	{
		super();
		if (arguments.length === 0)
		{
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			this.constructor_1(url);
			return;
		}
		this.constructor_2(url, eventSourceInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(url: string): void
	{
	}
	private constructor_2(url: string, eventSourceInitDict: EventSourceInit): void
	{
	}
	AddEventListener(type: EventSourceEvents, listener: () => void): void;
	AddEventListener(type: EventSourceEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: EventSourceEvents, listener: (event: Event) => void): void;
	AddEventListener(type: EventSourceEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void): void;
	AddEventListener(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void, capture: boolean): void;
	AddEventListener(type: EventSourceEvents, listener: IEventListener): void;
	AddEventListener(type: EventSourceEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: EventSource, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: EventSource, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: EventSourceEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: EventSourceEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: EventSourceEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: EventSourceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: EventSourceEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: EventSourceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: EventSource, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: EventSource, event: Event) => void, capture: boolean): void
	{
	}
	Close(): void
	{
	}
	RemoveEventListener(type: EventSourceEvents, listener: () => void): void;
	RemoveEventListener(type: EventSourceEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: EventSourceEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: EventSourceEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void): void;
	RemoveEventListener(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: EventSourceEvents, listener: IEventListener): void;
	RemoveEventListener(type: EventSourceEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: EventSource, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: EventSource, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: EventSourceEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: EventSourceEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: EventSourceEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: EventSourceEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: EventSourceEvents, listener: (target: EventSource, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: EventSourceEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: EventSourceEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: EventSource, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: EventSource, event: Event) => void, capture: boolean): void
	{
	}
}
enum EventSourceEvents
{
	Error,
	Message,
	Open
}
class EventSourceInit extends NObject
{
	WithCredentials: boolean = false;
	constructor()
	{
		super();
	}
}
class MediaConstraints extends NObject
{
	Mandatory: any = null;
	Optional: MediaConstraintSet[] = null;
	constructor()
	{
		super();
	}
}
class MediaConstraintSet extends NObject
{
	OfferToReceiveAudio: boolean = false;
	OfferToReceiveVideo: boolean = false;
	constructor()
	{
		super();
	}
}
class RTCStats extends NObject
{
	Id: string = null;
	Timestamp: number = 0;
	Type: RTCStatsType = 0;
	constructor()
	{
		super();
	}
}
class RTCCodecStats extends RTCStats
{
	Channels: number = 0;
	ClockRate: number = 0;
	Codec: string = null;
	Parameters: string = null;
	PayloadType: number = 0;
	constructor()
	{
		super();
	}
}
class RTCConfiguration extends NObject
{
	IceServers: RTCIceServer[] = null;
	constructor()
	{
		super();
	}
}
class RTCDataChannel extends EventTarget
{
	set BinaryType(value: RTCDataChannelType)
	{
	}
	get BinaryType(): RTCDataChannelType
	{
		return RTCDataChannelType.Arraybuffer;
	}
	get BufferedAmount(): number
	{
		return 0;
	}
	get Id(): number
	{
		return 0;
	}
	get Label(): string
	{
		return null;
	}
	set OnClose(value: (event: Event) => void)
	{
	}
	get OnClose(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnOpen(value: (event: Event) => void)
	{
	}
	get OnOpen(): (event: Event) => void
	{
		return null;
	}
	get Ordered(): boolean
	{
		return false;
	}
	get Protocol(): string
	{
		return null;
	}
	get ReadyState(): RTCDataChannelState
	{
		return RTCDataChannelState.Connecting;
	}
	get Reliable(): boolean
	{
		return false;
	}
	get Stream(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	AddEventListener(type: RTCDataChannelEvents, listener: () => void): void;
	AddEventListener(type: RTCDataChannelEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: RTCDataChannelEvents, listener: (event: Event) => void): void;
	AddEventListener(type: RTCDataChannelEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void): void;
	AddEventListener(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void;
	AddEventListener(type: RTCDataChannelEvents, listener: IEventListener): void;
	AddEventListener(type: RTCDataChannelEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: RTCDataChannel, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: RTCDataChannelEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: RTCDataChannelEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: RTCDataChannelEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: RTCDataChannelEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: RTCDataChannelEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: RTCDataChannelEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: RTCDataChannel, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void
	{
	}
	Close(): void
	{
	}
	RemoveEventListener(type: RTCDataChannelEvents, listener: () => void): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: IEventListener): void;
	RemoveEventListener(type: RTCDataChannelEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: RTCDataChannel, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: RTCDataChannelEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: RTCDataChannelEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: RTCDataChannelEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: RTCDataChannelEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: RTCDataChannelEvents, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: RTCDataChannelEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: RTCDataChannelEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: RTCDataChannel, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: RTCDataChannel, event: Event) => void, capture: boolean): void
	{
	}
	Send(data: ArrayBuffer): void;
	Send(data: ArrayBufferView): void;
	Send(data: Blob): void;
	Send(data: string): void;
	Send(data: any): void
	{
		if (arguments.length === 1 && (data === null || data instanceof ArrayBuffer))
		{
			this.Send_0(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof ArrayBufferView))
		{
			this.Send_1(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof Blob))
		{
			this.Send_2(data);
			return;
		}
		this.Send_3(data);
	}
	private Send_0(data: ArrayBuffer): void
	{
	}
	private Send_1(data: ArrayBufferView): void
	{
	}
	private Send_2(data: Blob): void
	{
	}
	private Send_3(data: string): void
	{
	}
}
class RTCDataChannelEventInit extends EventInit
{
	Channel: RTCDataChannel = null;
	constructor()
	{
		super();
	}
}
enum RTCDataChannelEvents
{
	Close,
	Error,
	Message,
	Open
}
class RTCDataChannelInit extends NObject
{
	Id: Nullable<number> = null;
	MaxRetransmitNum: number = 0;
	MaxRetransmits: Nullable<number> = null;
	MaxRetransmitTime: Nullable<number> = null;
	Negotiated: boolean = false;
	Ordered: boolean = false;
	OutOfOrderAllowed: boolean = false;
	Preset: boolean = false;
	Protocol: string = null;
	Stream: number = 0;
	constructor()
	{
		super();
	}
}
enum RTCDataChannelState
{
	Connecting,
	Open,
	Closing,
	Closed
}
enum RTCDataChannelType
{
	Arraybuffer,
	Blob
}
class RTCIceCandidate extends NObject
{
	set Candidate(value: string)
	{
	}
	get Candidate(): string
	{
		return null;
	}
	set SdpMid(value: string)
	{
	}
	get SdpMid(): string
	{
		return null;
	}
	set SdpMLineIndex(value: Nullable<number>)
	{
	}
	get SdpMLineIndex(): Nullable<number>
	{
		return null;
	}
	constructor();
	constructor(candidateInitDict: RTCIceCandidateInit);
	constructor(candidateInitDict?: RTCIceCandidateInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(candidateInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(candidateInitDict: RTCIceCandidateInit): void
	{
	}
}
class RTCIceCandidateInit extends NObject
{
	Candidate: string = null;
	SdpMid: string = null;
	SdpMLineIndex: number = 0;
	constructor()
	{
		super();
	}
}
class RTCIceCandidatePairStats extends RTCStats
{
	ComponentId: string = null;
	LocalCandidateId: string = null;
	Nominated: boolean = false;
	Readable: boolean = false;
	RemoteCandidateId: string = null;
	Selected: boolean = false;
	State: RTCStatsIceCandidatePairState = 0;
	constructor()
	{
		super();
	}
}
class RTCIceCandidateStats extends RTCStats
{
	CandidateId: string = null;
	CandidateType: RTCStatsIceCandidateType = 0;
	ComponentId: string = null;
	IpAddress: string = null;
	PortNumber: number = 0;
	Transport: string = null;
	constructor()
	{
		super();
	}
}
class RTCIceComponentStats extends RTCStats
{
	ActiveConnection: boolean = false;
	BytesReceived: number = 0;
	BytesSent: number = 0;
	Component: number = 0;
	TransportId: string = null;
	constructor()
	{
		super();
	}
}
enum RTCIceConnectionState
{
	New,
	Checking,
	Connected,
	Completed,
	Failed,
	Disconnected,
	Closed
}
enum RTCIceGatheringState
{
	New,
	Gathering,
	Complete
}
class RTCIceServer extends NObject
{
	Credential: string = null;
	Url: string = null;
	Username: string = null;
	constructor()
	{
		super();
	}
}
class RTCIdentityAssertion extends NObject
{
	set Idp(value: string)
	{
	}
	get Idp(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	constructor();
	constructor(idp: string, name: string);
	constructor(idp?: string, name?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(idp, name);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(idp: string, name: string): void
	{
	}
}
class RTCRTPStreamStats extends RTCStats
{
	CodecId: string = null;
	IsRemote: boolean = false;
	MediaTrackId: string = null;
	RemoteId: string = null;
	Ssrc: string = null;
	TransportId: string = null;
	constructor()
	{
		super();
	}
}
class RTCInboundRTPStreamStats extends RTCRTPStreamStats
{
	BytesReceived: number = 0;
	Jitter: number = 0;
	PacketsLost: number = 0;
	PacketsReceived: number = 0;
	constructor()
	{
		super();
	}
}
class RTCMediaStreamStats extends RTCStats
{
	StreamIdentifier: string = null;
	TrackIds: string[] = null;
	constructor()
	{
		super();
	}
}
class RTCMediaStreamTrackStats extends RTCStats
{
	AudioLevel: number = 0;
	FrameHeight: number = 0;
	FramesDecoded: number = 0;
	FramesPerSecond: number = 0;
	FramesReceived: number = 0;
	FramesSent: number = 0;
	FrameWidth: number = 0;
	RemoteSource: boolean = false;
	SsrcIds: string[] = null;
	TrackIdentifier: string = null;
	constructor()
	{
		super();
	}
}
class RTCOutboundRTPStreamStats extends RTCRTPStreamStats
{
	BytesSent: number = 0;
	PacketsSent: number = 0;
	constructor()
	{
		super();
	}
}
class RTCPeerConnection extends EventTarget
{
	get IceConnectionState(): RTCIceConnectionState
	{
		return RTCIceConnectionState.New;
	}
	get IceGatheringState(): RTCIceGatheringState
	{
		return RTCIceGatheringState.New;
	}
	get LocalDescription(): RTCSessionDescription
	{
		return null;
	}
	set OnAddstream(value: (event: Event) => void)
	{
	}
	get OnAddstream(): (event: Event) => void
	{
		return null;
	}
	set OnClosedconnection(value: (event: Event) => void)
	{
	}
	get OnClosedconnection(): (event: Event) => void
	{
		return null;
	}
	set OnConnection(value: (event: Event) => void)
	{
	}
	get OnConnection(): (event: Event) => void
	{
		return null;
	}
	set OnDatachannel(value: (event: Event) => void)
	{
	}
	get OnDatachannel(): (event: Event) => void
	{
		return null;
	}
	set OnIcecandidate(value: (event: Event) => void)
	{
	}
	get OnIcecandidate(): (event: Event) => void
	{
		return null;
	}
	set OnIceconnectionstatechange(value: (event: Event) => void)
	{
	}
	get OnIceconnectionstatechange(): (event: Event) => void
	{
		return null;
	}
	set OnIdentityresult(value: (event: Event) => void)
	{
	}
	get OnIdentityresult(): (event: Event) => void
	{
		return null;
	}
	set OnNegotiationneeded(value: (event: Event) => void)
	{
	}
	get OnNegotiationneeded(): (event: Event) => void
	{
		return null;
	}
	set OnPeeridentity(value: (event: Event) => void)
	{
	}
	get OnPeeridentity(): (event: Event) => void
	{
		return null;
	}
	set OnRemovestream(value: (event: Event) => void)
	{
	}
	get OnRemovestream(): (event: Event) => void
	{
		return null;
	}
	set OnSignalingstatechange(value: (event: Event) => void)
	{
	}
	get OnSignalingstatechange(): (event: Event) => void
	{
		return null;
	}
	get PeerIdentity(): RTCIdentityAssertion
	{
		return null;
	}
	get RemoteDescription(): RTCSessionDescription
	{
		return null;
	}
	get SignalingState(): RTCSignalingState
	{
		return RTCSignalingState.Stable;
	}
	constructor();
	constructor(configuration: RTCConfiguration);
	constructor(configuration: RTCConfiguration, constraints: any);
	constructor(configuration?: RTCConfiguration, constraints?: any)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (configuration === null || configuration instanceof RTCConfiguration))
		{
			super();
			this.constructor_1(configuration);
			return;
		}
		super();
		this.constructor_2(configuration, constraints);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(configuration: RTCConfiguration): void
	{
	}
	private constructor_2(configuration: RTCConfiguration, constraints: any): void
	{
	}
	AddEventListener(type: RTCPeerConnectionEvents, listener: () => void): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: (event: Event) => void): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: IEventListener): void;
	AddEventListener(type: RTCPeerConnectionEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: RTCPeerConnection, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: RTCPeerConnectionEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: RTCPeerConnectionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: RTCPeerConnectionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: RTCPeerConnectionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: RTCPeerConnectionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: RTCPeerConnectionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: RTCPeerConnection, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void
	{
	}
	AddIceCandidate(candidate: RTCIceCandidate): void;
	AddIceCandidate(candidate: RTCIceCandidate, successCallback: () => void): void;
	AddIceCandidate(candidate: RTCIceCandidate, successCallback: () => void, failureCallback: (errorInformation: string) => void): void;
	AddIceCandidate(candidate: RTCIceCandidate, successCallback?: () => void, failureCallback?: (errorInformation: string) => void): void
	{
		if (arguments.length === 1 && (candidate === null || candidate instanceof RTCIceCandidate))
		{
			this.AddIceCandidate_0(candidate);
			return;
		}
		if (arguments.length === 2 && (candidate === null || candidate instanceof RTCIceCandidate))
		{
			this.AddIceCandidate_1(candidate, successCallback);
			return;
		}
		this.AddIceCandidate_2(candidate, successCallback, failureCallback);
	}
	private AddIceCandidate_0(candidate: RTCIceCandidate): void
	{
	}
	private AddIceCandidate_1(candidate: RTCIceCandidate, successCallback: () => void): void
	{
	}
	private AddIceCandidate_2(candidate: RTCIceCandidate, successCallback: () => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	AddStream(stream: MediaStream): void;
	AddStream(stream: MediaStream, constraints: MediaConstraints): void;
	AddStream(stream: MediaStream, constraints?: MediaConstraints): void
	{
		if (arguments.length === 1 && (stream === null || stream instanceof MediaStream))
		{
			this.AddStream_0(stream);
			return;
		}
		this.AddStream_1(stream, constraints);
	}
	private AddStream_0(stream: MediaStream): void
	{
	}
	private AddStream_1(stream: MediaStream, constraints: MediaConstraints): void
	{
	}
	Close(): void
	{
	}
	CreateAnswer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void): void;
	CreateAnswer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints: MediaConstraints): void;
	CreateAnswer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints?: MediaConstraints): void
	{
		if (arguments.length === 2)
		{
			this.CreateAnswer_0(successCallback, failureCallback);
			return;
		}
		this.CreateAnswer_1(successCallback, failureCallback, constraints);
	}
	private CreateAnswer_0(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	private CreateAnswer_1(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints: MediaConstraints): void
	{
	}
	CreateDataChannel(label: string): RTCDataChannel;
	CreateDataChannel(label: string, dataChannelDict: RTCDataChannelInit): RTCDataChannel;
	CreateDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel
	{
		if (arguments.length === 1 && (label === null || label.constructor === String))
		{
			return this.CreateDataChannel_0(label);
		}
		return this.CreateDataChannel_1(label, dataChannelDict);
	}
	private CreateDataChannel_0(label: string): RTCDataChannel
	{
		return null;
	}
	private CreateDataChannel_1(label: string, dataChannelDict: RTCDataChannelInit): RTCDataChannel
	{
		return null;
	}
	CreateOffer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void): void;
	CreateOffer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints: MediaConstraints): void;
	CreateOffer(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints?: MediaConstraints): void
	{
		if (arguments.length === 2)
		{
			this.CreateOffer_0(successCallback, failureCallback);
			return;
		}
		this.CreateOffer_1(successCallback, failureCallback, constraints);
	}
	private CreateOffer_0(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	private CreateOffer_1(successCallback: (sdp: RTCSessionDescription) => void, failureCallback: (errorInformation: string) => void, constraints: MediaConstraints): void
	{
	}
	GetIdentityAssertion(): void;
	GetIdentityAssertion(failureCallback: (errorInformation: string) => void): void;
	GetIdentityAssertion(failureCallback?: (errorInformation: string) => void): void
	{
		if (arguments.length === 0)
		{
			this.GetIdentityAssertion_0();
			return;
		}
		this.GetIdentityAssertion_1(failureCallback);
	}
	private GetIdentityAssertion_0(): void
	{
	}
	private GetIdentityAssertion_1(failureCallback: (errorInformation: string) => void): void
	{
	}
	GetLocalStreams(): MediaStream[]
	{
		return null;
	}
	GetRemoteStreams(): MediaStream[]
	{
		return null;
	}
	GetStats(selector: MediaStreamTrack, successCallback: (report: RTCStatsReport) => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	GetStreamById(streamId: string): MediaStream
	{
		return null;
	}
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: () => void): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: IEventListener): void;
	RemoveEventListener(type: RTCPeerConnectionEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: RTCPeerConnection, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: RTCPeerConnectionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: RTCPeerConnectionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: RTCPeerConnectionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: RTCPeerConnectionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: RTCPeerConnectionEvents, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: RTCPeerConnectionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: RTCPeerConnectionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: RTCPeerConnection, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: RTCPeerConnection, event: Event) => void, capture: boolean): void
	{
	}
	RemoveStream(stream: MediaStream): void
	{
	}
	SetIdentityProvider(provider: string): void;
	SetIdentityProvider(provider: string, protocol: string): void;
	SetIdentityProvider(provider: string, protocol: string, username: string): void;
	SetIdentityProvider(provider: string, protocol?: string, username?: string): void
	{
		if (arguments.length === 1 && (provider === null || provider.constructor === String))
		{
			this.SetIdentityProvider_0(provider);
			return;
		}
		if (arguments.length === 2 && (provider === null || provider.constructor === String) && (protocol === null || protocol.constructor === String))
		{
			this.SetIdentityProvider_1(provider, protocol);
			return;
		}
		this.SetIdentityProvider_2(provider, protocol, username);
	}
	private SetIdentityProvider_0(provider: string): void
	{
	}
	private SetIdentityProvider_1(provider: string, protocol: string): void
	{
	}
	private SetIdentityProvider_2(provider: string, protocol: string, username: string): void
	{
	}
	SetLocalDescription(description: RTCSessionDescription): void;
	SetLocalDescription(description: RTCSessionDescription, successCallback: () => void): void;
	SetLocalDescription(description: RTCSessionDescription, successCallback: () => void, failureCallback: (errorInformation: string) => void): void;
	SetLocalDescription(description: RTCSessionDescription, successCallback?: () => void, failureCallback?: (errorInformation: string) => void): void
	{
		if (arguments.length === 1 && (description === null || description instanceof RTCSessionDescription))
		{
			this.SetLocalDescription_0(description);
			return;
		}
		if (arguments.length === 2 && (description === null || description instanceof RTCSessionDescription))
		{
			this.SetLocalDescription_1(description, successCallback);
			return;
		}
		this.SetLocalDescription_2(description, successCallback, failureCallback);
	}
	private SetLocalDescription_0(description: RTCSessionDescription): void
	{
	}
	private SetLocalDescription_1(description: RTCSessionDescription, successCallback: () => void): void
	{
	}
	private SetLocalDescription_2(description: RTCSessionDescription, successCallback: () => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	SetRemoteDescription(description: RTCSessionDescription): void;
	SetRemoteDescription(description: RTCSessionDescription, successCallback: () => void): void;
	SetRemoteDescription(description: RTCSessionDescription, successCallback: () => void, failureCallback: (errorInformation: string) => void): void;
	SetRemoteDescription(description: RTCSessionDescription, successCallback?: () => void, failureCallback?: (errorInformation: string) => void): void
	{
		if (arguments.length === 1 && (description === null || description instanceof RTCSessionDescription))
		{
			this.SetRemoteDescription_0(description);
			return;
		}
		if (arguments.length === 2 && (description === null || description instanceof RTCSessionDescription))
		{
			this.SetRemoteDescription_1(description, successCallback);
			return;
		}
		this.SetRemoteDescription_2(description, successCallback, failureCallback);
	}
	private SetRemoteDescription_0(description: RTCSessionDescription): void
	{
	}
	private SetRemoteDescription_1(description: RTCSessionDescription, successCallback: () => void): void
	{
	}
	private SetRemoteDescription_2(description: RTCSessionDescription, successCallback: () => void, failureCallback: (errorInformation: string) => void): void
	{
	}
	UpdateIce(): void;
	UpdateIce(configuration: RTCConfiguration): void;
	UpdateIce(configuration: RTCConfiguration, constraints: MediaConstraints): void;
	UpdateIce(configuration?: RTCConfiguration, constraints?: MediaConstraints): void
	{
		if (arguments.length === 0)
		{
			this.UpdateIce_0();
			return;
		}
		if (arguments.length === 1 && (configuration === null || configuration instanceof RTCConfiguration))
		{
			this.UpdateIce_1(configuration);
			return;
		}
		this.UpdateIce_2(configuration, constraints);
	}
	private UpdateIce_0(): void
	{
	}
	private UpdateIce_1(configuration: RTCConfiguration): void
	{
	}
	private UpdateIce_2(configuration: RTCConfiguration, constraints: MediaConstraints): void
	{
	}
}
enum RTCPeerConnectionEvents
{
	Addstream,
	Closedconnection,
	Connection,
	Datachannel,
	Icecandidate,
	Iceconnectionstatechange,
	Identityresult,
	Negotiationneeded,
	Peeridentity,
	Removestream,
	Signalingstatechange
}
class RTCPeerConnectionIceEvent extends Event
{
	get Candidate(): RTCIceCandidate
	{
		return null;
	}
	constructor();
	constructor(type: string);
	constructor(type: string, eventInitDict: RTCPeerConnectionIceEventInit);
	constructor(type?: string, eventInitDict?: RTCPeerConnectionIceEventInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (type === null || type.constructor === String))
		{
			super();
			this.constructor_1(type);
			return;
		}
		super();
		this.constructor_2(type, eventInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(type: string): void
	{
	}
	private constructor_2(type: string, eventInitDict: RTCPeerConnectionIceEventInit): void
	{
	}
}
class RTCPeerConnectionIceEventInit extends EventInit
{
	Candidate: RTCIceCandidate = null;
	constructor()
	{
		super();
	}
}
enum RTCSdpType
{
	Offer,
	Pranswer,
	Answer
}
class RTCSessionDescription extends NObject
{
	set Sdp(value: string)
	{
	}
	get Sdp(): string
	{
		return null;
	}
	set Type(value: Nullable<RTCSdpType>)
	{
	}
	get Type(): Nullable<RTCSdpType>
	{
		return null;
	}
	constructor();
	constructor(descriptionInitDict: RTCSessionDescriptionInit);
	constructor(descriptionInitDict?: RTCSessionDescriptionInit)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(descriptionInitDict);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(descriptionInitDict: RTCSessionDescriptionInit): void
	{
	}
}
class RTCSessionDescriptionInit extends NObject
{
	Sdp: string = null;
	Type: Nullable<RTCSdpType> = null;
	constructor()
	{
		super();
	}
}
enum RTCSignalingState
{
	Stable,
	HaveLocalOffer,
	HaveRemoteOffer,
	HaveLocalPranswer,
	HaveRemotePranswer,
	Closed
}
enum RTCStatsIceCandidatePairState
{
	Frozen,
	Waiting,
	Inprogress,
	Failed,
	Succeeded,
	Cancelled
}
enum RTCStatsIceCandidateType
{
	Host,
	Serverreflexive,
	Peerreflexive,
	Relayed
}
class RTCStatsReport extends NObject
{
	constructor()
	{
		super();
	}
	ForEach(callbackFn: (obj: RTCStatsReport) => void, thisArg: any): void
	{
	}
	Get(key: string): any
	{
		return null;
	}
	Has(key: string): boolean
	{
		return false;
	}
}
class RTCStatsReportInternal extends NObject
{
	CodecStats: RTCCodecStats[] = null;
	IceCandidatePairStats: RTCIceCandidatePairStats[] = null;
	IceCandidateStats: RTCIceCandidateStats[] = null;
	IceComponentStats: RTCIceComponentStats[] = null;
	InboundRTPStreamStats: RTCInboundRTPStreamStats[] = null;
	MediaStreamStats: RTCMediaStreamStats[] = null;
	MediaStreamTrackStats: RTCMediaStreamTrackStats[] = null;
	OutboundRTPStreamStats: RTCOutboundRTPStreamStats[] = null;
	Pcid: string = null;
	RtpStreamStats: RTCRTPStreamStats[] = null;
	TransportStats: RTCTransportStats[] = null;
	constructor()
	{
		super();
	}
}
enum RTCStatsType
{
	Inboundrtp,
	Outboundrtp,
	Session,
	Track,
	Transport,
	Candidatepair,
	Localcandidate,
	Remotecandidate
}
class RTCTransportStats extends RTCStats
{
	BytesReceived: number = 0;
	BytesSent: number = 0;
	constructor()
	{
		super();
	}
}
enum BinaryType
{
	Blob,
	Arraybuffer
}
enum ReadyState
{
	Closed = 3,
	Closing = 2,
	Connecting = 0,
	Open
}
class WebSocket extends EventTarget
{
	static CLOSED: number = 3;
	static CLOSING: number = 2;
	static CONNECTING: number = 0;
	static OPEN: number = 1;
	set BinaryType(value: BinaryType)
	{
	}
	get BinaryType(): BinaryType
	{
		return BinaryType.Blob;
	}
	get BufferedAmount(): number
	{
		return 0;
	}
	get Extensions(): string
	{
		return null;
	}
	set OnClose(value: (event: Event) => void)
	{
	}
	get OnClose(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	set OnOpen(value: (event: Event) => void)
	{
	}
	get OnOpen(): (event: Event) => void
	{
		return null;
	}
	get Protocol(): string
	{
		return null;
	}
	get ReadyState(): ReadyState
	{
		return ReadyState.Connecting;
	}
	get Url(): string
	{
		return null;
	}
	constructor();
	constructor(url: string);
	constructor(url: string, protocols: string);
	constructor(url: string, protocols: string[]);
	constructor(url?: string, protocols?: any)
	{
		super();
		if (arguments.length === 0)
		{
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (url === null || url.constructor === String))
		{
			this.constructor_1(url);
			return;
		}
		if (arguments.length === 2 && (url === null || url.constructor === String) && (protocols === null || protocols.constructor === String))
		{
			this.constructor_2(url, protocols);
			return;
		}
		this.constructor_3(url, protocols);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(url: string): void
	{
	}
	private constructor_2(url: string, protocols: string): void
	{
	}
	private constructor_3(url: string, protocols: string[]): void
	{
	}
	new AddEventListener(type: string, listener: (target: WebSocket, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: WebSocket, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WebSocketEvents, listener: () => void): void;
	new AddEventListener(type: WebSocketEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: WebSocketEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: WebSocketEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void): void;
	new AddEventListener(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WebSocketEvents, listener: IEventListener): void;
	new AddEventListener(type: WebSocketEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: WebSocket, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: WebSocket, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: WebSocketEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: WebSocketEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: WebSocketEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: WebSocketEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: WebSocketEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: WebSocketEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Close(): void;
	Close(code: number): void;
	Close(code: number, reason: string): void;
	Close(code?: number, reason?: string): void
	{
		if (arguments.length === 0)
		{
			this.Close_0();
			return;
		}
		if (arguments.length === 1 && (code === null || code.constructor === Number))
		{
			this.Close_1(code);
			return;
		}
		this.Close_2(code, reason);
	}
	private Close_0(): void
	{
	}
	private Close_1(code: number): void
	{
	}
	private Close_2(code: number, reason: string): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: WebSocket, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: WebSocket, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WebSocketEvents, listener: () => void): void;
	new RemoveEventListener(type: WebSocketEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: WebSocketEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: WebSocketEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void): void;
	new RemoveEventListener(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WebSocketEvents, listener: IEventListener): void;
	new RemoveEventListener(type: WebSocketEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: WebSocket, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: WebSocket, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: WebSocketEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: WebSocketEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: WebSocketEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: WebSocketEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: WebSocketEvents, listener: (target: WebSocket, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: WebSocketEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: WebSocketEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Send(data: ArrayBuffer): void;
	Send(data: ArrayBufferView): void;
	Send(data: Blob): void;
	Send(data: string): void;
	Send(data: any): void
	{
		if (arguments.length === 1 && (data === null || data instanceof ArrayBuffer))
		{
			this.Send_0(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof ArrayBufferView))
		{
			this.Send_1(data);
			return;
		}
		if (arguments.length === 1 && (data === null || data instanceof Blob))
		{
			this.Send_2(data);
			return;
		}
		this.Send_3(data);
	}
	private Send_0(data: ArrayBuffer): void
	{
	}
	private Send_1(data: ArrayBufferView): void
	{
	}
	private Send_2(data: Blob): void
	{
	}
	private Send_3(data: string): void
	{
	}
}
class WebSocketDict extends NObject
{
	Websockets: WebSocketElement[] = null;
	constructor()
	{
		super();
	}
}
class WebSocketElement extends NObject
{
	Encrypted: boolean = false;
	Hostport: string = null;
	Msgreceived: number = 0;
	Msgsent: number = 0;
	Receivedsize: number = 0;
	Sentsize: number = 0;
	constructor()
	{
		super();
	}
}
enum WebSocketEvents
{
	Close,
	Error,
	Message,
	Open
}
class PerformanceDetails extends NObject
{
	get Navigation(): PerformanceNavigation
	{
		return null;
	}
	get Timing(): PerformanceTiming
	{
		return null;
	}
	constructor()
	{
		super();
	}
	Now(): number
	{
		return 0.0;
	}
}
class PerformanceNavigation extends NObject
{
	static TYPE_BACK_FORWARD: number = 2;
	static TYPE_NAVIGATE: number = 0;
	static TYPE_RELOAD: number = 1;
	static TYPE_RESERVED: number = 255;
	get RedirectCount(): number
	{
		return 0;
	}
	get Type(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class PerformanceTiming extends NObject
{
	get ConnectEnd(): number
	{
		return 0;
	}
	get ConnectStart(): number
	{
		return 0;
	}
	get DomainLookupEnd(): number
	{
		return 0;
	}
	get DomainLookupStart(): number
	{
		return 0;
	}
	get DomComplete(): number
	{
		return 0;
	}
	get DomContentLoadedEventEnd(): number
	{
		return 0;
	}
	get DomContentLoadedEventStart(): number
	{
		return 0;
	}
	get DomInteractive(): number
	{
		return 0;
	}
	get DomLoading(): number
	{
		return 0;
	}
	get FetchStart(): number
	{
		return 0;
	}
	get LoadEventEnd(): number
	{
		return 0;
	}
	get LoadEventStart(): number
	{
		return 0;
	}
	get NavigationStart(): number
	{
		return 0;
	}
	get RedirectEnd(): number
	{
		return 0;
	}
	get RedirectStart(): number
	{
		return 0;
	}
	get RequestStart(): number
	{
		return 0;
	}
	get ResponseEnd(): number
	{
		return 0;
	}
	get ResponseStart(): number
	{
		return 0;
	}
	get UnloadEventEnd(): number
	{
		return 0;
	}
	get UnloadEventStart(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
interface IRandomSource
{
	GetRandomValues(array: ArrayBufferView): ArrayBufferView;
}
class Crypto extends NObject implements IRandomSource
{
	constructor()
	{
		super();
	}
	GetRandomValues(array: ArrayBufferView): ArrayBufferView
	{
		return null;
	}
}
class TextDecodeOptions extends NObject
{
	Stream: boolean = false;
	constructor()
	{
		super();
	}
}
class TextDecoder extends NObject
{
	get Encoding(): string
	{
		return null;
	}
	constructor();
	constructor(label: string);
	constructor(label: string, options: TextDecoderOptions);
	constructor(label?: string, options?: TextDecoderOptions)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (label === null || label.constructor === String))
		{
			super();
			this.constructor_1(label);
			return;
		}
		super();
		this.constructor_2(label, options);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(label: string): void
	{
	}
	private constructor_2(label: string, options: TextDecoderOptions): void
	{
	}
	Decode(): string;
	Decode(input: ArrayBufferView): string;
	Decode(input: ArrayBufferView, options: TextDecodeOptions): string;
	Decode(input?: ArrayBufferView, options?: TextDecodeOptions): string
	{
		if (arguments.length === 0)
		{
			return this.Decode_0();
		}
		if (arguments.length === 1 && (input === null || input instanceof ArrayBufferView))
		{
			return this.Decode_1(input);
		}
		return this.Decode_2(input, options);
	}
	private Decode_0(): string
	{
		return null;
	}
	private Decode_1(input: ArrayBufferView): string
	{
		return null;
	}
	private Decode_2(input: ArrayBufferView, options: TextDecodeOptions): string
	{
		return null;
	}
}
class TextDecoderOptions extends NObject
{
	Fatal: boolean = false;
	constructor()
	{
		super();
	}
}
class TextEncodeOptions extends NObject
{
	Stream: boolean = false;
	constructor()
	{
		super();
	}
}
class TextEncoder extends NObject
{
	get Encoding(): string
	{
		return null;
	}
	constructor();
	constructor(utfLabel: string);
	constructor(utfLabel?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(utfLabel);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(utfLabel: string): void
	{
	}
	Encode(): Uint8Array;
	Encode(input: string): Uint8Array;
	Encode(input: string, options: TextEncodeOptions): Uint8Array;
	Encode(input?: string, options?: TextEncodeOptions): Uint8Array
	{
		if (arguments.length === 0)
		{
			return this.Encode_0();
		}
		if (arguments.length === 1 && (input === null || input.constructor === String))
		{
			return this.Encode_1(input);
		}
		return this.Encode_2(input, options);
	}
	private Encode_0(): Uint8Array
	{
		return null;
	}
	private Encode_1(input: string): Uint8Array
	{
		return null;
	}
	private Encode_2(input: string, options: TextEncodeOptions): Uint8Array
	{
		return null;
	}
}
class DedicatedWorkerGlobalScope extends NObject
{
	static get Location(): WorkerLocation
	{
		return null;
	}
	static get Navigator(): WorkerNavigator
	{
		return null;
	}
	static set OnClose(value: (event: Event) => void)
	{
	}
	static get OnClose(): (event: Event) => void
	{
		return null;
	}
	static set OnError(value: (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean)
	{
	}
	static get OnError(): (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean
	{
		return null;
	}
	static set OnMessage(value: (event: Event) => void)
	{
	}
	static get OnMessage(): (event: Event) => void
	{
		return null;
	}
	static set OnOffline(value: (event: Event) => void)
	{
	}
	static get OnOffline(): (event: Event) => void
	{
		return null;
	}
	static set OnOnline(value: (event: Event) => void)
	{
	}
	static get OnOnline(): (event: Event) => void
	{
		return null;
	}
	static get Self(): WorkerGlobalScope
	{
		return null;
	}
	static AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: any, listener: any, capture?: boolean, wantsUntrusted?: Nullable<boolean>): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			DedicatedWorkerGlobalScope.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			DedicatedWorkerGlobalScope.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			DedicatedWorkerGlobalScope.AddEventListener_4(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.AddEventListener_5(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.AddEventListener_6(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.AddEventListener_7(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.AddEventListener_8(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.AddEventListener_9(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.AddEventListener_10(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.AddEventListener_11(type, listener);
			return;
		}
		DedicatedWorkerGlobalScope.AddEventListener_12(type, listener, capture);
	}
	private static AddEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static AddEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static AddEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_4(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static AddEventListener_5(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private static AddEventListener_6(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_7(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_8(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_9(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static AddEventListener_10(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_11(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_12(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static Atob(atob: string): string
	{
		return null;
	}
	static Btoa(btoa: string): string
	{
		return null;
	}
	static Close(): void
	{
	}
	static DispatchEvent(event: Event): boolean
	{
		return false;
	}
	static Dump(): void;
	static Dump(str: string): void;
	static Dump(str?: string): void
	{
		if (arguments.length === 0)
		{
			DedicatedWorkerGlobalScope.Dump_0();
			return;
		}
		DedicatedWorkerGlobalScope.Dump_1(str);
	}
	private static Dump_0(): void
	{
	}
	private static Dump_1(str: string): void
	{
	}
	static ImportScripts(urls: string[]): void
	{
	}
	static PostMessage(message: any): void;
	static PostMessage(message: any, transfer: any[]): void;
	static PostMessage(message: any, transfer?: any[]): void
	{
		if (arguments.length === 1 && (message === null || message.constructor === Object))
		{
			DedicatedWorkerGlobalScope.PostMessage_0(message);
			return;
		}
		DedicatedWorkerGlobalScope.PostMessage_1(message, transfer);
	}
	private static PostMessage_0(message: any): void
	{
	}
	private static PostMessage_1(message: any, transfer: any[]): void
	{
	}
	static RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: IEventListener): void;
	static RemoveEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_8(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_9(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			DedicatedWorkerGlobalScope.RemoveEventListener_10(type, listener);
			return;
		}
		DedicatedWorkerGlobalScope.RemoveEventListener_11(type, listener, capture);
	}
	private static RemoveEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static RemoveEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_4(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_5(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_6(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_7(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_8(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static RemoveEventListener_9(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_10(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_11(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static ToNativeLineEndings($string: string): string
	{
		return null;
	}
	static SetTimeout(handler: () => void): number;
	static SetTimeout(handler: () => void, timeout: number): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetTimeout(handler: string): number;
	static SetTimeout(handler: string, timeout: number): number;
	static SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return DedicatedWorkerGlobalScope.SetTimeout_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return DedicatedWorkerGlobalScope.SetTimeout_11(handler);
		}
		return DedicatedWorkerGlobalScope.SetTimeout_12(handler, timeout);
	}
	private static SetTimeout_0(handler: () => void): number
	{
		return 0;
	}
	private static SetTimeout_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetTimeout_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetTimeout_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetTimeout_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetTimeout_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetTimeout_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetTimeout_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetTimeout_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetTimeout_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetTimeout_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetTimeout_11(handler: string): number
	{
		return 0;
	}
	private static SetTimeout_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static SetInterval(handler: () => void): number;
	static SetInterval(handler: () => void, timeout: number): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetInterval(handler: string): number;
	static SetInterval(handler: string, timeout: number): number;
	static SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return DedicatedWorkerGlobalScope.SetInterval_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return DedicatedWorkerGlobalScope.SetInterval_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return DedicatedWorkerGlobalScope.SetInterval_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return DedicatedWorkerGlobalScope.SetInterval_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return DedicatedWorkerGlobalScope.SetInterval_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return DedicatedWorkerGlobalScope.SetInterval_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return DedicatedWorkerGlobalScope.SetInterval_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return DedicatedWorkerGlobalScope.SetInterval_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return DedicatedWorkerGlobalScope.SetInterval_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return DedicatedWorkerGlobalScope.SetInterval_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return DedicatedWorkerGlobalScope.SetInterval_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return DedicatedWorkerGlobalScope.SetInterval_11(handler);
		}
		return DedicatedWorkerGlobalScope.SetInterval_12(handler, timeout);
	}
	private static SetInterval_0(handler: () => void): number
	{
		return 0;
	}
	private static SetInterval_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetInterval_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetInterval_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetInterval_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetInterval_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetInterval_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetInterval_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetInterval_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetInterval_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetInterval_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetInterval_11(handler: string): number
	{
		return 0;
	}
	private static SetInterval_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static ClearInterval(handle: number): void
	{
	}
	static ClearTimeout(handle: number): void
	{
	}
	constructor()
	{
		super();
	}
}
class SharedWorker extends EventTarget
{
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	get Port(): MessagePort
	{
		return null;
	}
	constructor();
	constructor(scriptURL: string);
	constructor(scriptURL: string, name: string);
	constructor(scriptURL?: string, name?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		if (arguments.length === 1 && (scriptURL === null || scriptURL.constructor === String))
		{
			super();
			this.constructor_1(scriptURL);
			return;
		}
		super();
		this.constructor_2(scriptURL, name);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(scriptURL: string): void
	{
	}
	private constructor_2(scriptURL: string, name: string): void
	{
	}
	AddEventListener(type: SharedWorkerEvents, listener: () => void): void;
	AddEventListener(type: SharedWorkerEvents, listener: () => void, capture: boolean): void;
	AddEventListener(type: SharedWorkerEvents, listener: (event: Event) => void): void;
	AddEventListener(type: SharedWorkerEvents, listener: (event: Event) => void, capture: boolean): void;
	AddEventListener(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void): void;
	AddEventListener(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void;
	AddEventListener(type: SharedWorkerEvents, listener: IEventListener): void;
	AddEventListener(type: SharedWorkerEvents, listener: IEventListener, capture: boolean): void;
	AddEventListener(type: string, listener: (target: SharedWorker, event: Event) => void): void;
	AddEventListener(type: string, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void;
	AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private AddEventListener_0(type: SharedWorkerEvents, listener: () => void): void
	{
	}
	private AddEventListener_1(type: SharedWorkerEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: SharedWorkerEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_3(type: SharedWorkerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void): void
	{
	}
	private AddEventListener_5(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: SharedWorkerEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_7(type: SharedWorkerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new AddEventListener_8(type: string, listener: (target: SharedWorker, event: Event) => void): void
	{
	}
	private new AddEventListener_9(type: string, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void
	{
	}
	RemoveEventListener(type: SharedWorkerEvents, listener: () => void): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: () => void, capture: boolean): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: (event: Event) => void): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: (event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: IEventListener): void;
	RemoveEventListener(type: SharedWorkerEvents, listener: IEventListener, capture: boolean): void;
	RemoveEventListener(type: string, listener: (target: SharedWorker, event: Event) => void): void;
	RemoveEventListener(type: string, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void;
	RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private RemoveEventListener_0(type: SharedWorkerEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_1(type: SharedWorkerEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: SharedWorkerEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_3(type: SharedWorkerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: SharedWorkerEvents, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: SharedWorkerEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_7(type: SharedWorkerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	private new RemoveEventListener_8(type: string, listener: (target: SharedWorker, event: Event) => void): void
	{
	}
	private new RemoveEventListener_9(type: string, listener: (target: SharedWorker, event: Event) => void, capture: boolean): void
	{
	}
}
enum SharedWorkerEvents
{
	Error
}
class SharedWorkerGlobalScope extends NObject
{
	static get Location(): WorkerLocation
	{
		return null;
	}
	static get Name(): string
	{
		return null;
	}
	static get Navigator(): WorkerNavigator
	{
		return null;
	}
	static set OnClose(value: (event: Event) => void)
	{
	}
	static get OnClose(): (event: Event) => void
	{
		return null;
	}
	static set OnConnect(value: (event: Event) => void)
	{
	}
	static get OnConnect(): (event: Event) => void
	{
		return null;
	}
	static set OnError(value: (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean)
	{
	}
	static get OnError(): (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean
	{
		return null;
	}
	static set OnOffline(value: (event: Event) => void)
	{
	}
	static get OnOffline(): (event: Event) => void
	{
		return null;
	}
	static set OnOnline(value: (event: Event) => void)
	{
	}
	static get OnOnline(): (event: Event) => void
	{
		return null;
	}
	static get Self(): WorkerGlobalScope
	{
		return null;
	}
	static AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	static AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	static AddEventListener(type: any, listener: any, capture?: boolean, wantsUntrusted?: Nullable<boolean>): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			SharedWorkerGlobalScope.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			SharedWorkerGlobalScope.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 4 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean) && (wantsUntrusted === null || wantsUntrusted instanceof Array))
		{
			SharedWorkerGlobalScope.AddEventListener_4(type, listener, capture, wantsUntrusted);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.AddEventListener_5(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.AddEventListener_6(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.AddEventListener_7(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.AddEventListener_8(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.AddEventListener_9(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.AddEventListener_10(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.AddEventListener_11(type, listener);
			return;
		}
		SharedWorkerGlobalScope.AddEventListener_12(type, listener, capture);
	}
	private static AddEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static AddEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static AddEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static AddEventListener_4(type: string, listener: IEventListener, capture: boolean, wantsUntrusted: Nullable<boolean>): void
	{
	}
	private static AddEventListener_5(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private static AddEventListener_6(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static AddEventListener_7(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private static AddEventListener_8(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_9(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static AddEventListener_10(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static AddEventListener_11(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private static AddEventListener_12(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static Atob(atob: string): string
	{
		return null;
	}
	static Btoa(btoa: string): string
	{
		return null;
	}
	static Close(): void
	{
	}
	static DispatchEvent(event: Event): boolean
	{
		return false;
	}
	static Dump(): void;
	static Dump(str: string): void;
	static Dump(str?: string): void
	{
		if (arguments.length === 0)
		{
			SharedWorkerGlobalScope.Dump_0();
			return;
		}
		SharedWorkerGlobalScope.Dump_1(str);
	}
	private static Dump_0(): void
	{
	}
	private static Dump_1(str: string): void
	{
	}
	static ImportScripts(urls: string[]): void
	{
	}
	static RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: string, listener: IEventListener): void;
	static RemoveEventListener(type: string, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	static RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	static RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			SharedWorkerGlobalScope.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			SharedWorkerGlobalScope.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.RemoveEventListener_8(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			SharedWorkerGlobalScope.RemoveEventListener_9(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			SharedWorkerGlobalScope.RemoveEventListener_10(type, listener);
			return;
		}
		SharedWorkerGlobalScope.RemoveEventListener_11(type, listener, capture);
	}
	private static RemoveEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static RemoveEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_2(type: string, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_3(type: string, listener: IEventListener, capture: boolean): void
	{
	}
	private static RemoveEventListener_4(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private static RemoveEventListener_5(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_6(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private static RemoveEventListener_7(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_8(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private static RemoveEventListener_9(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private static RemoveEventListener_10(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private static RemoveEventListener_11(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	static ToNativeLineEndings($string: string): string
	{
		return null;
	}
	static SetTimeout(handler: () => void): number;
	static SetTimeout(handler: () => void, timeout: number): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetTimeout(handler: string): number;
	static SetTimeout(handler: string, timeout: number): number;
	static SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return SharedWorkerGlobalScope.SetTimeout_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return SharedWorkerGlobalScope.SetTimeout_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return SharedWorkerGlobalScope.SetTimeout_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return SharedWorkerGlobalScope.SetTimeout_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return SharedWorkerGlobalScope.SetTimeout_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return SharedWorkerGlobalScope.SetTimeout_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return SharedWorkerGlobalScope.SetTimeout_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return SharedWorkerGlobalScope.SetTimeout_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return SharedWorkerGlobalScope.SetTimeout_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return SharedWorkerGlobalScope.SetTimeout_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return SharedWorkerGlobalScope.SetTimeout_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return SharedWorkerGlobalScope.SetTimeout_11(handler);
		}
		return SharedWorkerGlobalScope.SetTimeout_12(handler, timeout);
	}
	private static SetTimeout_0(handler: () => void): number
	{
		return 0;
	}
	private static SetTimeout_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetTimeout_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetTimeout_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetTimeout_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetTimeout_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetTimeout_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetTimeout_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetTimeout_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetTimeout_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetTimeout_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetTimeout_11(handler: string): number
	{
		return 0;
	}
	private static SetTimeout_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static SetInterval(handler: () => void): number;
	static SetInterval(handler: () => void, timeout: number): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	static SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	static SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	static SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	static SetInterval(handler: string): number;
	static SetInterval(handler: string, timeout: number): number;
	static SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return SharedWorkerGlobalScope.SetInterval_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return SharedWorkerGlobalScope.SetInterval_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return SharedWorkerGlobalScope.SetInterval_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return SharedWorkerGlobalScope.SetInterval_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return SharedWorkerGlobalScope.SetInterval_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return SharedWorkerGlobalScope.SetInterval_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return SharedWorkerGlobalScope.SetInterval_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return SharedWorkerGlobalScope.SetInterval_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return SharedWorkerGlobalScope.SetInterval_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return SharedWorkerGlobalScope.SetInterval_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return SharedWorkerGlobalScope.SetInterval_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return SharedWorkerGlobalScope.SetInterval_11(handler);
		}
		return SharedWorkerGlobalScope.SetInterval_12(handler, timeout);
	}
	private static SetInterval_0(handler: () => void): number
	{
		return 0;
	}
	private static SetInterval_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private static SetInterval_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private static SetInterval_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private static SetInterval_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private static SetInterval_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private static SetInterval_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private static SetInterval_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private static SetInterval_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private static SetInterval_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private static SetInterval_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private static SetInterval_11(handler: string): number
	{
		return 0;
	}
	private static SetInterval_12(handler: string, timeout: number): number
	{
		return 0;
	}
	static ClearInterval(handle: number): void
	{
	}
	static ClearTimeout(handle: number): void
	{
	}
	constructor()
	{
		super();
	}
}
class Worker extends EventTarget
{
	set OnError(value: (event: Event) => void)
	{
	}
	get OnError(): (event: Event) => void
	{
		return null;
	}
	set OnMessage(value: (event: Event) => void)
	{
	}
	get OnMessage(): (event: Event) => void
	{
		return null;
	}
	constructor();
	constructor(scriptURL: string);
	constructor(scriptURL?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(scriptURL);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(scriptURL: string): void
	{
	}
	new AddEventListener(type: string, listener: (target: Worker, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: Worker, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerEvents, listener: () => void): void;
	new AddEventListener(type: WorkerEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: WorkerEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: WorkerEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerEvents, listener: (target: Worker, event: Event) => void): void;
	new AddEventListener(type: WorkerEvents, listener: (target: Worker, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerEvents, listener: IEventListener): void;
	new AddEventListener(type: WorkerEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: Worker, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: Worker, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: WorkerEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: WorkerEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: WorkerEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: WorkerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: WorkerEvents, listener: (target: Worker, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: WorkerEvents, listener: (target: Worker, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: WorkerEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: WorkerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	PostMessage(message: any): void;
	PostMessage(message: any, transfer: any[]): void;
	PostMessage(message: any, transfer?: any[]): void
	{
		if (arguments.length === 1 && (message === null || message.constructor === Object))
		{
			this.PostMessage_0(message);
			return;
		}
		this.PostMessage_1(message, transfer);
	}
	private PostMessage_0(message: any): void
	{
	}
	private PostMessage_1(message: any, transfer: any[]): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: Worker, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: Worker, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerEvents, listener: () => void): void;
	new RemoveEventListener(type: WorkerEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: WorkerEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerEvents, listener: (target: Worker, event: Event) => void): void;
	new RemoveEventListener(type: WorkerEvents, listener: (target: Worker, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerEvents, listener: IEventListener): void;
	new RemoveEventListener(type: WorkerEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: Worker, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: Worker, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: WorkerEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: WorkerEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: WorkerEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: WorkerEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: WorkerEvents, listener: (target: Worker, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: WorkerEvents, listener: (target: Worker, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: WorkerEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: WorkerEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Terminate(): void
	{
	}
}
enum WorkerEvents
{
	Error,
	Message
}
class WorkerGlobalScope extends EventTarget implements IWindowTimers, IWindowBase64
{
	get Location(): WorkerLocation
	{
		return null;
	}
	get Navigator(): WorkerNavigator
	{
		return null;
	}
	set OnClose(value: (event: Event) => void)
	{
	}
	get OnClose(): (event: Event) => void
	{
		return null;
	}
	set OnError(value: (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean)
	{
	}
	get OnError(): (event: TypeOption<Event, string>, source: string, lineno: number, column: number, error: any) => boolean
	{
		return null;
	}
	set OnOffline(value: (event: Event) => void)
	{
	}
	get OnOffline(): (event: Event) => void
	{
		return null;
	}
	set OnOnline(value: (event: Event) => void)
	{
	}
	get OnOnline(): (event: Event) => void
	{
		return null;
	}
	get Self(): WorkerGlobalScope
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	new AddEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Atob(atob: string): string
	{
		return null;
	}
	Btoa(btoa: string): string
	{
		return null;
	}
	Close(): void
	{
	}
	Dump(): void;
	Dump(str: string): void;
	Dump(str?: string): void
	{
		if (arguments.length === 0)
		{
			this.Dump_0();
			return;
		}
		this.Dump_1(str);
	}
	private Dump_0(): void
	{
	}
	private Dump_1(str: string): void
	{
	}
	ImportScripts(urls: string[]): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener): void;
	new RemoveEventListener(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: WorkerGlobalScopeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: WorkerGlobalScopeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: WorkerGlobalScopeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: WorkerGlobalScopeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: WorkerGlobalScopeEvents, listener: (target: WorkerGlobalScope, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: WorkerGlobalScopeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: WorkerGlobalScopeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ToNativeLineEndings($string: string): string
	{
		return null;
	}
	SetTimeout(handler: () => void): number;
	SetTimeout(handler: () => void, timeout: number): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetTimeout(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetTimeout(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetTimeout(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetTimeout(handler: string): number;
	SetTimeout(handler: string, timeout: number): number;
	SetTimeout(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return this.SetTimeout_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return this.SetTimeout_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return this.SetTimeout_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return this.SetTimeout_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return this.SetTimeout_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return this.SetTimeout_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return this.SetTimeout_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return this.SetTimeout_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return this.SetTimeout_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return this.SetTimeout_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return this.SetTimeout_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return this.SetTimeout_11(handler);
		}
		return this.SetTimeout_12(handler, timeout);
	}
	private SetTimeout_0(handler: () => void): number
	{
		return 0;
	}
	private SetTimeout_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private SetTimeout_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private SetTimeout_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private SetTimeout_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private SetTimeout_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private SetTimeout_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private SetTimeout_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private SetTimeout_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private SetTimeout_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private SetTimeout_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private SetTimeout_11(handler: string): number
	{
		return 0;
	}
	private SetTimeout_12(handler: string, timeout: number): number
	{
		return 0;
	}
	SetInterval(handler: () => void): number;
	SetInterval(handler: () => void, timeout: number): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1): number;
	SetInterval(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number;
	SetInterval(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number;
	SetInterval(handler: Delegate, timeout: number, _arguments: any[]): number;
	SetInterval(handler: string): number;
	SetInterval(handler: string, timeout: number): number;
	SetInterval(handler: any, timeout?: number, arg1Or_arguments?: any, arg2?: T2, arg3?: T3, arg4?: T4, arg5?: T5, arg6?: T6, arg7?: T7, arg8?: T8): number
	{
		if (arguments.length === 1)
		{
			return this.SetInterval_0(handler);
		}
		if (arguments.length === 2 && (timeout === null || timeout.constructor === Number))
		{
			return this.SetInterval_1(handler, timeout);
		}
		if (arguments.length === 3 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1))
		{
			return this.SetInterval_2(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 4 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2))
		{
			return this.SetInterval_3(handler, timeout, arg1Or_arguments, arg2);
		}
		if (arguments.length === 5 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3))
		{
			return this.SetInterval_4(handler, timeout, arg1Or_arguments, arg2, arg3);
		}
		if (arguments.length === 6 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4))
		{
			return this.SetInterval_5(handler, timeout, arg1Or_arguments, arg2, arg3, arg4);
		}
		if (arguments.length === 7 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5))
		{
			return this.SetInterval_6(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5);
		}
		if (arguments.length === 8 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6))
		{
			return this.SetInterval_7(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6);
		}
		if (arguments.length === 9 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7))
		{
			return this.SetInterval_8(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7);
		}
		if (arguments.length === 10 && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof T1) && (arg2 === null || arg2 instanceof T2) && (arg3 === null || arg3 instanceof T3) && (arg4 === null || arg4 instanceof T4) && (arg5 === null || arg5 instanceof T5) && (arg6 === null || arg6 instanceof T6) && (arg7 === null || arg7 instanceof T7) && (arg8 === null || arg8 instanceof T8))
		{
			return this.SetInterval_9(handler, timeout, arg1Or_arguments, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
		}
		if (arguments.length === 3 && (handler === null || handler instanceof Delegate) && (timeout === null || timeout.constructor === Number) && (arg1Or_arguments === null || arg1Or_arguments instanceof Array))
		{
			return this.SetInterval_10(handler, timeout, arg1Or_arguments);
		}
		if (arguments.length === 1 && (handler === null || handler.constructor === String))
		{
			return this.SetInterval_11(handler);
		}
		return this.SetInterval_12(handler, timeout);
	}
	private SetInterval_0(handler: () => void): number
	{
		return 0;
	}
	private SetInterval_1(handler: () => void, timeout: number): number
	{
		return 0;
	}
	private SetInterval_2<T1>(handler: (arg: T1) => void, timeout: number, arg1: T1): number
	{
		return 0;
	}
	private SetInterval_3<T1, T2>(handler: (arg: T1) => void, timeout: number, arg1: T1, arg2: T2): number
	{
		return 0;
	}
	private SetInterval_4<T1, T2, T3>(handler: (arg1: T1, arg2: T2, arg3: T3) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3): number
	{
		return 0;
	}
	private SetInterval_5<T1, T2, T3, T4>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4): number
	{
		return 0;
	}
	private SetInterval_6<T1, T2, T3, T4, T5>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5): number
	{
		return 0;
	}
	private SetInterval_7<T1, T2, T3, T4, T5, T6>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6): number
	{
		return 0;
	}
	private SetInterval_8<T1, T2, T3, T4, T5, T6, T7>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7): number
	{
		return 0;
	}
	private SetInterval_9<T1, T2, T3, T4, T5, T6, T7, T8>(handler: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8) => void, timeout: number, arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6, arg7: T7, arg8: T8): number
	{
		return 0;
	}
	private SetInterval_10(handler: Delegate, timeout: number, _arguments: any[]): number
	{
		return 0;
	}
	private SetInterval_11(handler: string): number
	{
		return 0;
	}
	private SetInterval_12(handler: string, timeout: number): number
	{
		return 0;
	}
	ClearInterval(handle: number): void
	{
	}
	ClearTimeout(handle: number): void
	{
	}
}
enum WorkerGlobalScopeEvents
{
	Close,
	Error,
	Offline,
	Online
}
class WorkerLocation extends NObject
{
	get Hash(): string
	{
		return null;
	}
	get Host(): string
	{
		return null;
	}
	get Hostname(): string
	{
		return null;
	}
	get Href(): string
	{
		return null;
	}
	get Origin(): string
	{
		return null;
	}
	get Pathname(): string
	{
		return null;
	}
	get Port(): string
	{
		return null;
	}
	get Protocol(): string
	{
		return null;
	}
	get Search(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class WorkerNavigator extends NObject
{
	get AppCodeName(): string
	{
		return null;
	}
	get AppName(): string
	{
		return null;
	}
	get AppVersion(): string
	{
		return null;
	}
	get OnLine(): boolean
	{
		return false;
	}
	get Platform(): string
	{
		return null;
	}
	get Product(): string
	{
		return null;
	}
	get UserAgent(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	TaintEnabled(): boolean
	{
		return false;
	}
}
enum DocumentBaseEvents
{
	Abort,
	Afterscriptexecute,
	Beforescriptexecute,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Readystatechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum DocumentPosition
{
	ContainedBy = 16,
	Contains = 8,
	Disconnected = 1,
	Following = 4,
	ImplementationSpecific = 32,
	Preceding = 2
}
interface INodeFilter
{
	AcceptNode(node: XmlNode): NodeFilterReturn;
}
enum NodeFilter
{
	ShowAll = -1,
	ShowAttribute = 2,
	ShowCdataSection = 8,
	ShowComment = 128,
	ShowDocument = 256,
	ShowDocumentFragment = 1024,
	ShowDocumentType = 512,
	ShowElement = 1,
	ShowEntity = 32,
	ShowEntityReference = 16,
	ShowNotation = 2048,
	ShowProcessingInstruction = 64,
	ShowText = 4
}
enum NodeFilterReturn
{
	Accept = 1,
	Reject,
	Skip
}
class NodeIterator extends NObject
{
	get Filter(): INodeFilter
	{
		return null;
	}
	get PointerBeforeReferenceNode(): boolean
	{
		return false;
	}
	get ReferenceNode(): XmlNode
	{
		return null;
	}
	get Root(): XmlNode
	{
		return null;
	}
	get WhatToShow(): NodeFilter
	{
		return <NodeFilter>0;
	}
	constructor()
	{
		super();
	}
	Detach(): void
	{
	}
	NextNode(): XmlNode
	{
		return null;
	}
	PreviousNode(): XmlNode
	{
		return null;
	}
}
class TreeWalker extends NObject
{
	set CurrentNode(value: XmlNode)
	{
	}
	get CurrentNode(): XmlNode
	{
		return null;
	}
	get Filter(): INodeFilter
	{
		return null;
	}
	get Root(): XmlNode
	{
		return null;
	}
	get WhatToShow(): NodeFilter
	{
		return <NodeFilter>0;
	}
	constructor()
	{
		super();
	}
	FirstChild(): XmlNode
	{
		return null;
	}
	LastChild(): XmlNode
	{
		return null;
	}
	NextNode(): XmlNode
	{
		return null;
	}
	NextSibling(): XmlNode
	{
		return null;
	}
	ParentNode(): XmlNode
	{
		return null;
	}
	PreviousNode(): XmlNode
	{
		return null;
	}
	PreviousSibling(): XmlNode
	{
		return null;
	}
}
class XmlAttribute extends XmlNode
{
	new get LocalName(): string
	{
		return null;
	}
	get Name(): string
	{
		return null;
	}
	new get NamespaceURI(): string
	{
		return null;
	}
	get OwnerElement(): XmlElement
	{
		return null;
	}
	new get Prefix(): string
	{
		return null;
	}
	get Specified(): boolean
	{
		return false;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlAttribute, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlAttributeEvents, listener: () => void): void;
	new AddEventListener(type: XmlAttributeEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlAttributeEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlAttributeEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void): void;
	new AddEventListener(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlAttributeEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlAttributeEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlAttribute, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlAttributeEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlAttributeEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlAttributeEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlAttributeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlAttributeEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlAttributeEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlAttribute, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlAttributeEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlAttribute, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlAttributeEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlAttributeEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlAttributeEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlAttributeEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlAttributeEvents, listener: (target: XmlAttribute, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlAttributeEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlAttributeEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlAttributeEvents
{

}
class XmlCharacterData extends XmlNode
{
	set Data(value: string)
	{
	}
	get Data(): string
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get NextElementSibling(): XmlElement
	{
		return null;
	}
	get PreviousElementSibling(): XmlElement
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlCharacterData, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: () => void): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlCharacterDataEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlCharacterData, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlCharacterDataEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlCharacterDataEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlCharacterDataEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlCharacterDataEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlCharacterDataEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlCharacterDataEvents, listener: IEventListener, capture: boolean): void
	{
	}
	AppendData(data: string): void
	{
	}
	DeleteData(offset: number, count: number): void
	{
	}
	InsertData(offset: number, data: string): void
	{
	}
	Remove(): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlCharacterData, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlCharacterDataEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlCharacterData, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlCharacterDataEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlCharacterDataEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlCharacterDataEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlCharacterDataEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlCharacterDataEvents, listener: (target: XmlCharacterData, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlCharacterDataEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlCharacterDataEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ReplaceData(offset: number, count: number, data: string): void
	{
	}
	SubstringData(offset: number, count: number): string
	{
		return null;
	}
}
class XmlText extends XmlCharacterData implements IGeometryUtils
{
	get WholeText(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor();
	constructor(data: string);
	constructor(data?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(data);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(data: string): void
	{
	}
	new AddEventListener(type: string, listener: (target: XmlText, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlText, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlTextEvents, listener: () => void): void;
	new AddEventListener(type: XmlTextEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlTextEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlTextEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void): void;
	new AddEventListener(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlTextEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlTextEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlText, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlText, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlTextEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlTextEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlTextEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlTextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlTextEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlTextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint;
	ConvertPointFromNode(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMPoint
	{
		if (arguments.length === 2 && (point === null || point instanceof DOMPointInit) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertPointFromNode_0(point, from);
		}
		return this.ConvertPointFromNode_1(point, from, options);
	}
	private ConvertPointFromNode_0(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>): DOMPoint
	{
		return null;
	}
	private ConvertPointFromNode_1(point: DOMPointInit, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMPoint
	{
		return null;
	}
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertQuadFromNode(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (quad === null || quad instanceof DOMQuad) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertQuadFromNode_0(quad, from);
		}
		return this.ConvertQuadFromNode_1(quad, from, options);
	}
	private ConvertQuadFromNode_0(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertQuadFromNode_1(quad: DOMQuad, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad;
	ConvertRectFromNode(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options?: ConvertCoordinateOptions): DOMQuad
	{
		if (arguments.length === 2 && (rect === null || rect instanceof DOMRectReadOnly) && (from === null || from instanceof TypeOption))
		{
			return this.ConvertRectFromNode_0(rect, from);
		}
		return this.ConvertRectFromNode_1(rect, from, options);
	}
	private ConvertRectFromNode_0(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>): DOMQuad
	{
		return null;
	}
	private ConvertRectFromNode_1(rect: DOMRectReadOnly, from: TypeOption<XmlText, Element, DocumentBase>, options: ConvertCoordinateOptions): DOMQuad
	{
		return null;
	}
	GetBoxQuads(): DOMQuad[];
	GetBoxQuads(options: BoxQuadOptions): DOMQuad[];
	GetBoxQuads(options?: BoxQuadOptions): DOMQuad[]
	{
		if (arguments.length === 0)
		{
			return this.GetBoxQuads_0();
		}
		return this.GetBoxQuads_1(options);
	}
	private GetBoxQuads_0(): DOMQuad[]
	{
		return null;
	}
	private GetBoxQuads_1(options: BoxQuadOptions): DOMQuad[]
	{
		return null;
	}
	new RemoveEventListener(type: string, listener: (target: XmlText, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlText, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlTextEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlTextEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlTextEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlTextEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void): void;
	new RemoveEventListener(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlTextEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlTextEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlText, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlText, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlTextEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlTextEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlTextEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlTextEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlTextEvents, listener: (target: XmlText, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlTextEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlTextEvents, listener: IEventListener, capture: boolean): void
	{
	}
	SplitText(offset: number): XmlText
	{
		return null;
	}
}
class XmlCDataSection extends XmlText
{
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlCDataSection, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: () => void): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlCDataSectionEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlCDataSection, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlCDataSectionEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlCDataSectionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlCDataSectionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlCDataSectionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlCDataSectionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlCDataSectionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlCDataSection, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlCDataSectionEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlCDataSection, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlCDataSectionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlCDataSectionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlCDataSectionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlCDataSectionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlCDataSectionEvents, listener: (target: XmlCDataSection, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlCDataSectionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlCDataSectionEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlCDataSectionEvents
{

}
enum XmlCharacterDataEvents
{

}
class XmlComment extends XmlCharacterData
{
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor();
	constructor(data: string);
	constructor(data?: string)
	{
		if (arguments.length === 0)
		{
			super();
			this.constructor_0();
			return;
		}
		super();
		this.constructor_1(data);
	}
	private constructor_0(): void
	{
	}
	private constructor_1(data: string): void
	{
	}
	new AddEventListener(type: string, listener: (target: XmlComment, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlComment, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCommentEvents, listener: () => void): void;
	new AddEventListener(type: XmlCommentEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlCommentEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlCommentEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void): void;
	new AddEventListener(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlCommentEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlCommentEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlComment, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlComment, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlCommentEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlCommentEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlCommentEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlCommentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlCommentEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlCommentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlComment, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlComment, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlCommentEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlComment, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlComment, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlCommentEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlCommentEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlCommentEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlCommentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlCommentEvents, listener: (target: XmlComment, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlCommentEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlCommentEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlCommentEvents
{

}
class XmlDocument extends DocumentBase
{
	set Async(value: boolean)
	{
	}
	get Async(): boolean
	{
		return false;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlDocument, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentEvents, listener: () => void): void;
	new AddEventListener(type: XmlDocumentEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlDocumentEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void): void;
	new AddEventListener(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlDocumentEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlDocumentEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlDocument, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlDocumentEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlDocumentEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlDocumentEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlDocumentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlDocumentEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlDocumentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	Load(url: string): boolean
	{
		return false;
	}
	new RemoveEventListener(type: string, listener: (target: XmlDocument, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlDocumentEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlDocument, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlDocumentEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlDocumentEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlDocumentEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlDocumentEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlDocumentEvents, listener: (target: XmlDocument, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlDocumentEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlDocumentEvents, listener: IEventListener, capture: boolean): void
	{
	}
	CreateCDataSection(data: string): XmlCDataSection
	{
		return null;
	}
}
enum XmlDocumentEvents
{
	Abort,
	Afterscriptexecute,
	Beforescriptexecute,
	Blur,
	Canplay,
	Canplaythrough,
	Change,
	Click,
	Contextmenu,
	Copy,
	Cut,
	Dblclick,
	Drag,
	Dragend,
	Dragenter,
	Dragleave,
	Dragover,
	Dragstart,
	Drop,
	Durationchange,
	Emptied,
	Ended,
	Error,
	Focus,
	Input,
	Invalid,
	Keydown,
	Keypress,
	Keyup,
	Load,
	Loadeddata,
	Loadedmetadata,
	Loadstart,
	Mousedown,
	Mouseenter,
	Mouseleave,
	Mousemove,
	Mouseout,
	Mouseover,
	Mouseup,
	Mozfullscreenchange,
	Mozfullscreenerror,
	Mozpointerlockchange,
	Mozpointerlockerror,
	Paste,
	Pause,
	Play,
	Playing,
	Pointercancel,
	Pointerdown,
	Pointerenter,
	Pointerleave,
	Pointermove,
	Pointerout,
	Pointerover,
	Pointerup,
	Progress,
	Ratechange,
	Readystatechange,
	Reset,
	Scroll,
	Seeked,
	Seeking,
	Select,
	Show,
	Stalled,
	Submit,
	Suspend,
	Timeupdate,
	Touchcancel,
	Touchend,
	Touchenter,
	Touchleave,
	Touchmove,
	Touchstart,
	Volumechange,
	Waiting,
	Wheel
}
enum XmlDocumentFragmentEvents
{

}
enum XmlElementEvents
{
	Wheel
}
enum XmlNodeEvents
{

}
class XmlNodeList extends NObject
{
	get_Item(index: number): XmlNode
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	get Count(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<XmlNode>
	{
		return null;
	}
	Item(index: number): XmlNode
	{
		return null;
	}
}
enum XmlNodeType
{
	Attribute = 2,
	CDATA = 4,
	Comment = 8,
	Document,
	DocumentFragment = 11,
	DocumentType = 10,
	Element = 1,
	Entity = 6,
	EntityReference = 5,
	Notation = 12,
	ProcessingInstruction = 7,
	Text = 3
}
class XmlProcessingInstruction extends XmlCharacterData
{
	get Target(): string
	{
		return null;
	}
	set Name(value: string)
	{
	}
	get Name(): string
	{
		return null;
	}
	set Value(value: string)
	{
	}
	get Value(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: () => void): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlProcessingInstructionEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlProcessingInstructionEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlProcessingInstructionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlProcessingInstructionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlProcessingInstructionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlProcessingInstructionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlProcessingInstructionEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlProcessingInstructionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlProcessingInstructionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlProcessingInstructionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlProcessingInstructionEvents, listener: (target: XmlProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlProcessingInstructionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlProcessingInstructionEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlProcessingInstructionEvents
{

}
class XmlSerializer extends NObject
{
	SerializeToString(root: XmlNode): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class XmlStylesheetProcessingInstruction extends XmlProcessingInstruction
{
	get Sheet(): StyleSheet
	{
		return null;
	}
	constructor()
	{
		super();
	}
	new AddEventListener(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void;
	new AddEventListener(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: () => void): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: () => void, capture: boolean): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener): void;
	new AddEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener, capture: boolean): void;
	new AddEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.AddEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.AddEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.AddEventListener_8(type, listener);
			return;
		}
		this.AddEventListener_9(type, listener, capture);
	}
	private new AddEventListener_0(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void
	{
	}
	private new AddEventListener_1(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_2(type: XmlStylesheetProcessingInstructionEvents, listener: () => void): void
	{
	}
	private AddEventListener_3(type: XmlStylesheetProcessingInstructionEvents, listener: () => void, capture: boolean): void
	{
	}
	private AddEventListener_4(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void): void
	{
	}
	private AddEventListener_5(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_6(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void
	{
	}
	private AddEventListener_7(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private AddEventListener_8(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener): void
	{
	}
	private AddEventListener_9(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener, capture: boolean): void
	{
	}
	new RemoveEventListener(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void;
	new RemoveEventListener(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: () => void): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: () => void, capture: boolean): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener): void;
	new RemoveEventListener(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener, capture: boolean): void;
	new RemoveEventListener(type: any, listener: any, capture?: boolean): void
	{
		if (arguments.length === 2 && (type === null || type.constructor === String))
		{
			this.RemoveEventListener_0(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === String) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_1(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_2(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_3(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_4(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_5(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_6(type, listener);
			return;
		}
		if (arguments.length === 3 && (type === null || type.constructor === Number) && (capture === null || capture.constructor === Boolean))
		{
			this.RemoveEventListener_7(type, listener, capture);
			return;
		}
		if (arguments.length === 2 && (type === null || type.constructor === Number))
		{
			this.RemoveEventListener_8(type, listener);
			return;
		}
		this.RemoveEventListener_9(type, listener, capture);
	}
	private new RemoveEventListener_0(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void
	{
	}
	private new RemoveEventListener_1(type: string, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_2(type: XmlStylesheetProcessingInstructionEvents, listener: () => void): void
	{
	}
	private RemoveEventListener_3(type: XmlStylesheetProcessingInstructionEvents, listener: () => void, capture: boolean): void
	{
	}
	private RemoveEventListener_4(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void): void
	{
	}
	private RemoveEventListener_5(type: XmlStylesheetProcessingInstructionEvents, listener: (event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_6(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void): void
	{
	}
	private RemoveEventListener_7(type: XmlStylesheetProcessingInstructionEvents, listener: (target: XmlStylesheetProcessingInstruction, event: Event) => void, capture: boolean): void
	{
	}
	private RemoveEventListener_8(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener): void
	{
	}
	private RemoveEventListener_9(type: XmlStylesheetProcessingInstructionEvents, listener: IEventListener, capture: boolean): void
	{
	}
}
enum XmlStylesheetProcessingInstructionEvents
{

}
enum XmlTextEvents
{

}
class XmlElementCollection extends NObject
{
	get_Item(name: string): XmlElement
	{
		return null;
	}
	get_Item(index: number): XmlElement
	{
		return null;
	}
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	GetEnumerator(): IEnumerator<XmlElement>
	{
		return null;
	}
	Item(index: number): XmlElement
	{
		return null;
	}
	NamedItem(name: string): XmlElement
	{
		return null;
	}
}
class XmlDocumentParser extends NObject
{
	static Parse(markup: string): XmlDocument
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
enum ResultType
{
	Any,
	AnyUnorderedNode = 8,
	Boolean = 3,
	FirstOrderedNode = 9,
	Number = 1,
	OrderedNodeIterator = 5,
	OrderedNodeSnapshot = 7,
	String = 2,
	UnorderedNodeIterator = 4,
	UnorderedNodeSnapshot = 6
}
class XPathExpression extends NObject
{
	constructor()
	{
		super();
	}
	Evaluate(contextNode: XmlNode, type: ResultType, result: XPathResult): XPathResult
	{
		return null;
	}
}
class XPathNSResolver extends NObject
{
	constructor()
	{
		super();
	}
	LookupNamespaceURI(prefix: string): string
	{
		return null;
	}
}
class XPathResult extends NObject
{
	static ANY_TYPE: number = 0;
	static ANY_UNORDERED_NODE_TYPE: number = 8;
	static BOOLEAN_TYPE: number = 3;
	static FIRST_ORDERED_NODE_TYPE: number = 9;
	static NUMBER_TYPE: number = 1;
	static ORDERED_NODE_ITERATOR_TYPE: number = 5;
	static ORDERED_NODE_SNAPSHOT_TYPE: number = 7;
	static STRING_TYPE: number = 2;
	static UNORDERED_NODE_ITERATOR_TYPE: number = 4;
	static UNORDERED_NODE_SNAPSHOT_TYPE: number = 6;
	get BooleanValue(): boolean
	{
		return false;
	}
	get InvalidIteratorState(): boolean
	{
		return false;
	}
	get NumberValue(): number
	{
		return 0.0;
	}
	get ResultType(): ResultType
	{
		return ResultType.Any;
	}
	get SingleNodeValue(): XmlNode
	{
		return null;
	}
	get SnapshotLength(): number
	{
		return 0;
	}
	get StringValue(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	IterateNext(): XmlNode
	{
		return null;
	}
	SnapshotItem(index: number): XmlNode
	{
		return null;
	}
}
class SqlResultSet extends NObject
{
	get InsertId(): number
	{
		return 0;
	}
	get Rows(): SqlResultSetRowList
	{
		return null;
	}
	get RowsAffected(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
}
class SqlResultSetRow extends NObject
{
	get_Item(name: string): any
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SqlResultSetRowList extends NObject
{
	get Length(): number
	{
		return 0;
	}
	constructor()
	{
		super();
	}
	Item(index: number): SqlResultSetRow
	{
		return null;
	}
}
class SqlError extends NObject
{
	get Code(): number
	{
		return 0;
	}
	get Message(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
}
class SqlTransaction extends NObject
{
	constructor()
	{
		super();
	}
	ExecuteSql(sql: string, _arguments: any[], callback: (transaction: SqlTransaction, resultSet: SqlResultSet) => boolean, errorCallback: (transaction: SqlTransaction, error: SqlError) => boolean): void
	{
	}
}
class SqlDatabase extends NObject
{
	get Version(): string
	{
		return null;
	}
	constructor()
	{
		super();
	}
	ChangeVersion(oldVersion: string, newVersion: string, callback: (transaction: SqlTransaction) => boolean, errorCallback: (error: SqlError) => boolean, successCallback: () => void): void
	{
	}
	ReadTransaction(callback: (transaction: SqlTransaction) => boolean, errorCallback: (error: SqlError) => boolean, successCallback: () => void): void
	{
	}
	Transaction(callback: (transaction: SqlTransaction) => boolean, errorCallback: (error: SqlError) => boolean, successCallback: () => void): void
	{
	}
}
