<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mscorlib</name>
    </assembly>
    <members>
        <member name="T:System.Object">
            <summary>
            Equivalent to the Object type in Javascript.
            </summary>
        </member>
        <member name="M:System.Object.GetType">
            <summary>
            Retrieves the type associated with an object instance.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:System.Object.ToString">
            <summary>
            Converts an object to its string representation.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:System.Object.ToLocaleString">
            <summary>
            Converts an object to its culture-sensitive string representation.
            </summary>
            <returns>The culture-sensitive string representation of the object.</returns>
        </member>
        <member name="M:System.Object.Keys(System.Object)">
            <summary>
            Returns an array of a given object's own enumerable properties, in the same order as that provided by a for-in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).
            </summary>
            <param name="obj">Object to investigate</param>
        </member>
        <member name="M:System.Object.GetOwnPropertyNames(System.Object)">
            <summary>
            Returns an array of all properties (enumerable or not) found directly upon a given object.
            </summary>
            <param name="obj">Object to investigate</param>
        </member>
        <member name="T:System.AttributeTargets">
            <summary>Specifies the application elements on which it is valid to apply an attribute.</summary>
        </member>
        <member name="T:System.AttributeUsageAttribute">
            <summary>Specifies the usage of another attribute class. This class cannot be inherited.</summary>
        </member>
        <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
            <summary>Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute"/> class with the specified list of <see cref="T:System.AttributeTargets"/>, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple"/> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited"/> value.</summary>
            <param name="validOn">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</param>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</summary>
            <returns>One or several <see cref="T:System.AttributeTargets"/> values. The default is All.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</summary>
            <returns>true if more than one instance is allowed to be specified; otherwise, false. The default is false.</returns>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>Gets or sets a Boolean value indicating whether the indicated attribute can be inherited by derived classes and overriding members.</summary>
            <returns>true if the attribute can be inherited by derived classes and overriding members; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:System.Collections.Generic.Comparer`1">
            <summary>Provides a base class for implementations of the <see cref="T:System.Collections.Generic.IComparer`1"/> generic interface.</summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
            <summary>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</summary>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero <paramref name="x"/> is less than <paramref name="y"/>.Zero <paramref name="x"/> equals <paramref name="y"/>.Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="P:System.Collections.Generic.Comparer`1.Default">
            <summary>Returns a default sort order comparer for the type specified by the generic argument.</summary>
            <returns>An object that inherits <see cref="T:System.Collections.Generic.Comparer`1"/> and serves as a sort order comparer for type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.IComparer`1">
            <summary>Defines a method that a type implements to compare two objects.</summary>
            <typeparam name="T">The type of objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:System.Collections.IEqualityComparer">
            <summary>
            Don't use. Use <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instead.
            </summary>
        </member>
        <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Don't use. Use <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instead. When implementing <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>, just provide a dummy implementation for this method.
            </summary>
        </member>
        <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Don't use. Use <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> instead. When implementing <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>, just provide a dummy implementation for this method.
            </summary>
        </member>
        <member name="T:System.Collections.IEnumerable">
            <summary>
            Don't use this interface, use the generic one instead. When implementing, you need not supply a valid implementation of GetEnumerator.
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerable.GetEnumerator">
            <summary>
            Don't call this method, use the generic version instead.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``1(System.Action{``0})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``2(System.Action{``0,``1})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``3(System.Action{``0,``1,``2})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``4(System.Action{``0,``1,``2,``3})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``5(System.Action{``0,``1,``2,``3,``4})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``6(System.Action{``0,``1,``2,``3,``4,``5})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``7(System.Action{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``8(System.Action{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``2(System.Func{``0,``1})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``3(System.Func{``0,``1,``2})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``4(System.Func{``0,``1,``2,``3})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``6(System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``7(System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="M:System.Delegate.ThisFix``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            This method will return a delegate that (when called) will call another delegate, with the JavaScript 'this' passed as the first parameter, and 'this' being as expected by the C# code. This is useful when dealing with jQuery.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.JsDictionary`2">
            <summary>
            The JsDictionary data type which is mapped to the Object type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.List`1">
            <summary>
            Equivalent to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.IEnumerator">
            <summary>
            Don't use this interface, use the generic one instead. When implementing, you need not supply a valid implementation of GetEnumerator.
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerator.MoveNext">
            <summary>
            Don't call this method, use the generic version instead.
            </summary>
        </member>
        <member name="M:System.Collections.IEnumerator.Reset">
            <summary>
            Don't call this method, use the generic version instead.
            </summary>
        </member>
        <member name="P:System.Collections.IEnumerator.Current">
            <summary>
            Don't call this method, use the generic version instead.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Queue`1">
            <summary>
            The Queue data type which is mapped to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.Stack`1">
            <summary>
            The Stack data type which is mapped to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.JsDictionary">
            <summary>
            The JsDictionary data type which is mapped to the Object type in Javascript.
            </summary>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> class that is a read-only wrapper around the specified list.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
            <summary>
            Determines whether an element is in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="value"/> is found in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>; otherwise, false.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> for the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </returns>
        </member>
        <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>.
            </summary>
            <returns>
            The zero-based index of the first occurrence of <paramref name="value"/> within the entire <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/>, if found; otherwise, -1.
            </returns>
            <param name="value">The object to locate in the <see cref="T:System.Collections.Generic.List`1"/>. The value can be null for reference types.</param>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> instance.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> instance.
            </returns>
        </member>
        <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get.</param>
        </member>
        <member name="T:System.Collections.Queue">
            <summary>
            The Queue data type which is mapped to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.Stack">
            <summary>
            The Stack data type which is mapped to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Collections.TypedArrays.ArrayBuffer">
            <summary>
            The ArrayBuffer type describes a buffer used to store data for the array buffer views.
            </summary>
        </member>
        <member name="M:System.Collections.TypedArrays.ArrayBuffer.Slice(System.Int64)">
            <summary>
            Returns a new ArrayBuffer whose contents are a copy of this
            ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.
            If either begin or end is negative, it refers to an index from the
            end of the array, as opposed to from the beginning.
            </summary>
        </member>
        <member name="M:System.Collections.TypedArrays.ArrayBuffer.Slice(System.Int64,System.Int64)">
            <summary>
            Returns a new ArrayBuffer whose contents are a copy of this
            ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.
            If either begin or end is negative, it refers to an index from the
            end of the array, as opposed to from the beginning.
            </summary>
        </member>
        <member name="P:System.Collections.TypedArrays.ArrayBuffer.ByteLength">
            <summary>
            The length of the ArrayBuffer in bytes, as fixed at construction time.
            </summary>
        </member>
        <member name="T:System.Collections.TypedArrays.ArrayBufferView">
            <summary>
            The ArrayBufferView type holds information shared among
            all of the types of views of ArrayBuffers.
            </summary>
        </member>
        <member name="P:System.Collections.TypedArrays.ArrayBufferView.Buffer">
            <summary>
            The ArrayBuffer that this ArrayBufferView references.
            </summary>
        </member>
        <member name="P:System.Collections.TypedArrays.ArrayBufferView.ByteOffset">
            <summary>
            The offset of this ArrayBufferView from the start of
            its ArrayBuffer, in bytes, as fixed at construction time.
            </summary>
        </member>
        <member name="P:System.Collections.TypedArrays.ArrayBufferView.ByteLength">
            <summary>
            The length of the ArrayBufferView in bytes, as fixed at construction time.
            </summary>
        </member>
        <member name="T:System.Converter`2">
            <summary>
            Represents a method that converts an object from one type to another type.
            </summary>
            <returns>
            The <typeparamref name="TOutput"/> that represents the converted <typeparamref name="TInput"/>.
            </returns>
            <param name="input">The object to convert.</param><typeparam name="TInput">The type of object that is to be converted.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><typeparam name="TOutput">The type the input object is to be converted to.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam><filterpriority>1</filterpriority>
        </member>
        <member name="T:System.Comparison`1">
            <summary>Represents the method that compares two objects of the same type.</summary>
            <returns>A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than 0 <paramref name="x"/> is less than <paramref name="y"/>.0 <paramref name="x"/> equals <paramref name="y"/>.Greater than 0 <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <typeparam name="T">The type of the objects to compare.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
        </member>
        <member name="T:System.Guid">
            <summary>
            The Guid data type which is mapped to the string type in Javascript.
            </summary>
        </member>
        <member name="M:System.IComparable`1.CompareTo(`0)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:System.IFormattable">
            <summary>
            Provides functionality to format the value of an object into a string representation.
            </summary>
        </member>
        <member name="M:System.IFormattable.ToString(System.String)">
            <summary>Formats the value of the current instance using the specified format.</summary>
            <returns>The value of the current instance in the specified format.</returns>
            <param name="format">The format to use.-or- A null reference to use the default format defined for the type of the <see cref="T:System.IFormattable"/> implementation.</param>
        </member>
        <member name="T:System.DayOfWeek">
            <summary>
            Specifies the day of the week.
            </summary>
        </member>
        <member name="T:System.Reflection.BindingFlags">
            <summary>
            Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.
            </summary>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <param name="inherit">Ignored for members. Base members will never be considered.</param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes">
            <summary>
            Returns an array of all custom attributes applied to this member.
            </summary>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. </returns>
        </member>
        <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type)">
            <summary>
            Returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type"/>.
            </summary>
            <param name="attributeType">The type of attribute to search for. Only attributes that are assignable to this type are returned. </param>
            <returns>An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</returns>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.ScriptName">
            <summary>
            Script name of the constructor. Null for the unnamed constructor and for constructors with special implementations
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsStaticMethod">
            <summary>
            True if the constructor is a normal method that returns the created instance and should be invoked without the 'new' operator
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.SpecialImplementation">
            <summary>
            For constructors with a special implementation (eg. [ObjectLiteral] or [InlineCode]), contains a delegate that can be invoked to create an instance.
            </summary>
        </member>
        <member name="P:System.Reflection.ConstructorInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the constructor.
            </summary>
        </member>
        <member name="P:System.Reflection.PropertyInfo.ScriptFieldName">
            <summary>
            For properties implemented as fields, contains the name of the field. Null for properties implemented as get and set methods.
            </summary>
        </member>
        <member name="P:System.Reflection.FieldInfo.ScriptName">
            <summary>
            Script name of the field
            </summary>
        </member>
        <member name="T:System.Reflection.MemberTypes">
            <summary>
            Marks each type of member that is defined as a derived class of MemberInfo.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.ScriptName">
            <summary>
            Script name of the method. Null if the method has a special implementation.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsStaticMethodWithThisAsFirstArgument">
            <summary>
            If true, this method should be invoked as a static method with the 'this' reference as the first argument. Note that this property does not affect the Invoke and CreateDelegate methods.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.SpecialImplementation">
            <summary>
            For methods with a special implementation (eg. [InlineCode]), contains a delegate that represents the method. Null for normal methods.
            </summary>
        </member>
        <member name="P:System.Reflection.MethodInfo.IsExpandParams">
            <summary>
            Whether the [ExpandParams] attribute was specified on the method.
            </summary>
        </member>
        <member name="T:System.SerializableAttribute">
            <summary>
            This attribute indicates that a class is a serializable type, and can be used as an alternative to inheriting from <see cref="T:System.Record"/>. Record classes must inherit directly from object, be sealed, and cannot contain any instance events.
            Instance properties in serializable types are implemented as fields.
            All instance fields and properties on serializable types will act as they were decorated with a [PreserveNameAttribute], unless another renaming attribute was specified.
            </summary>
        </member>
        <member name="P:System.SerializableAttribute.TypeCheckCode">
            <summary>
            Code used to check whether an object is of this type. Can use the placeholder {this} to reference the object being checked, as well as all type parameter for the type.
            </summary>
        </member>
        <member name="M:System.Random.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Random"/> class, using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:System.Random.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Random"/> class, using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:System.Random.Next">
            <summary>
            Returns a nonnegative random number.
            </summary>
        </member>
        <member name="M:System.Random.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum.
            </summary>
        </member>
        <member name="M:System.Random.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
        </member>
        <member name="M:System.Random.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
        </member>
        <member name="M:System.Random.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Random.Sample">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
        </member>
        <member name="T:System.Error">
            <summary>
            Represents a JavaScript Error. Useful primarily for interop, within C# code it will always be wrapped to an Exception when caught.
            </summary>
        </member>
        <member name="M:System.Error.GetData(System.String)">
            <summary>
            Returns additional data associated with the error (equivalent to a property access in JS).
            </summary>
        </member>
        <member name="T:System.JsDate">
            <summary>
            Equivalent to the Date type in Javascript.
            </summary>
        </member>
        <member name="M:System.JsDate.#ctor">
            <summary>
            Creates a new instance of Date initialized from the current time.
            </summary>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int64)">
            <summary>
            Creates a new instance of Date initialized from the specified number of milliseconds.
            </summary>
            <param name="milliseconds">Milliseconds since January 1st, 1970.</param>
        </member>
        <member name="M:System.JsDate.#ctor(System.String)">
            <summary>
            Creates a new instance of Date initialized from parsing the specified date.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (0 through 11)</param>
            <param name="date">The day of the month (1 through # of days in the specified month)</param>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (0 through 11)</param>
            <param name="date">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (0 through 11)</param>
            <param name="date">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (0 through 11)</param>
            <param name="date">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
            <param name="seconds">The seconds (0 through 59)</param>
        </member>
        <member name="M:System.JsDate.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (0 through 11)</param>
            <param name="date">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
            <param name="seconds">The seconds (0 through 59)</param>
            <param name="milliseconds">The milliseconds (0 through 999)</param>
        </member>
        <member name="M:System.JsDate.op_Subtraction(System.JsDate,System.JsDate)">
            <summary>
            Returns the difference in milliseconds between two dates.
            </summary>
        </member>
        <member name="M:System.JsDate.op_Equality(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.JsDate.op_Inequality(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.JsDate.op_LessThan(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.JsDate.op_GreaterThan(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.JsDate.op_LessThanOrEqual(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.JsDate.op_GreaterThanOrEqual(System.JsDate,System.JsDate)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="P:System.JsDate.Now">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="P:System.JsDate.Today">
            <summary>
            Returns the current date with the time part set to 00:00:00.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.RegexMatch">
            <summary>
            This class represents a match returned by the <see cref="M:System.Text.RegularExpressions.Regex.Exec(System.String)"/> method.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.PromiseException">
            <summary>
            This exception is used as the exception for a task created from a promise when the underlying promise fails.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.PromiseException.Arguments">
            <summary>
            Arguments supplied to the promise onError() callback.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.IPromise">
            <summary>
            Represents a CommonJS Promise/A object. All the handlers can receive 0 or more arguments.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromDoneCallback(System.Object,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromDoneCallback(System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done.
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="callbackIndex">Index of the callback parameter in the actual method invocation.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted at the position indicated by the <paramref name="callbackIndex"/> parameter).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromDoneCallback``1(System.Object,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to have a single parameter, whose value will be used as the return value of the task.
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromDoneCallback``1(System.Object,System.Int32,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done.
            The callback is expected to have a single parameter, whose value will be used as the return value of the task.
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="callbackIndex">Index of the callback parameter in the actual method invocation.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted at the position indicated by the <paramref name="callbackIndex"/> parameter).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise(System.Threading.Tasks.IPromise)">
            <summary>
            Creates a task from a promise. The result of the promise is not accessible through the task. THe result of the task is the parameters passed to the onCompleted callback of the promise.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``1(System.Threading.Tasks.IPromise,System.Int32)">
            <summary>
            Creates a task from a promise. The result of the task will be set to one of the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultArgIndex">Index of the argument in the onCompleted callback of the promise that will become the result of the task. negative values count from the back, positive values count from the front.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``1(System.Threading.Tasks.IPromise,System.Func{``0})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``2(System.Threading.Tasks.IPromise,System.Func{``0,``1})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``3(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``4(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``5(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``6(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``7(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3,``4,``5,``6})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``8(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3,``4,``5,``6,``7})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromPromise``9(System.Threading.Tasks.IPromise,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8})">
            <summary>
            Creates a task from a promise. A factory method is used to create the result of the task based on the arguments to the onCompleted callback of the promise.
            </summary>
            <param name="promise">The promise to create a task from.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the onCompleted callback.</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode(System.Object,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``1(System.Object,System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``2(System.Object,System.Func{``0,``1},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``3(System.Object,System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``4(System.Object,System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``5(System.Object,System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``6(System.Object,System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``7(System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``8(System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="M:System.Threading.Tasks.Task.FromNode``9(System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8},System.String,System.Object[])">
            <summary>
            Creates a task from an invocation that will invoke a callback when it is done. The callback should be the last argument to the invoked method.
            The callback is expected to be a node-style callback, where the first argument is an Error object, or null if successful
            </summary>
            <param name="target">Target to invoke the method on.</param>
            <param name="resultFactory">Factory method to create the result of the task from the arguments to the callback.</param>
            <param name="method">Name of the method to invoke on the target.</param>
            <param name="otherArguments">Arguments to the method, not including the callback (which will be inserted as the last argument to the actual call).</param>
        </member>
        <member name="T:System.MidpointRounding">
            <summary>
            Specifies how mathematical rounding methods should process a number that is midway between two numbers.
            </summary>
        </member>
        <member name="T:System.ComponentModel.BrowsableAttribute">
            <summary>
            This attribute marks a field, property, event or method as
            "browsable", i.e. present in the type descriptor associated with
            the type.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.NonScriptableAttribute">
            <summary>
            This attribute can be placed on types in system script assemblies that should not
            be imported. It is only meant to be used within mscorlib.dll.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ImportedAttribute">
            <summary>
            This attribute can be placed on types that should not be emitted into generated
            script, as they represent existing script or native types. All members without another naming attribute are considered to use [PreserveName].
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ImportedAttribute.ObeysTypeSystem">
            <summary>
            Indicates that the type obeys the Saltarelle type system. If false (the default), the type is ignored in inheritance lists, casts to it is a no-op, and Object will be used if the type is used as a generic argument.
            The default is false. Requiring this to be set should be very uncommon.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ImportedAttribute.TypeCheckCode">
            <summary>
            Code used to check whether an object is of this type. Can use the placeholder {this} to reference the object being checked, as well as all type parameter for the type.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptAssemblyAttribute">
            <summary>
            Marks an assembly as a script assembly that can be used with Script#.
            Additionally, each script must have a unique name that can be used as
            a dependency name.
            This name is also used to generate unique names for internal types defined
            within the assembly. The ScriptQualifier attribute can be used to provide a
            shorter name if needed.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptQualifierAttribute">
            <summary>
            Provides a prefix to use when generating types internal to this assembly so that
            they can be unique within a given a script namespace.
            The specified prefix overrides the script name provided in the ScriptAssembly
            attribute.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IgnoreNamespaceAttribute">
            <summary>
            This attribute indicates that the namespace of type within a system assembly
            should be ignored at script generation time. It is useful for creating namespaces
            for the purpose of c# code that don't exist at runtime.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptNamespaceAttribute">
            <summary>
            Specifies the namespace that should be used in generated script. The script namespace
            is typically a short name, that is often shared across multiple assemblies.
            The developer is responsible for ensuring that public types across assemblies that share
            a script namespace are unique.
            For internal types, the ScriptQualifier attribute can be used to provide a short prefix
            to generate unique names.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ResourcesAttribute">
            <summary>
            This attribute can be placed on a static class that only contains static string
            fields representing a set of resource strings.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.GlobalMethodsAttribute">
            <summary>
            This attribute turns methods on a static class as global methods in the generated
            script. Note that the class must be static, and must contain only methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.NamedValuesAttribute">
            <summary>
            This attribute marks an enumeration type within a system assembly as as a set of
            names. Rather than the specific value, the name of the enumeration field is
            used as a string.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.NumericValuesAttribute">
            <summary>
            This attribute marks an enumeration type within a system assembly as as a set of
            numeric values. Rather than the enum field, the value of the enumeration field is
            used as a literal.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AlternateSignatureAttribute">
            <summary>
            This attribute allows defining an alternate method signature that is not generated
            into script, but can be used for defining overloads to enable optional parameter semantics
            for a method. It must be applied on a method defined as extern, since an alternate signature
            method does not contain an actual method body.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IntrinsicPropertyAttribute">
            <summary>
            This attribute denotes a C# property that manifests like a field in the generated
            JavaScript (i.e. is not accessed via get/set methods). This is really meant only
            for use when defining OM corresponding to native objects exposed to script.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptNameAttribute">
            <summary>
            Allows specifying the name to use for a type or member in the generated script. Property and event accessors can use the placeholder {owner} to denote the name of their owning entity.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.PreserveCaseAttribute">
            <summary>
            This attribute allows suppressing the default behavior of converting
            member names to camel-cased equivalents in the generated JavaScript.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.PreserveMemberCaseAttribute">
            <summary>
            This attribute allows suppressing the default behavior of converting
            member names of attached type to camel-cased equivalents in the generated JavaScript.
            When applied to an assembly, all types in the assembly are considered to have this
            attribute by default</summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.PreserveNameAttribute">
            <summary>
            This attribute allows suppressing the default behavior of minimizing
            private type names and member names in the generated JavaScript.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MinimizePublicNamesAttribute">
            <summary>
            This attribute allows public symbols inside an assembly to be minimized, in addition to non-public ones, when generating release scripts.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptAliasAttribute">
            <summary>
            This attribute allows specifying a script name for an imported method.
            The method is interpreted as a global method. As a result it this attribute
            only applies to static methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptSkipAttribute">
            <summary>
            This attributes causes a method to not be invoked. The method must either be a static method with one argument (in case Foo.M(x) will become x), or an instance method with no arguments (in which x.M() will become x).
            Can also be applied to a constructor, in which case the constructor will not be called if used as an initializer (": base()" or ": this()").
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineCodeAttribute">
            <summary>
            The method is implemented as inline code, eg Debugger.Break() => debugger. Can use the parameters {this} (for instance methods), as well as all typenames and argument names in braces (eg. {arg0}, {TArg0}).
            If a parameter name is preceeded by an @ sign, {@arg0}, that argument must be a literal string during invocation, and the supplied string will be inserted as an identifier into the script (eg '{this}.set_{@arg0}({arg1})' can transform the call 'c.F("MyProp", v)' to 'c.set_MyProp(v)'.
            If a parameter name is preceeded by an asterisk {*arg} that parameter must be a param array, and all invocations of the method must use the expanded invocation form. The entire array supplied for the parameter will be inserted into the call. Pretend that the parameter is a normal parameter, and commas will be inserted or omitted at the correct locations.
            The format string can also use identifiers starting with a dollar {$Namespace.Name} to construct type references. The name must be the fully qualified type name in this case.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineCodeAttribute.GeneratedMethodName">
            <summary>
            If set, a method with this name will be generated from the method source.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineCodeAttribute.NonVirtualCode">
            <summary>
            This code is used when the method is invoked non-virtually (eg. in a base.Method() call).
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.InlineCodeAttribute.NonExpandedFormCode">
            <summary>
            This code is used when the method, which should be a method with a param array parameter, is invoked in non-expanded form. Optional, but can be used to support non-expanded invocation of a method that has a {*param} placeholder in its code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InstanceMethodOnFirstArgumentAttribute">
            <summary>
            This attribute specifies that a static method should be treated as an instance method on its first argument. This means that <c>MyClass.Method(x, a, b)</c> will be transformed to <c>x.Method(a, b)</c>.
            If no other name-preserving attribute is used on the member, it will be treated as if it were decorated with a [PreserveNameAttribute].
            Useful for extension methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IncludeGenericArgumentsAttribute">
            <summary>
            This attribute specifies that a generic type or method should have script generated as if it was a non-generic one. Any uses of the type arguments inside the method (eg. <c>typeof(T)</c>, or calling another generic method with T as a type argument) will cause runtime errors.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.GenericArgumentsDefault">
            <summary>
            This enum defines the possibilities for default values for generic argument handling in an assembly. 
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.GenericArgumentsDefault.IncludeExceptImported">
            <summary>
            Include generic arguments for all types that are not [Imported]
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.GenericArgumentsDefault.Ignore">
            <summary>
            Ignore generic arguments by default (this is the default)
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.GenericArgumentsDefault.RequireExplicitSpecification">
            <summary>
            Require an <see cref="T:System.Runtime.CompilerServices.IncludeGenericArgumentsAttribute"/> for all generic types/methods, excepts those that are imported, which will default to ignore their generic arguments.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IncludeGenericArgumentsDefaultAttribute">
            <summary>
            This attribute indicates whether generic arguments for types and methods are included, but can always be overridden by specifying an <see cref="T:System.Runtime.CompilerServices.IncludeGenericArgumentsAttribute"/> on types or methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IntrinsicOperatorAttribute">
            <summary>
            This attribute indicates that a user-defined operator should be compiled as if it were builtin (eg. op_Addition(a, b) => a + b). It can only be used on non-conversion operator methods.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExpandParamsAttribute">
            <summary>
            This attribute can be applied to a method with a "params" parameter to make the param array be expanded in script (eg. given 'void F(int a, params int[] b)', the invocation 'F(1, 2, 3)' will be translated to 'F(1, [2, 3])' without this attribute, but 'F(1, 2, 3)' with this attribute.
            Methods with this attribute can only be invoked in the expanded form.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.BindThisToFirstParameterAttribute">
            <summary>
            Indicates that the Javascript 'this' should appear as the first argument to the delegate.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ObjectLiteralAttribute">
            <summary>
            If this attribute is applied to a constructor for a serializable type, it means that the constructor will not be called, but rather an object initializer will be created. Eg. 'new MyRecord(1, "X")' can become '{ a: 1, b: 'X' }'.
            All parameters must have a field or property with the same (case-insensitive) name, of the same type.
            This attribute is implicit on constructors of imported serializable types.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ScriptSharpCompatibilityAttribute">
            <summary>
            This attribute can be specified on an assembly to specify additional compatibility options to help migrating from Script#.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ScriptSharpCompatibilityAttribute.OmitDowncasts">
            <summary>
            If true, code will not be generated for casts of type '(MyClass)someValue'. Code will still be generated for 'someValue is MyClass' and 'someValue as MyClass'.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.ScriptSharpCompatibilityAttribute.OmitNullableChecks">
            <summary>
            If true, code will not be generated to verify that a nullable value is not null before converting it to its underlying type.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DummyTypeUsedToAddAttributeToDefaultValueTypeConstructor">
            <summary>
            If a constructor for a value type takes an instance of this type as a parameter, any attribute applied to that constructor will instead be applied to the default (undeclarable) constructor.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleNameAttribute">
            <summary>
            Specifies that a type is defined in a module, which should be imported by a require() call.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncModuleAttribute">
            <summary>
            When specified on an assembly, Javascript that adheres to the AMD pattern (require/define) will be generated.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.AdditionalDependencyAttribute">
            <summary>
            When specified on an assembly with an AsyncModule attribute, the module will require this additional dependency in its AMD declaration
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.EnumerateAsArrayAttribute">
            <summary>
            Can be applied to a GetEnumerator() method to indicate that that array-style enumeration should be used.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InlineConstantAttribute">
            <summary>
            Can be applied to a const field to indicate that the literal value of the constant should always be used instead of the symbolic field name.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ReflectableAttribute">
            <summary>
            Can be applied to a member to indicate that metadata for the member should (or should not) be included in the compiled script. By default members are reflectable if they have at least one scriptable attribute. The default reflectability can be changed with the [<see cref="T:System.Runtime.CompilerServices.DefaultMemberReflectabilityAttribute"/>].
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MemberReflectability">
            <summary>
            This enum defines the possibilities for default member reflectability.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MemberReflectability.None">
            <summary>
            Members are not reflectable (unless they are decorated either with any script-usable attributes or a [ReflectableAttribute])
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MemberReflectability.PublicAndProtected">
            <summary>
            Public and protected members are reflectable, private/internal members are only reflectable if are decorated either with any script-usable attributes or a [ReflectableAttribute].
            Members are reflectable even when their enclosing type is not publicly visible.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MemberReflectability.NonPrivate">
            <summary>
            Public, protected and internal members are reflectable, private members are only reflectable if are decorated either with any script-usable attributes or a [ReflectableAttribute].
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MemberReflectability.All">
            <summary>
            All members are reflectable by default (can be overridden with [Reflectable(false)]).
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DefaultMemberReflectabilityAttribute">
            <summary>
            This attribute can be applied to an assembly or a type to indicate whether members are reflectable by default.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.NoInlineAttribute">
            <summary>
            Can be applied to a constant field to ensure that it will never be inlined, even in minified scripts.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MutableAttribute">
            <summary>
             Can be applied to a user-defined value type (struct) to instruct the compiler that it can be mutated and therefore needs to be copied whenever .net would create a copy of a value type.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.PluginNameAttribute">
            <summary>
            Can be applied to an attribute to indicate that its name when referenced in a plugin is different from its name in script. Only useful for plugin developers, and probably not for plugins either. The only use case I can think of is when you are modifying a framework attribute type (eg. SerializableAttribute).
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CustomInitializationAttribute">
            <summary>
            Can be applied to a (non-const) field or an automatically implemented property to specify custom code to create the value with which the member is being initialized. For events and properties, this attribute applies to the compiler-generated backing field.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CustomInitializationAttribute.#ctor(System.String)">
            <param name="code">JS code to initialize the field. Can use the placeholder {value} to represent the value with which the member is being initialized (as well as all other placeholders from <see cref="T:System.Runtime.CompilerServices.InlineCodeAttribute"/>). If null, the member will not be initialized.</param>
        </member>
        <member name="T:System.Runtime.CompilerServices.DontGenerateAttribute">
            <summary>
            Can be specified on a method or a constructor to indicate that no code should be generated for the member, but it has no effect on any usage of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.BackingFieldNameAttribute">
            <summary>
            Can be specified on an automatically implemented event or property to denote the name of the backing field. The presense of this attribute will also cause the backing field to be initialized even if no code is generated for the accessors (eg. if they are [InlineCode]).
            </summary>
        </member>
        <member name="T:System.Serialization.JsonStringifyCallback">
            <summary>
            A function that filters and serializes objects being serialized into JSON text.
            If the callback returns undefined, the member is not serialized. Otherwise the new
            value returned from the callback is serialized instead.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="value">The value of the member.</param>
            <returns>The value to be serialized.</returns>
        </member>
        <member name="T:System.Serialization.JsonParseCallback">
            <summary>
            A function that filters and transforms objects deserialized from JSON text.
            If the callback returns the same value, the member is left unmodified. If
            the callback returns null, the member is removed. Otherwise the new value
            returned from the callback is used instead.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="value">The value of the member.</param>
            <returns>The transformed value.</returns>
        </member>
        <member name="M:System.Serialization.Json.Parse(System.String)">
            <summary>
            Parses the specified JSON text.
            </summary>
            <param name="json">The JSON text to be parsed.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:System.Serialization.Json.Parse``1(System.String)">
            <summary>
            Parses the specified JSON text.
            </summary>
            <param name="json">The JSON text to be parsed.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:System.Serialization.Json.Parse(System.String,System.Serialization.JsonParseCallback)">
            <summary>
            Parses the specified JSON text.
            </summary>
            <param name="json">The JSON text to be parsed.</param>
            <param name="parseCallback">A callback to invoke on each value that is deserialized.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:System.Serialization.Json.Parse``1(System.String,System.Serialization.JsonParseCallback)">
            <summary>
            Parses the specified JSON text.
            </summary>
            <param name="json">The JSON text to be parsed.</param>
            <param name="parseCallback">A callback to invoke on each value that is deserialized.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.String[])">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="serializableMembers">The specific members to serialize and their order.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.String[],System.Int32)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="serializableMembers">The specific members to serialize and their order.</param>
            <param name="indentSpaces">The number of spaces to use for indentation.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.String[],System.String)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="serializableMembers">The specific members to serialize and their order.</param>
            <param name="indentText">The string to use for indentation.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.Serialization.JsonStringifyCallback)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="callback">A callback to invoke for each value being serialized.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.Serialization.JsonStringifyCallback,System.Int32)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="callback">A callback to invoke for each value being serialized.</param>
            <param name="indentSpaces">The number of spaces to use for indentation.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="M:System.Serialization.Json.Stringify(System.Object,System.Serialization.JsonStringifyCallback,System.String)">
            <summary>
            Serializes the specified object into JSON representation.
            </summary>
            <param name="o">The object to serialize.</param>
            <param name="callback">A callback to invoke for each value being serialized.</param>
            <param name="indentText">The string to use for indentation.</param>
            <returns>The serialized value as JSON text.</returns>
        </member>
        <member name="T:System.Array">
            <summary>
            Equivalent to the Array type in Javascript.
            </summary>
        </member>
        <member name="T:System.Boolean">
            <summary>
            Equivalent to the Boolean type in Javascript.
            </summary>
        </member>
        <member name="T:System.Byte">
            <summary>
            The byte data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Byte.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.CancelEventArgs">
            <summary>
            The event argument associated with cancelable events.
            </summary>
        </member>
        <member name="T:System.EventArgs">
            <summary>
            Used by event sources to pass event argument information.
            </summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary>
            A static object of type <see cref="T:System.EventArgs"/> that is used as a convenient way to
            specify an empty EventArgs instance.
            </summary>
        </member>
        <member name="P:System.CancelEventArgs.Cancel">
            <summary>
            Whether the event has been canceled.
            </summary>
        </member>
        <member name="T:System.Char">
            <summary>
            The char data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Char.ToString">
            <summary>
            Converts the value to its string representation.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Char.ToLocaleString">
            <summary>
            Converts the value to its string representation.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.Arguments">
            <summary>
            Provides access to the arguments of the current function.
            </summary>
        </member>
        <member name="M:System.Arguments.GetArgument(System.Int32)">
            <summary>
            Retrieves the specified actual argument value passed to the
            function by index.
            </summary>
            <param name="index">The index of the argument to retrieve.</param>
            <returns>The value of the specified argument.</returns>
        </member>
        <member name="P:System.Arguments.Length">
            <summary>
            Retrieves the number of actual arguments passed to the function.
            </summary>
            <returns>The count of arguments.</returns>
        </member>
        <member name="T:System.DateTime">
            <summary>
            Equivalent to the Date type in Javascript, but emulates value-type semantics by removing all mutators.
            </summary>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int64)">
            <summary>
            Creates a new instance of Date initialized from the specified number of milliseconds.
            </summary>
            <param name="milliseconds">Milliseconds since January 1st, 1970.</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.String)">
            <summary>
            Creates a new instance of Date initialized from parsing the specified date.
            </summary>
            <param name="date"></param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (1 through 12)</param>
            <param name="day">The day of the month (1 through # of days in the specified month)</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (1 through 12)</param>
            <param name="day">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (1 through 12)</param>
            <param name="day">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (1 through 12)</param>
            <param name="day">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
            <param name="seconds">The seconds (0 through 59)</param>
        </member>
        <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Date.
            </summary>
            <param name="year">The full year.</param>
            <param name="month">The month (1 through 12)</param>
            <param name="day">The day of the month (1 through # of days in the specified month)</param>
            <param name="hours">The hours (0 through 23)</param>
            <param name="minutes">The minutes (0 through 59)</param>
            <param name="seconds">The seconds (0 through 59)</param>
            <param name="milliseconds">The milliseconds (0 through 999)</param>
        </member>
        <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
            <summary>
            Returns the difference in milliseconds between two dates.
            </summary>
        </member>
        <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
            <summary>
            Compares two dates
            </summary>
        </member>
        <member name="M:System.DateTime.op_Explicit(System.JsDate)~System.DateTime">
            <summary>
            Converts a DateTime to a JsDate. Returns a copy of the immutable datetime.
            </summary>
        </member>
        <member name="M:System.DateTime.op_Explicit(System.DateTime)~System.JsDate">
            <summary>
            Converts a JsDate to a DateTime. Returns a copy of the mutable datetime.
            </summary>
        </member>
        <member name="M:System.DateTime.AddDays(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of days to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of days represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional days. The <paramref name="value"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.AddHours(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of hours to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of hours represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional hours. The <paramref name="value"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.AddMilliseconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of milliseconds to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional milliseconds. The <paramref name="value"/> parameter can be negative or positive. Note that this value is rounded to the nearest integer.</param>
        </member>
        <member name="M:System.DateTime.AddMinutes(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of minutes to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional minutes. The <paramref name="value"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.AddMonths(System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of months to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and <paramref name="months"/>.
            </returns>
            <param name="months">A number of months. The <paramref name="months"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.AddSeconds(System.Double)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of seconds to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of seconds represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of whole and fractional seconds. The <paramref name="value"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.AddYears(System.Int32)">
            <summary>
            Returns a new <see cref="T:System.DateTime"/> that adds the specified number of years to the value of this instance.
            </summary>
            <returns>
            An object whose value is the sum of the date and time represented by this instance and the number of years represented by <paramref name="value"/>.
            </returns>
            <param name="value">A number of years. The <paramref name="value"/> parameter can be negative or positive. </param>
        </member>
        <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <returns>
            The number of days in <paramref name="month"/> for the specified <paramref name="year"/>.For example, if <paramref name="month"/> equals 2 for February, the return value is 28 or 29 depending upon whether <paramref name="year"/> is a leap year.
            </returns>
            <param name="year">The year. </param><param name="month">The month (a number ranging from 1 to 12). </param>
        </member>
        <member name="M:System.DateTime.IsLeapYear(System.Int32)">
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <returns>
            true if <paramref name="year"/> is a leap year; otherwise, false.
            </returns>
            <param name="year">A 4-digit year. </param>
        </member>
        <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares two instances of <see cref="T:System.DateTime"/> and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.
            </summary>
            <returns>
            A signed number indicating the relative values of <paramref name="t1"/> and <paramref name="t2"/>.Value Type Condition Less than zero <paramref name="t1"/> is earlier than <paramref name="t2"/>. Zero <paramref name="t1"/> is the same as <paramref name="t2"/>. Greater than zero <paramref name="t1"/> is later than <paramref name="t2"/>.
            </returns>
            <param name="t1">The first object to compare. </param><param name="t2">The second object to compare. </param>
        </member>
        <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
            <summary>
            Returns a value indicating whether two <see cref="T:System.DateTime"/> instances have the same date and time value.
            </summary>
            <returns>
            true if the two values are equal; otherwise, false.
            </returns>
            <param name="t1">The first object to compare. </param><param name="t2">The second object to compare. </param>
        </member>
        <member name="P:System.DateTime.Now">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="P:System.DateTime.UtcNow">
            <summary>
            Returns the current date and time according to UTC
            </summary>
        </member>
        <member name="P:System.DateTime.Today">
            <summary>
            Gets the current date.
            </summary>
            <returns>
            An object that is set to today's date, with the time component set to 00:00:00.
            </returns>
        </member>
        <member name="P:System.DateTime.Date">
            <summary>
            Gets the date component of this instance.
            </summary>
            <returns>
            A new object with the same date as this instance, and the time value set to 12:00:00 midnight (00:00:00).
            </returns>
        </member>
        <member name="P:System.DateTime.Day">
            <summary>
            Gets the day of the month represented by this instance.
            </summary>
            <returns>
            The day component, expressed as a value between 1 and 31.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:System.DateTime.DayOfWeek">
            <summary>
            Gets the day of the week represented by this instance.
            </summary>
            <returns>
            An enumerated constant that indicates the day of the week of this <see cref="T:System.DateTime"/> value.
            </returns>
        </member>
        <member name="P:System.DateTime.DayOfYear">
            <summary>
            Gets the day of the year represented by this instance.
            </summary>
            <returns>
            The day of the year, expressed as a value between 1 and 366.
            </returns>
        </member>
        <member name="P:System.DateTime.Hour">
            <summary>
            Gets the hour component of the date represented by this instance.
            </summary>
            <returns>
            The hour component, expressed as a value between 0 and 23.
            </returns>
        </member>
        <member name="P:System.DateTime.Millisecond">
            <summary>
            Gets the milliseconds component of the date represented by this instance.
            </summary>
            <returns>
            The milliseconds component, expressed as a value between 0 and 999.
            </returns>
        </member>
        <member name="P:System.DateTime.Minute">
            <summary>
            Gets the minute component of the date represented by this instance.
            </summary>
            <returns>
            The minute component, expressed as a value between 0 and 59.
            </returns>
        </member>
        <member name="P:System.DateTime.Month">
            <summary>
            Gets the month component of the date represented by this instance.
            </summary>
            <returns>
            The month component, expressed as a value between 1 and 12.
            </returns>
        </member>
        <member name="P:System.DateTime.Second">
            <summary>
            Gets the seconds component of the date represented by this instance.
            </summary>
            <returns>
            The seconds component, expressed as a value between 0 and 59.
            </returns>
        </member>
        <member name="P:System.DateTime.Year">
            <summary>
            Gets the year component of the date represented by this instance.
            </summary>
            <returns>
            The year, between 1 and 9999.
            </returns>
        </member>
        <member name="T:System.Decimal">
            <summary>
            The decimal data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Decimal.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Decimal.ToExponential">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Decimal.ToExponential(System.Int32)">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Decimal.ToFixed">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Decimal.ToFixed(System.Int32)">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Decimal.ToPrecision">
            <summary>
            Returns a string containing the number represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Decimal.ToPrecision(System.Int32)">
            <summary>
            Returns a string containing the number represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <param name="precision">The number of significant digits (in the range 1 to 21)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Increment(System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Decrement(System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
            <internalonly />
        </member>
        <member name="T:System.Double">
            <summary>
            The double data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Double.ToExponential">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Double.ToExponential(System.Int32)">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Double.ToFixed">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Double.ToFixed(System.Int32)">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Double.ToPrecision">
            <summary>
            Returns a string containing the value represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Double.ToPrecision(System.Int32)">
            <summary>
            Returns a string containing the value represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <param name="precision">The number of significant digits (in the range 1 to 21)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.EventHandler">
            <summary>
            Delegate for handling generic events.
            </summary>
            <param name="sender">The object that raised the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> object that contains the event data.</param>
        </member>
        <member name="T:System.Function">
            <summary>
            Equivalent to the Function type in Javascript.
            </summary>
        </member>
        <member name="M:System.Function.#ctor(System.String[])">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="argNamesAndBody">Argument names, followed by the function body.</param>
        </member>
        <member name="M:System.Function.#ctor(System.String,System.String)">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="parameters">List of comma separated argument names</param>
            <param name="body">The function body</param>
        </member>
        <member name="M:System.Function.#ctor(System.String[],System.String)">
            <summary>
            Creates a new function with the specified implementation, and the
            set of named parameters.
            </summary>
            <param name="parameters">Argument names</param>
            <param name="body">The function body</param>
        </member>
        <member name="M:System.Function.Apply(System.Object)">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:System.Function.Apply(System.Object,System.Object[])">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <param name="arguments">The set of arguments to pass in into the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:System.Function.Call(System.Object)">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="M:System.Function.Call(System.Object,System.Object[])">
            <summary>
            Invokes the function against the specified object instance.
            </summary>
            <param name="instance">The object used as the value of 'this' within the function.</param>
            <param name="arguments">One or more arguments to pass in into the function.</param>
            <returns>Any return value returned from the function.</returns>
        </member>
        <member name="P:System.Function.Length">
            <summary>
            Gets the number of parameters expected by the function.
            </summary>
        </member>
        <member name="T:System.Int16">
            <summary>
            The short data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Int16.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.Int32">
            <summary>
            The int data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Int32.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.Int64">
            <summary>
            The long data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Int64.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.Math">
            <summary>
            Equivalent to the Math object in Javascript.
            </summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Regex">
            <summary>
            Equivalent to the RegExp type in Javascript.
            </summary>
        </member>
        <member name="T:System.SByte">
            <summary>
            The signed byte data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.SByte.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.Script">
            <summary>
            The Script class contains various methods that represent global
            methods present in the underlying script engine.
            </summary>
        </member>
        <member name="M:System.Script.Boolean(System.Object)">
            <summary>
            Converts an object into a boolean.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>true if the object is not null, zero, empty string or undefined.</returns>
        </member>
        <member name="M:System.Script.Eval(System.String)">
            <summary>
            Enables you to evaluate (or execute) an arbitrary script
            literal. This includes JSON literals, where the return
            value is the deserialized object graph.
            </summary>
            <param name="s">The script to be evaluated.</param>
            <returns>The result of the evaluation.</returns>
        </member>
        <member name="M:System.Script.IsNull(System.Object)">
            <summary>
            Checks if the specified object is null.
            </summary>
            <param name="o">The object to test against null.</param>
            <returns>true if the object is null; false otherwise.</returns>
        </member>
        <member name="M:System.Script.IsNullOrUndefined(System.Object)">
            <summary>
            Checks if the specified object is null or undefined.
            The object passed in should be a local variable, and not
            a member of a class (to avoid potential script warnings).
            </summary>
            <param name="o">The object to test against null or undefined.</param>
            <returns>true if the object is null or undefined; false otherwise.</returns>
        </member>
        <member name="M:System.Script.IsUndefined(System.Object)">
            <summary>
            Checks if the specified object is undefined.
            The object passed in should be a local variable, and not
            a member of a class (to avoid potential script warnings).
            </summary>
            <param name="o">The object to test against undefined.</param>
            <returns>true if the object is undefined; false otherwise.</returns>
        </member>
        <member name="M:System.Script.IsValue(System.Object)">
            <summary>
            Checks if the specified object has a value, i.e. it is not
            null or undefined.
            </summary>
            <param name="o">The object to test.</param>
            <returns>true if the object represents a value; false otherwise.</returns>
        </member>
        <member name="M:System.Script.Coalesce``1(``0,``0)">
            <summary>
            Returns the first argument if it is not null or undefined, otherwise the second.
            </summary>
        </member>
        <member name="M:System.Script.Reinterpret``1(System.Object)">
            <summary>
            Reinterpret an object as another type without performing any type checks. 'Script.Reinterpret&lt;SomeType&gt;(a)' will always compile to 'a' regardless of types.
            </summary>
        </member>
        <member name="M:System.Script.TypeOf(System.Object)">
            <summary>
            Returns the result of Javascript 'typeof' operator. 
            </summary>
        </member>
        <member name="M:System.Script.Delete(System.Object,System.String)">
            <summary>
            Generate <c>delete obj[member]</c>.
            </summary>
        </member>
        <member name="M:System.Script.In(System.Object,System.String)">
            <summary>
            Generate <c>member in obj</c>.
            </summary>
        </member>
        <member name="P:System.Script.Undefined">
            <summary>
            Returns the undefined object.
            </summary>
        </member>
        <member name="P:System.Script.This">
            <summary>
            Returns the Javascript 'this'. Might be useful sometimes, but there are usually better ways of doing whatever is being done.
            </summary>
        </member>
        <member name="T:System.Single">
            <summary>
            The float data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.Single.ToExponential">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Single.ToExponential(System.Int32)">
            <summary>
            Returns a string containing the value represented in exponential notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point (0 - 20)</param>
            <returns>The exponential representation</returns>
        </member>
        <member name="M:System.Single.ToFixed">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Single.ToFixed(System.Int32)">
            <summary>
            Returns a string representing the value in fixed-point notation.
            </summary>
            <param name="fractionDigits">The number of digits after the decimal point from 0 - 20</param>
            <returns>The fixed-point notation</returns>
        </member>
        <member name="M:System.Single.ToPrecision">
            <summary>
            Returns a string containing the value represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="M:System.Single.ToPrecision(System.Int32)">
            <summary>
            Returns a string containing the value represented either in exponential or
            fixed-point notation with a specified number of digits.
            </summary>
            <param name="precision">The number of significant digits (in the range 1 to 21)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.String">
            <summary>
            Equivalent to the String type in Javascript.
            </summary>
        </member>
        <member name="F:System.String.Empty">
            <summary>
            An empty zero-length string.
            </summary>
        </member>
        <member name="M:System.String.CharAt(System.Int32)">
            <summary>
            Retrieves the character at the specified position.
            </summary>
            <param name="index">The specified 0-based position.</param>
            <returns>The character within the string.</returns>
        </member>
        <member name="M:System.String.CharCodeAt(System.Int32)">
            <summary>
            Retrieves the character code of the character at the specified position.
            </summary>
            <param name="index">The specified 0-based position.</param>
            <returns>The character code of the character within the string.</returns>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary>
            Concatenates a set of individual strings into a single string.
            </summary>
            <param name="strings">The sequence of strings</param>
            <returns>The concatenated string.</returns>
        </member>
        <member name="M:System.String.DecodeUri(System.String)">
            <summary>
            Returns the unencoded version of a complete encoded URI.
            </summary>
            <returns>The unencoded string.</returns>
        </member>
        <member name="M:System.String.DecodeUriComponent(System.String)">
            <summary>
            Returns the unencoded version of a single part or component of an encoded URI.
            </summary>
            <returns>The unencoded string.</returns>
        </member>
        <member name="M:System.String.EncodeUri(System.String)">
            <summary>
            Encodes the complete URI.
            </summary>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:System.String.EncodeUriComponent(System.String)">
            <summary>
            Encodes a single part or component of a URI.
            </summary>
            <returns>The encoded string.</returns>
        </member>
        <member name="M:System.String.EndsWith(System.Char)">
            <summary>
            Determines if the string ends with the specified character.
            </summary>
            <param name="ch">The character to test for.</param>
            <returns>true if the string ends with the character; false otherwise.</returns>
        </member>
        <member name="M:System.String.EndsWith(System.String)">
            <summary>
            Determines if the string ends with the specified substring or suffix.
            </summary>
            <param name="suffix">The string to test for.</param>
            <returns>true if the string ends with the suffix; false otherwise.</returns>
        </member>
        <member name="M:System.String.Equals(System.String,System.String,System.Boolean)">
            <summary>
            Determines if the strings are equal.
            </summary>
            <returns>true if the string s1 = s2; false otherwise.</returns>
        </member>
        <member name="M:System.String.Escape(System.String)">
            <summary>
            Encodes a string by replacing punctuation, spaces etc. with their escaped equivalents.
            </summary>
            <returns>The escaped string.</returns>
        </member>
        <member name="M:System.String.Unescape(System.String)">
            <summary>
            Decodes a string by replacing escaped parts with their equivalent textual representation.
            </summary>
            <returns>The unescaped string.</returns>
        </member>
        <member name="P:System.String.Length">
            <summary>
            The number of characters in the string.
            </summary>
        </member>
        <member name="T:System.Text.StringBuilder">
            <summary>
            Provides an optimized mechanism to concatenate strings.
            </summary>
        </member>
        <member name="M:System.Text.StringBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringBuilder"/> class.
            </summary>
        </member>
        <member name="M:System.Text.StringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.StringBuilder"/> class.
            </summary>
            <param name="initialText">
            The string that is used to initialize the value of the instance.
            </param>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
            <summary>
            Appends a boolean value to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="b">The boolean value to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Char)">
            <summary>
            Appends a character to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="c">The character to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Int32)">
            <summary>
            Appends a number to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="i">The number to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Double)">
            <summary>
            Appends a number to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="d">The number to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Object)">
            <summary>
            Appends an object's string representation to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="o">The object to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.String)">
            <summary>
            Appends the specified string to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="s">The string to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine">
            <summary>
            Appends a string with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.Boolean)">
            <summary>
            Appends a boolean with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="b">The boolean value to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.Char)">
            <summary>
            Appends a character with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="c">The character to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.Int32)">
            <summary>
            Appends a number with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="i">The number to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.Double)">
            <summary>
            Appends a number with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="d">The number to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.Object)">
            <summary>
            Appends an object's string representation with a line terminator to the end of the
            <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="o">The object to append to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
            <summary>
            Appends a string with a line terminator to the end of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <param name="s">The string to append with a line terminator to the end of the StringBuilder instance.</param>
            <returns>A reference to this instance after the append operation has completed.</returns>
        </member>
        <member name="M:System.Text.StringBuilder.Clear">
            <summary>
            Clears the contents of the <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
        </member>
        <member name="M:System.Text.StringBuilder.ToString">
            <summary>
            Creates a string from the contents of a <see cref="T:System.Text.StringBuilder"/> instance.
            </summary>
            <returns>A string representation of the StringBuilder instance.</returns>
        </member>
        <member name="P:System.Text.StringBuilder.IsEmpty">
            <summary>
            Gets whether the <see cref="T:System.Text.StringBuilder"/> object has any content.
            </summary>
            <returns>true if the StringBuilder instance contains no text; otherwise, false.</returns>
        </member>
        <member name="P:System.Text.StringBuilder.Length">
            <summary>
            Gets the length of the StringBuilder content.
            </summary>
            <returns>length of the StringBuilder content.</returns>
        </member>
        <member name="T:System.Type">
            <summary>
            The Type data type which is mapped to the Function type in Javascript.
            </summary>
        </member>
        <member name="P:System.Type.Prototype">
            <summary>
            Gets the prototype associated with the type.
            </summary>
        </member>
        <member name="T:System.TypeOption`2">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`3">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`4">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`5">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`6">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`7">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.TypeOption`8">
            <summary>
            Use this type when interacting with external libraries that accept arguments that can be of different types.
            </summary>
        </member>
        <member name="T:System.UInt16">
            <summary>
            The ushort data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.UInt16.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.UInt32">
            <summary>
            The uint data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.UInt32.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
        <member name="T:System.UInt64">
            <summary>
            The ulong data type which is mapped to the Number type in Javascript.
            </summary>
        </member>
        <member name="M:System.UInt64.ToString(System.Int32)">
            <summary>
            Converts the value to its string representation.
            </summary>
            <param name="radix">The radix used in the conversion (eg. 10 for decimal, 16 for hexadecimal)</param>
            <returns>The string representation of the value.</returns>
        </member>
    </members>
</doc>
